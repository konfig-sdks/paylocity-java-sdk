/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeeIdResponse;
import com.konfigthis.client.model.EmployeeInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeApi
 */
@Disabled
public class EmployeeApiTest {

    private static EmployeeApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeeApi(apiClient);
    }

    /**
     * Add new employee
     *
     * New Employee API sends new employee data directly to Paylocity Payroll/HR solution. Companies who use the New Hire Template in Paylocity Payroll/HR solution may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addToPaylocityTest() throws ApiException {
        String companyId = null;
        List<Object> additionalDirectDeposit = null;
        List<Object> additionalRate = null;
        Object benefitSetup = null;
        Object birthDate = null;
        Object companyFEIN = null;
        Object companyName = null;
        Object currency = null;
        List<Object> customBooleanFields = null;
        List<Object> customDateFields = null;
        List<Object> customDropDownFields = null;
        List<Object> customNumberFields = null;
        List<Object> customTextFields = null;
        Object departmentPosition = null;
        Object disabilityDescription = null;
        List<Object> emergencyContacts = null;
        Object employeeId = null;
        Object ethnicity = null;
        Object federalTax = null;
        Object firstName = null;
        Object gender = null;
        Object homeAddress = null;
        Boolean isHighlyCompensated = null;
        Boolean isSmoker = null;
        Object lastName = null;
        List<Object> localTax = null;
        Object mainDirectDeposit = null;
        Object maritalStatus = null;
        Object middleName = null;
        Object nonPrimaryStateTax = null;
        Object ownerPercent = null;
        Object preferredName = null;
        Object primaryPayRate = null;
        Object primaryStateTax = null;
        Object priorLastName = null;
        Object salutation = null;
        Object ssn = null;
        Object status = null;
        Object suffix = null;
        Object taxSetup = null;
        Object veteranDescription = null;
        Object webTime = null;
        Object workAddress = null;
        Object workEligibility = null;
        List<EmployeeIdResponse> response = api.addToPaylocity(companyId)
                .additionalDirectDeposit(additionalDirectDeposit)
                .additionalRate(additionalRate)
                .benefitSetup(benefitSetup)
                .birthDate(birthDate)
                .companyFEIN(companyFEIN)
                .companyName(companyName)
                .currency(currency)
                .customBooleanFields(customBooleanFields)
                .customDateFields(customDateFields)
                .customDropDownFields(customDropDownFields)
                .customNumberFields(customNumberFields)
                .customTextFields(customTextFields)
                .departmentPosition(departmentPosition)
                .disabilityDescription(disabilityDescription)
                .emergencyContacts(emergencyContacts)
                .employeeId(employeeId)
                .ethnicity(ethnicity)
                .federalTax(federalTax)
                .firstName(firstName)
                .gender(gender)
                .homeAddress(homeAddress)
                .isHighlyCompensated(isHighlyCompensated)
                .isSmoker(isSmoker)
                .lastName(lastName)
                .localTax(localTax)
                .mainDirectDeposit(mainDirectDeposit)
                .maritalStatus(maritalStatus)
                .middleName(middleName)
                .nonPrimaryStateTax(nonPrimaryStateTax)
                .ownerPercent(ownerPercent)
                .preferredName(preferredName)
                .primaryPayRate(primaryPayRate)
                .primaryStateTax(primaryStateTax)
                .priorLastName(priorLastName)
                .salutation(salutation)
                .ssn(ssn)
                .status(status)
                .suffix(suffix)
                .taxSetup(taxSetup)
                .veteranDescription(veteranDescription)
                .webTime(webTime)
                .workAddress(workAddress)
                .workEligibility(workEligibility)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all employees
     *
     * Get All Employees API will return employee data currently available in Paylocity Payroll/HR solution. \\ &gt; ðŸš§ Maintenance Mode &gt;  &gt; _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ &gt;   &gt; The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees) should be used when possible in place of the Employee resources of this API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllEmployeesTest() throws ApiException {
        String companyId = null;
        Integer pagesize = null;
        Integer pagenumber = null;
        Boolean includetotalcount = null;
        List<EmployeeInfo> response = api.getAllEmployees(companyId)
                .pagesize(pagesize)
                .pagenumber(pagenumber)
                .includetotalcount(includetotalcount)
                .execute();
        // TODO: test validations
    }

    /**
     * Get employee
     *
     * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution. \\ &gt; ðŸš§ Maintenance Mode &gt;  &gt; _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ &gt;   &gt; The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees-employeeid) should be used when possible in place of the Employee resources of this API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeDataTest() throws ApiException {
        String companyId = null;
        String employeeId = null;
        List<Employee> response = api.getEmployeeData(companyId, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update employee
     *
     * Update Employee API will update existing employee data in WebPay.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeDataTest() throws ApiException {
        String companyId = null;
        String employeeId = null;
        List<Object> additionalDirectDeposit = null;
        List<Object> additionalRate = null;
        Object benefitSetup = null;
        Object birthDate = null;
        Object companyFEIN = null;
        Object companyName = null;
        Object currency = null;
        List<Object> customBooleanFields = null;
        List<Object> customDateFields = null;
        List<Object> customDropDownFields = null;
        List<Object> customNumberFields = null;
        List<Object> customTextFields = null;
        Object departmentPosition = null;
        Object disabilityDescription = null;
        List<Object> emergencyContacts = null;
        Object employeeId = null;
        Object ethnicity = null;
        Object federalTax = null;
        Object firstName = null;
        Object gender = null;
        Object homeAddress = null;
        Boolean isHighlyCompensated = null;
        Boolean isSmoker = null;
        Object lastName = null;
        List<Object> localTax = null;
        Object mainDirectDeposit = null;
        Object maritalStatus = null;
        Object middleName = null;
        Object nonPrimaryStateTax = null;
        Object ownerPercent = null;
        Object preferredName = null;
        Object primaryPayRate = null;
        Object primaryStateTax = null;
        Object priorLastName = null;
        Object salutation = null;
        Object ssn = null;
        Object status = null;
        Object suffix = null;
        Object taxSetup = null;
        Object veteranDescription = null;
        Object webTime = null;
        Object workAddress = null;
        Object workEligibility = null;
        api.updateEmployeeData(companyId, employeeId)
                .additionalDirectDeposit(additionalDirectDeposit)
                .additionalRate(additionalRate)
                .benefitSetup(benefitSetup)
                .birthDate(birthDate)
                .companyFEIN(companyFEIN)
                .companyName(companyName)
                .currency(currency)
                .customBooleanFields(customBooleanFields)
                .customDateFields(customDateFields)
                .customDropDownFields(customDropDownFields)
                .customNumberFields(customNumberFields)
                .customTextFields(customTextFields)
                .departmentPosition(departmentPosition)
                .disabilityDescription(disabilityDescription)
                .emergencyContacts(emergencyContacts)
                .employeeId(employeeId)
                .ethnicity(ethnicity)
                .federalTax(federalTax)
                .firstName(firstName)
                .gender(gender)
                .homeAddress(homeAddress)
                .isHighlyCompensated(isHighlyCompensated)
                .isSmoker(isSmoker)
                .lastName(lastName)
                .localTax(localTax)
                .mainDirectDeposit(mainDirectDeposit)
                .maritalStatus(maritalStatus)
                .middleName(middleName)
                .nonPrimaryStateTax(nonPrimaryStateTax)
                .ownerPercent(ownerPercent)
                .preferredName(preferredName)
                .primaryPayRate(primaryPayRate)
                .primaryStateTax(primaryStateTax)
                .priorLastName(priorLastName)
                .salutation(salutation)
                .ssn(ssn)
                .status(status)
                .suffix(suffix)
                .taxSetup(taxSetup)
                .veteranDescription(veteranDescription)
                .webTime(webTime)
                .workAddress(workAddress)
                .workEligibility(workEligibility)
                .execute();
        // TODO: test validations
    }

}
