/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmployeeV1;
import com.konfigthis.client.model.EmployeeV1CreateNewEmployeeRecordRequest;
import com.konfigthis.client.model.EmployeeV1UpdateEmployeeDataToPaylocityRequest;
import com.konfigthis.client.model.NewEmployee;
import com.konfigthis.client.model.UpdateEmployee;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeV1Api
 */
@Disabled
public class EmployeeV1ApiTest {

    private static EmployeeV1Api api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeeV1Api(apiClient);
    }

    /**
     * Add new employee
     *
     * This resource allows for the creation of a new employee record for a specified companyID.  Additional field objects may need to be added for companies that use the New Hire Template in the Paylocity HCM solution when hiring employees and have additional required fields.   &gt; ðŸš§ Maintenance Mode &gt;  &gt; _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewEmployeeRecordTest() throws ApiException {
        NewEmployee newEmployee = null;
        api.createNewEmployeeRecord()
                .newEmployee(newEmployee)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Employee
     *
     * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution.   &gt; ðŸš§ Maintenance Mode &gt;  &gt; _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeDataTest() throws ApiException {
        String companyId = null;
        String employeeId = null;
        EmployeeV1 response = api.getEmployeeData(companyId, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update employee
     *
     * Update Employee API sends updates to employee data to Paylocity Payroll/HR solution.   &gt; ðŸš§ Maintenance Mode &gt;  &gt; _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeDataToPaylocityTest() throws ApiException {
        UpdateEmployee updateEmployee = null;
        api.updateEmployeeDataToPaylocity()
                .updateEmployee(updateEmployee)
                .execute();
        // TODO: test validations
    }

}
