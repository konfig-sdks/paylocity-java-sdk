/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AdditionalRate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdditionalRatesApi
 */
@Disabled
public class AdditionalRatesApiTest {

    private static AdditionalRatesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AdditionalRatesApi(apiClient);
    }

    /**
     * Add/update additional rates
     *
     * Sends new or updated employee additional rates information directly to Paylocity Payroll/HR solution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeAdditionalRatesTest() throws ApiException {
        String companyId = null;
        String employeeId = null;
        Object changeReason = null;
        Object costCenter1 = null;
        Object costCenter2 = null;
        Object costCenter3 = null;
        Object effectiveDate = null;
        Object endCheckDate = null;
        Object job = null;
        Object rate = null;
        Object rateCode = null;
        Object rateNotes = null;
        Object ratePer = null;
        Object shift = null;
        api.updateEmployeeAdditionalRates(companyId, employeeId)
                .changeReason(changeReason)
                .costCenter1(costCenter1)
                .costCenter2(costCenter2)
                .costCenter3(costCenter3)
                .effectiveDate(effectiveDate)
                .endCheckDate(endCheckDate)
                .job(job)
                .rate(rate)
                .rateCode(rateCode)
                .rateNotes(rateNotes)
                .ratePer(ratePer)
                .shift(shift)
                .execute();
        // TODO: test validations
    }

}
