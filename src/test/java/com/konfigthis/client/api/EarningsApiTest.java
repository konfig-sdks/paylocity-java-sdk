/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Earning;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EarningsApi
 */
@Disabled
public class EarningsApiTest {

    private static EarningsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EarningsApi(apiClient);
    }

    /**
     * Add/Update Earning
     *
     * Add/Update Earning API sends new or updated employee earnings information directly to Paylocity Payroll/HR solution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addOrUpdateEarningTest() throws ApiException {
        Object earningCode = null;
        Object startDate = null;
        String companyId = null;
        String employeeId = null;
        Object agency = null;
        Object amount = null;
        Object annualMaximum = null;
        Object calculationCode = null;
        Object costCenter1 = null;
        Object costCenter2 = null;
        Object costCenter3 = null;
        Object effectiveDate = null;
        Object endDate = null;
        Object frequency = null;
        Object goal = null;
        Object hoursOrUnits = null;
        Object isSelfInsured = null;
        Object jobCode = null;
        Object miscellaneousInfo = null;
        Object paidTowardsGoal = null;
        Object payPeriodMaximum = null;
        Object payPeriodMinimum = null;
        Object rate = null;
        Object rateCode = null;
        api.addOrUpdateEarning(earningCode, startDate, companyId, employeeId)
                .agency(agency)
                .amount(amount)
                .annualMaximum(annualMaximum)
                .calculationCode(calculationCode)
                .costCenter1(costCenter1)
                .costCenter2(costCenter2)
                .costCenter3(costCenter3)
                .effectiveDate(effectiveDate)
                .endDate(endDate)
                .frequency(frequency)
                .goal(goal)
                .hoursOrUnits(hoursOrUnits)
                .isSelfInsured(isSelfInsured)
                .jobCode(jobCode)
                .miscellaneousInfo(miscellaneousInfo)
                .paidTowardsGoal(paidTowardsGoal)
                .payPeriodMaximum(payPeriodMaximum)
                .payPeriodMinimum(payPeriodMinimum)
                .rate(rate)
                .rateCode(rateCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Earning by Earning Code and Start Date
     *
     * Delete Earning by Earning Code and Start Date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByCodeAndStartTest() throws ApiException {
        String companyId = null;
        String employeeId = null;
        String earningCode = null;
        String startDate = null;
        api.deleteByCodeAndStart(companyId, employeeId, earningCode, startDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get All Earnings
     *
     * Get All Earnings returns all earnings for the selected employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String companyId = null;
        String employeeId = null;
        List<Earning> response = api.getAll(companyId, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Earning by Earning Code and Start Date
     *
     * Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByCodeAndStartTest() throws ApiException {
        String companyId = null;
        String employeeId = null;
        String earningCode = null;
        String startDate = null;
        Earning response = api.getByCodeAndStart(companyId, employeeId, earningCode, startDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Earnings by Earning Code
     *
     * Get Earnings returns all earnings with the provided earning code for the selected employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByEarningCodeTest() throws ApiException {
        String companyId = null;
        String employeeId = null;
        String earningCode = null;
        List<Earning> response = api.getByEarningCode(companyId, employeeId, earningCode)
                .execute();
        // TODO: test validations
    }

}
