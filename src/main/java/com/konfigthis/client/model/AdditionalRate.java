/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The additional pay rate model
 */
@ApiModel(description = "The additional pay rate model")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AdditionalRate {
  public static final String SERIALIZED_NAME_CHANGE_REASON = "changeReason";
  @SerializedName(SERIALIZED_NAME_CHANGE_REASON)
  private Object changeReason;

  public static final String SERIALIZED_NAME_COST_CENTER1 = "costCenter1";
  @SerializedName(SERIALIZED_NAME_COST_CENTER1)
  private Object costCenter1;

  public static final String SERIALIZED_NAME_COST_CENTER2 = "costCenter2";
  @SerializedName(SERIALIZED_NAME_COST_CENTER2)
  private Object costCenter2;

  public static final String SERIALIZED_NAME_COST_CENTER3 = "costCenter3";
  @SerializedName(SERIALIZED_NAME_COST_CENTER3)
  private Object costCenter3;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private Object effectiveDate;

  public static final String SERIALIZED_NAME_END_CHECK_DATE = "endCheckDate";
  @SerializedName(SERIALIZED_NAME_END_CHECK_DATE)
  private Object endCheckDate;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private Object job;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Object rate;

  public static final String SERIALIZED_NAME_RATE_CODE = "rateCode";
  @SerializedName(SERIALIZED_NAME_RATE_CODE)
  private Object rateCode;

  public static final String SERIALIZED_NAME_RATE_NOTES = "rateNotes";
  @SerializedName(SERIALIZED_NAME_RATE_NOTES)
  private Object rateNotes;

  public static final String SERIALIZED_NAME_RATE_PER = "ratePer";
  @SerializedName(SERIALIZED_NAME_RATE_PER)
  private Object ratePer;

  public static final String SERIALIZED_NAME_SHIFT = "shift";
  @SerializedName(SERIALIZED_NAME_SHIFT)
  private Object shift;

  public AdditionalRate() {
  }

  public AdditionalRate changeReason(Object changeReason) {
    
    
    
    
    this.changeReason = changeReason;
    return this;
  }

   /**
   * Not required. If populated, must match one of the system coded values available in the Additional Rates Change Reason drop down.&lt;br /&gt;
   * @return changeReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not required. If populated, must match one of the system coded values available in the Additional Rates Change Reason drop down.<br />")

  public Object getChangeReason() {
    return changeReason;
  }


  public void setChangeReason(Object changeReason) {
    
    
    
    this.changeReason = changeReason;
  }


  public AdditionalRate costCenter1(Object costCenter1) {
    
    
    
    
    this.costCenter1 = costCenter1;
    return this;
  }

   /**
   * Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 1 drop down. This cell must be in a text format.&lt;br /&gt;
   * @return costCenter1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 1 drop down. This cell must be in a text format.<br />")

  public Object getCostCenter1() {
    return costCenter1;
  }


  public void setCostCenter1(Object costCenter1) {
    
    
    
    this.costCenter1 = costCenter1;
  }


  public AdditionalRate costCenter2(Object costCenter2) {
    
    
    
    
    this.costCenter2 = costCenter2;
    return this;
  }

   /**
   * Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 2 drop down. This cell must be in a text format.&lt;br /&gt;
   * @return costCenter2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 2 drop down. This cell must be in a text format.<br />")

  public Object getCostCenter2() {
    return costCenter2;
  }


  public void setCostCenter2(Object costCenter2) {
    
    
    
    this.costCenter2 = costCenter2;
  }


  public AdditionalRate costCenter3(Object costCenter3) {
    
    
    
    
    this.costCenter3 = costCenter3;
    return this;
  }

   /**
   * Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 3 drop down. This cell must be in a text format.&lt;br /&gt;
   * @return costCenter3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 3 drop down. This cell must be in a text format.<br />")

  public Object getCostCenter3() {
    return costCenter3;
  }


  public void setCostCenter3(Object costCenter3) {
    
    
    
    this.costCenter3 = costCenter3;
  }


  public AdditionalRate effectiveDate(Object effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Required. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.&lt;br /&gt;
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />")

  public Object getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(Object effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public AdditionalRate endCheckDate(Object endCheckDate) {
    
    
    
    
    this.endCheckDate = endCheckDate;
    return this;
  }

   /**
   * Not required. Must match one of the system coded check dates available in the Additional Rates End Check Date drop down. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.&lt;br /&gt;
   * @return endCheckDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not required. Must match one of the system coded check dates available in the Additional Rates End Check Date drop down. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.<br />")

  public Object getEndCheckDate() {
    return endCheckDate;
  }


  public void setEndCheckDate(Object endCheckDate) {
    
    
    
    this.endCheckDate = endCheckDate;
  }


  public AdditionalRate job(Object job) {
    
    
    
    
    this.job = job;
    return this;
  }

   /**
   * Not required. If populated, must match one of the system coded values available in the Additional Rates Job drop down.&lt;br /&gt;
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not required. If populated, must match one of the system coded values available in the Additional Rates Job drop down.<br />")

  public Object getJob() {
    return job;
  }


  public void setJob(Object job) {
    
    
    
    this.job = job;
  }


  public AdditionalRate rate(Object rate) {
    
    
    
    
    this.rate = rate;
    return this;
  }

   /**
   * Required. Enter dollar amount that corresponds to the Per selection.&lt;br /&gt;
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required. Enter dollar amount that corresponds to the Per selection.<br />")

  public Object getRate() {
    return rate;
  }


  public void setRate(Object rate) {
    
    
    
    this.rate = rate;
  }


  public AdditionalRate rateCode(Object rateCode) {
    
    
    
    
    this.rateCode = rateCode;
    return this;
  }

   /**
   * Required. If populated, must match one of the system coded values available in the Additional Rates Rate Code drop down.&lt;br /&gt;
   * @return rateCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required. If populated, must match one of the system coded values available in the Additional Rates Rate Code drop down.<br />")

  public Object getRateCode() {
    return rateCode;
  }


  public void setRateCode(Object rateCode) {
    
    
    
    this.rateCode = rateCode;
  }


  public AdditionalRate rateNotes(Object rateNotes) {
    
    
    
    
    this.rateNotes = rateNotes;
    return this;
  }

   /**
   * Not required.&lt;br  /&gt;Max length: 4000&lt;br /&gt;
   * @return rateNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not required.<br  />Max length: 4000<br />")

  public Object getRateNotes() {
    return rateNotes;
  }


  public void setRateNotes(Object rateNotes) {
    
    
    
    this.rateNotes = rateNotes;
  }


  public AdditionalRate ratePer(Object ratePer) {
    
    
    
    
    this.ratePer = ratePer;
    return this;
  }

   /**
   * Required. Valid values are HOUR or WEEK.&lt;br /&gt;
   * @return ratePer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required. Valid values are HOUR or WEEK.<br />")

  public Object getRatePer() {
    return ratePer;
  }


  public void setRatePer(Object ratePer) {
    
    
    
    this.ratePer = ratePer;
  }


  public AdditionalRate shift(Object shift) {
    
    
    
    
    this.shift = shift;
    return this;
  }

   /**
   * Not required. If populated, must match one of the system coded values available in the Additional Rates Shift drop down.&lt;br /&gt;
   * @return shift
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not required. If populated, must match one of the system coded values available in the Additional Rates Shift drop down.<br />")

  public Object getShift() {
    return shift;
  }


  public void setShift(Object shift) {
    
    
    
    this.shift = shift;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AdditionalRate instance itself
   */
  public AdditionalRate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalRate additionalRate = (AdditionalRate) o;
    return Objects.equals(this.changeReason, additionalRate.changeReason) &&
        Objects.equals(this.costCenter1, additionalRate.costCenter1) &&
        Objects.equals(this.costCenter2, additionalRate.costCenter2) &&
        Objects.equals(this.costCenter3, additionalRate.costCenter3) &&
        Objects.equals(this.effectiveDate, additionalRate.effectiveDate) &&
        Objects.equals(this.endCheckDate, additionalRate.endCheckDate) &&
        Objects.equals(this.job, additionalRate.job) &&
        Objects.equals(this.rate, additionalRate.rate) &&
        Objects.equals(this.rateCode, additionalRate.rateCode) &&
        Objects.equals(this.rateNotes, additionalRate.rateNotes) &&
        Objects.equals(this.ratePer, additionalRate.ratePer) &&
        Objects.equals(this.shift, additionalRate.shift)&&
        Objects.equals(this.additionalProperties, additionalRate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeReason, costCenter1, costCenter2, costCenter3, effectiveDate, endCheckDate, job, rate, rateCode, rateNotes, ratePer, shift, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalRate {\n");
    sb.append("    changeReason: ").append(toIndentedString(changeReason)).append("\n");
    sb.append("    costCenter1: ").append(toIndentedString(costCenter1)).append("\n");
    sb.append("    costCenter2: ").append(toIndentedString(costCenter2)).append("\n");
    sb.append("    costCenter3: ").append(toIndentedString(costCenter3)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    endCheckDate: ").append(toIndentedString(endCheckDate)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    rateCode: ").append(toIndentedString(rateCode)).append("\n");
    sb.append("    rateNotes: ").append(toIndentedString(rateNotes)).append("\n");
    sb.append("    ratePer: ").append(toIndentedString(ratePer)).append("\n");
    sb.append("    shift: ").append(toIndentedString(shift)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeReason");
    openapiFields.add("costCenter1");
    openapiFields.add("costCenter2");
    openapiFields.add("costCenter3");
    openapiFields.add("effectiveDate");
    openapiFields.add("endCheckDate");
    openapiFields.add("job");
    openapiFields.add("rate");
    openapiFields.add("rateCode");
    openapiFields.add("rateNotes");
    openapiFields.add("ratePer");
    openapiFields.add("shift");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AdditionalRate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AdditionalRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalRate is not found in the empty JSON string", AdditionalRate.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalRate.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalRate>() {
           @Override
           public void write(JsonWriter out, AdditionalRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalRate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AdditionalRate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AdditionalRate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AdditionalRate
  * @throws IOException if the JSON string is invalid with respect to AdditionalRate
  */
  public static AdditionalRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalRate.class);
  }

 /**
  * Convert an instance of AdditionalRate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

