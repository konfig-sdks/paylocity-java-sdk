/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddUpdateDeduction
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddUpdateDeduction {
  public static final String SERIALIZED_NAME_AGENCY = "agency";
  @SerializedName(SERIALIZED_NAME_AGENCY)
  private String agency;

  public static final String SERIALIZED_NAME_ANNUAL_MAXIMUM = "annualMaximum";
  @SerializedName(SERIALIZED_NAME_ANNUAL_MAXIMUM)
  private Double annualMaximum;

  public static final String SERIALIZED_NAME_CALC_CODE = "calcCode";
  @SerializedName(SERIALIZED_NAME_CALC_CODE)
  private String calcCode;

  public static final String SERIALIZED_NAME_CASE_NO = "caseNo";
  @SerializedName(SERIALIZED_NAME_CASE_NO)
  private String caseNo;

  public static final String SERIALIZED_NAME_COMPANY_NUMBER = "companyNumber";
  @SerializedName(SERIALIZED_NAME_COMPANY_NUMBER)
  private String companyNumber;

  public static final String SERIALIZED_NAME_COST_CENTER1 = "costCenter1";
  @SerializedName(SERIALIZED_NAME_COST_CENTER1)
  private String costCenter1;

  public static final String SERIALIZED_NAME_COST_CENTER2 = "costCenter2";
  @SerializedName(SERIALIZED_NAME_COST_CENTER2)
  private String costCenter2;

  public static final String SERIALIZED_NAME_COST_CENTER3 = "costCenter3";
  @SerializedName(SERIALIZED_NAME_COST_CENTER3)
  private String costCenter3;

  public static final String SERIALIZED_NAME_DCODE = "dcode";
  @SerializedName(SERIALIZED_NAME_DCODE)
  private String dcode;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_FIPS_CODE = "fipsCode";
  @SerializedName(SERIALIZED_NAME_FIPS_CODE)
  private String fipsCode;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_GOAL = "goal";
  @SerializedName(SERIALIZED_NAME_GOAL)
  private Double goal;

  public static final String SERIALIZED_NAME_IS_SELF_INSURED_PLAN = "isSelfInsuredPlan";
  @SerializedName(SERIALIZED_NAME_IS_SELF_INSURED_PLAN)
  private Boolean isSelfInsuredPlan;

  public static final String SERIALIZED_NAME_LOAN_FIRST_PAYMENT_DATE401_K = "loanFirstPaymentDate401K";
  @SerializedName(SERIALIZED_NAME_LOAN_FIRST_PAYMENT_DATE401_K)
  private LocalDate loanFirstPaymentDate401K;

  public static final String SERIALIZED_NAME_LOAN_ISSUE_DATE401_K = "loanIssueDate401K";
  @SerializedName(SERIALIZED_NAME_LOAN_ISSUE_DATE401_K)
  private LocalDate loanIssueDate401K;

  public static final String SERIALIZED_NAME_LOAN_NUMBER = "loanNumber";
  @SerializedName(SERIALIZED_NAME_LOAN_NUMBER)
  private String loanNumber;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Double maximum;

  public static final String SERIALIZED_NAME_MEDICAL_SUPPORT = "medicalSupport";
  @SerializedName(SERIALIZED_NAME_MEDICAL_SUPPORT)
  private Boolean medicalSupport;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Double minimum;

  public static final String SERIALIZED_NAME_MISC_INFO = "miscInfo";
  @SerializedName(SERIALIZED_NAME_MISC_INFO)
  private String miscInfo;

  public static final String SERIALIZED_NAME_PAID_TOWARDS_GOAL = "paidTowardsGoal";
  @SerializedName(SERIALIZED_NAME_PAID_TOWARDS_GOAL)
  private Double paidTowardsGoal;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public static final String SERIALIZED_NAME_REPORT_TERMINATED = "reportTerminated";
  @SerializedName(SERIALIZED_NAME_REPORT_TERMINATED)
  private Boolean reportTerminated;

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  private String ssn;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_STATE_ABBREV = "stateAbbrev";
  @SerializedName(SERIALIZED_NAME_STATE_ABBREV)
  private String stateAbbrev;

  public AddUpdateDeduction() {
  }

  public AddUpdateDeduction agency(String agency) {
    
    
    
    
    this.agency = agency;
    return this;
  }

   /**
   * Used to produce third-party checks for a specific agency. Must match Company setup.&lt;br  /&gt;Max length: 5
   * @return agency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used to produce third-party checks for a specific agency. Must match Company setup.<br  />Max length: 5")

  public String getAgency() {
    return agency;
  }


  public void setAgency(String agency) {
    
    
    
    this.agency = agency;
  }


  public AddUpdateDeduction annualMaximum(Double annualMaximum) {
    
    
    
    
    this.annualMaximum = annualMaximum;
    return this;
  }

  public AddUpdateDeduction annualMaximum(Integer annualMaximum) {
    
    
    
    
    this.annualMaximum = annualMaximum.doubleValue();
    return this;
  }

   /**
   * Year to Date dollar amount not to be exceeded for a deduction in the calendar year. &lt;br  /&gt;Decimal(12,2)
   * @return annualMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Year to Date dollar amount not to be exceeded for a deduction in the calendar year. <br  />Decimal(12,2)")

  public Double getAnnualMaximum() {
    return annualMaximum;
  }


  public void setAnnualMaximum(Double annualMaximum) {
    
    
    
    this.annualMaximum = annualMaximum;
  }


  public AddUpdateDeduction calcCode(String calcCode) {
    
    
    
    
    this.calcCode = calcCode;
    return this;
  }

   /**
   * Defines how deductions are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for deduction. &lt;br  /&gt;Max length: 15
   * @return calcCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines how deductions are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for deduction. <br  />Max length: 15")

  public String getCalcCode() {
    return calcCode;
  }


  public void setCalcCode(String calcCode) {
    
    
    
    this.calcCode = calcCode;
  }


  public AddUpdateDeduction caseNo(String caseNo) {
    
    
    
    
    this.caseNo = caseNo;
    return this;
  }

   /**
   * Child Support Case Identifier number, case number or court order number.&lt;br  /&gt;Max length: 20
   * @return caseNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Child Support Case Identifier number, case number or court order number.<br  />Max length: 20")

  public String getCaseNo() {
    return caseNo;
  }


  public void setCaseNo(String caseNo) {
    
    
    
    this.caseNo = caseNo;
  }


  public AddUpdateDeduction companyNumber(String companyNumber) {
    
    
    
    
    this.companyNumber = companyNumber;
    return this;
  }

   /**
   * Paylocity assigned company number. &lt;br  /&gt;Max length: 9
   * @return companyNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Paylocity assigned company number. <br  />Max length: 9")

  public String getCompanyNumber() {
    return companyNumber;
  }


  public void setCompanyNumber(String companyNumber) {
    
    
    
    this.companyNumber = companyNumber;
  }


  public AddUpdateDeduction costCenter1(String costCenter1) {
    
    
    
    
    this.costCenter1 = costCenter1;
    return this;
  }

   /**
   * Cost Center associated with deduction. Must match Company setup.&lt;br  /&gt; Max length: 10
   * @return costCenter1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost Center associated with deduction. Must match Company setup.<br  /> Max length: 10")

  public String getCostCenter1() {
    return costCenter1;
  }


  public void setCostCenter1(String costCenter1) {
    
    
    
    this.costCenter1 = costCenter1;
  }


  public AddUpdateDeduction costCenter2(String costCenter2) {
    
    
    
    
    this.costCenter2 = costCenter2;
    return this;
  }

   /**
   * Cost Center associated with deduction. Must match Company setup.&lt;br  /&gt; Max length: 10
   * @return costCenter2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost Center associated with deduction. Must match Company setup.<br  /> Max length: 10")

  public String getCostCenter2() {
    return costCenter2;
  }


  public void setCostCenter2(String costCenter2) {
    
    
    
    this.costCenter2 = costCenter2;
  }


  public AddUpdateDeduction costCenter3(String costCenter3) {
    
    
    
    
    this.costCenter3 = costCenter3;
    return this;
  }

   /**
   * Cost Center associated with deduction. Must match Company setup.&lt;br  /&gt; Max length: 10
   * @return costCenter3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost Center associated with deduction. Must match Company setup.<br  /> Max length: 10")

  public String getCostCenter3() {
    return costCenter3;
  }


  public void setCostCenter3(String costCenter3) {
    
    
    
    this.costCenter3 = costCenter3;
  }


  public AddUpdateDeduction dcode(String dcode) {
    
    
    
    
    this.dcode = dcode;
    return this;
  }

   /**
   * Deduction code. Must match Company setup. &lt;br  /&gt;Max length: 5
   * @return dcode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deduction code. Must match Company setup. <br  />Max length: 5")

  public String getDcode() {
    return dcode;
  }


  public void setDcode(String dcode) {
    
    
    
    this.dcode = dcode;
  }


  public AddUpdateDeduction effectiveDate(LocalDate effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Date deduction or benefit is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date deduction or benefit is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD")

  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(LocalDate effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public AddUpdateDeduction employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Either employee ID or employee SSN is required.&lt;br  /&gt; Max length: 10
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Either employee ID or employee SSN is required.<br  /> Max length: 10")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public AddUpdateDeduction endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Stop date of a deduction or benefit. Common formats are MM-DD-CCYY, CCYY-MM-DD.
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stop date of a deduction or benefit. Common formats are MM-DD-CCYY, CCYY-MM-DD.")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public AddUpdateDeduction fipsCode(String fipsCode) {
    
    
    
    
    this.fipsCode = fipsCode;
    return this;
  }

   /**
   * Child support Federal Information Process Standard (FIPS) code. &lt;br  /&gt;Max length: 7
   * @return fipsCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Child support Federal Information Process Standard (FIPS) code. <br  />Max length: 7")

  public String getFipsCode() {
    return fipsCode;
  }


  public void setFipsCode(String fipsCode) {
    
    
    
    this.fipsCode = fipsCode;
  }


  public AddUpdateDeduction frequency(String frequency) {
    
    
    
    
    this.frequency = frequency;
    return this;
  }

   /**
   * Needed if deduction is applied differently from the payroll frequency (one time deduction for example).&lt;br  /&gt; Max length: 5
   * @return frequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Needed if deduction is applied differently from the payroll frequency (one time deduction for example).<br  /> Max length: 5")

  public String getFrequency() {
    return frequency;
  }


  public void setFrequency(String frequency) {
    
    
    
    this.frequency = frequency;
  }


  public AddUpdateDeduction goal(Double goal) {
    
    
    
    
    this.goal = goal;
    return this;
  }

  public AddUpdateDeduction goal(Integer goal) {
    
    
    
    
    this.goal = goal.doubleValue();
    return this;
  }

   /**
   * Dollar amount. The employee deduction will stop when the goal amount is reached.&lt;br  /&gt; Decimal(12,2)
   * @return goal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dollar amount. The employee deduction will stop when the goal amount is reached.<br  /> Decimal(12,2)")

  public Double getGoal() {
    return goal;
  }


  public void setGoal(Double goal) {
    
    
    
    this.goal = goal;
  }


  public AddUpdateDeduction isSelfInsuredPlan(Boolean isSelfInsuredPlan) {
    
    
    
    
    this.isSelfInsuredPlan = isSelfInsuredPlan;
    return this;
  }

   /**
   * Used for ACA. If not entered, defaulted to Company deduction setup
   * @return isSelfInsuredPlan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used for ACA. If not entered, defaulted to Company deduction setup")

  public Boolean getIsSelfInsuredPlan() {
    return isSelfInsuredPlan;
  }


  public void setIsSelfInsuredPlan(Boolean isSelfInsuredPlan) {
    
    
    
    this.isSelfInsuredPlan = isSelfInsuredPlan;
  }


  public AddUpdateDeduction loanFirstPaymentDate401K(LocalDate loanFirstPaymentDate401K) {
    
    
    
    
    this.loanFirstPaymentDate401K = loanFirstPaymentDate401K;
    return this;
  }

   /**
   * 401K loan first payment date. Common formats are MM-DD-CCYY, CCYY-MM-DD
   * @return loanFirstPaymentDate401K
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "401K loan first payment date. Common formats are MM-DD-CCYY, CCYY-MM-DD")

  public LocalDate getLoanFirstPaymentDate401K() {
    return loanFirstPaymentDate401K;
  }


  public void setLoanFirstPaymentDate401K(LocalDate loanFirstPaymentDate401K) {
    
    
    
    this.loanFirstPaymentDate401K = loanFirstPaymentDate401K;
  }


  public AddUpdateDeduction loanIssueDate401K(LocalDate loanIssueDate401K) {
    
    
    
    
    this.loanIssueDate401K = loanIssueDate401K;
    return this;
  }

   /**
   * 401K loan issue date. Common formats are MM-DD-CCYY, CCYY-MM-DD
   * @return loanIssueDate401K
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "401K loan issue date. Common formats are MM-DD-CCYY, CCYY-MM-DD")

  public LocalDate getLoanIssueDate401K() {
    return loanIssueDate401K;
  }


  public void setLoanIssueDate401K(LocalDate loanIssueDate401K) {
    
    
    
    this.loanIssueDate401K = loanIssueDate401K;
  }


  public AddUpdateDeduction loanNumber(String loanNumber) {
    
    
    
    
    this.loanNumber = loanNumber;
    return this;
  }

   /**
   * 401K Loan number, required for 401K Loan deduction types. &lt;br  /&gt; Max length: 50
   * @return loanNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "401K Loan number, required for 401K Loan deduction types. <br  /> Max length: 50")

  public String getLoanNumber() {
    return loanNumber;
  }


  public void setLoanNumber(String loanNumber) {
    
    
    
    this.loanNumber = loanNumber;
  }


  public AddUpdateDeduction maximum(Double maximum) {
    
    
    
    
    this.maximum = maximum;
    return this;
  }

  public AddUpdateDeduction maximum(Integer maximum) {
    
    
    
    
    this.maximum = maximum.doubleValue();
    return this;
  }

   /**
   * Maximum amount of the deduction on a single paycheck. &lt;br  /&gt; Decimal(12,2)
   * @return maximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum amount of the deduction on a single paycheck. <br  /> Decimal(12,2)")

  public Double getMaximum() {
    return maximum;
  }


  public void setMaximum(Double maximum) {
    
    
    
    this.maximum = maximum;
  }


  public AddUpdateDeduction medicalSupport(Boolean medicalSupport) {
    
    
    
    
    this.medicalSupport = medicalSupport;
    return this;
  }

   /**
   * Indicates if the employee qualifies for medical benefits that can be used to cover the child
   * @return medicalSupport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the employee qualifies for medical benefits that can be used to cover the child")

  public Boolean getMedicalSupport() {
    return medicalSupport;
  }


  public void setMedicalSupport(Boolean medicalSupport) {
    
    
    
    this.medicalSupport = medicalSupport;
  }


  public AddUpdateDeduction minimum(Double minimum) {
    
    
    
    
    this.minimum = minimum;
    return this;
  }

  public AddUpdateDeduction minimum(Integer minimum) {
    
    
    
    
    this.minimum = minimum.doubleValue();
    return this;
  }

   /**
   * Minimum amount of the deduction on a single paycheck. &lt;br  /&gt; Decimal(12,2)
   * @return minimum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum amount of the deduction on a single paycheck. <br  /> Decimal(12,2)")

  public Double getMinimum() {
    return minimum;
  }


  public void setMinimum(Double minimum) {
    
    
    
    this.minimum = minimum;
  }


  public AddUpdateDeduction miscInfo(String miscInfo) {
    
    
    
    
    this.miscInfo = miscInfo;
    return this;
  }

   /**
   * Information to print on the check stub if agency check is set up for this deduction. &lt;br  /&gt;Max length: 50
   * @return miscInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information to print on the check stub if agency check is set up for this deduction. <br  />Max length: 50")

  public String getMiscInfo() {
    return miscInfo;
  }


  public void setMiscInfo(String miscInfo) {
    
    
    
    this.miscInfo = miscInfo;
  }


  public AddUpdateDeduction paidTowardsGoal(Double paidTowardsGoal) {
    
    
    
    
    this.paidTowardsGoal = paidTowardsGoal;
    return this;
  }

  public AddUpdateDeduction paidTowardsGoal(Integer paidTowardsGoal) {
    
    
    
    
    this.paidTowardsGoal = paidTowardsGoal.doubleValue();
    return this;
  }

   /**
   * Amount already paid toward goal.&lt;br  /&gt; Decimal(12,2)
   * @return paidTowardsGoal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount already paid toward goal.<br  /> Decimal(12,2)")

  public Double getPaidTowardsGoal() {
    return paidTowardsGoal;
  }


  public void setPaidTowardsGoal(Double paidTowardsGoal) {
    
    
    
    this.paidTowardsGoal = paidTowardsGoal;
  }


  public AddUpdateDeduction priority(Integer priority) {
    
    
    
    
    this.priority = priority;
    return this;
  }

   /**
   * Priority of a deduction within the deduction category. Common values are *0,1,2. &lt;br  /&gt; Max length: 2
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Priority of a deduction within the deduction category. Common values are *0,1,2. <br  /> Max length: 2")

  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    
    
    
    this.priority = priority;
  }


  public AddUpdateDeduction rate(Double rate) {
    
    
    
    
    this.rate = rate;
    return this;
  }

  public AddUpdateDeduction rate(Integer rate) {
    
    
    
    
    this.rate = rate.doubleValue();
    return this;
  }

   /**
   * Value to match the calcCode (percentage or amount). For example if calcCode &#x3D; %, enter 10.00 to indicate 10%. &lt;br  /&gt; Decimal(12,2)
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value to match the calcCode (percentage or amount). For example if calcCode = %, enter 10.00 to indicate 10%. <br  /> Decimal(12,2)")

  public Double getRate() {
    return rate;
  }


  public void setRate(Double rate) {
    
    
    
    this.rate = rate;
  }


  public AddUpdateDeduction reportTerminated(Boolean reportTerminated) {
    
    
    
    
    this.reportTerminated = reportTerminated;
    return this;
  }

   /**
   * Indicates whether agency needs to be reported on terminated employee
   * @return reportTerminated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether agency needs to be reported on terminated employee")

  public Boolean getReportTerminated() {
    return reportTerminated;
  }


  public void setReportTerminated(Boolean reportTerminated) {
    
    
    
    this.reportTerminated = reportTerminated;
  }


  public AddUpdateDeduction ssn(String ssn) {
    
    
    
    
    this.ssn = ssn;
    return this;
  }

   /**
   * Either employee ID or employee SSN is required.&lt;br  /&gt; Max length: 11
   * @return ssn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Either employee ID or employee SSN is required.<br  /> Max length: 11")

  public String getSsn() {
    return ssn;
  }


  public void setSsn(String ssn) {
    
    
    
    this.ssn = ssn;
  }


  public AddUpdateDeduction startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of a deduction based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Start date of a deduction based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public AddUpdateDeduction stateAbbrev(String stateAbbrev) {
    
    
    
    
    this.stateAbbrev = stateAbbrev;
    return this;
  }

   /**
   * State for child support.&lt;br  /&gt; Max length: 2
   * @return stateAbbrev
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State for child support.<br  /> Max length: 2")

  public String getStateAbbrev() {
    return stateAbbrev;
  }


  public void setStateAbbrev(String stateAbbrev) {
    
    
    
    this.stateAbbrev = stateAbbrev;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddUpdateDeduction instance itself
   */
  public AddUpdateDeduction putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddUpdateDeduction addUpdateDeduction = (AddUpdateDeduction) o;
    return Objects.equals(this.agency, addUpdateDeduction.agency) &&
        Objects.equals(this.annualMaximum, addUpdateDeduction.annualMaximum) &&
        Objects.equals(this.calcCode, addUpdateDeduction.calcCode) &&
        Objects.equals(this.caseNo, addUpdateDeduction.caseNo) &&
        Objects.equals(this.companyNumber, addUpdateDeduction.companyNumber) &&
        Objects.equals(this.costCenter1, addUpdateDeduction.costCenter1) &&
        Objects.equals(this.costCenter2, addUpdateDeduction.costCenter2) &&
        Objects.equals(this.costCenter3, addUpdateDeduction.costCenter3) &&
        Objects.equals(this.dcode, addUpdateDeduction.dcode) &&
        Objects.equals(this.effectiveDate, addUpdateDeduction.effectiveDate) &&
        Objects.equals(this.employeeId, addUpdateDeduction.employeeId) &&
        Objects.equals(this.endDate, addUpdateDeduction.endDate) &&
        Objects.equals(this.fipsCode, addUpdateDeduction.fipsCode) &&
        Objects.equals(this.frequency, addUpdateDeduction.frequency) &&
        Objects.equals(this.goal, addUpdateDeduction.goal) &&
        Objects.equals(this.isSelfInsuredPlan, addUpdateDeduction.isSelfInsuredPlan) &&
        Objects.equals(this.loanFirstPaymentDate401K, addUpdateDeduction.loanFirstPaymentDate401K) &&
        Objects.equals(this.loanIssueDate401K, addUpdateDeduction.loanIssueDate401K) &&
        Objects.equals(this.loanNumber, addUpdateDeduction.loanNumber) &&
        Objects.equals(this.maximum, addUpdateDeduction.maximum) &&
        Objects.equals(this.medicalSupport, addUpdateDeduction.medicalSupport) &&
        Objects.equals(this.minimum, addUpdateDeduction.minimum) &&
        Objects.equals(this.miscInfo, addUpdateDeduction.miscInfo) &&
        Objects.equals(this.paidTowardsGoal, addUpdateDeduction.paidTowardsGoal) &&
        Objects.equals(this.priority, addUpdateDeduction.priority) &&
        Objects.equals(this.rate, addUpdateDeduction.rate) &&
        Objects.equals(this.reportTerminated, addUpdateDeduction.reportTerminated) &&
        Objects.equals(this.ssn, addUpdateDeduction.ssn) &&
        Objects.equals(this.startDate, addUpdateDeduction.startDate) &&
        Objects.equals(this.stateAbbrev, addUpdateDeduction.stateAbbrev)&&
        Objects.equals(this.additionalProperties, addUpdateDeduction.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agency, annualMaximum, calcCode, caseNo, companyNumber, costCenter1, costCenter2, costCenter3, dcode, effectiveDate, employeeId, endDate, fipsCode, frequency, goal, isSelfInsuredPlan, loanFirstPaymentDate401K, loanIssueDate401K, loanNumber, maximum, medicalSupport, minimum, miscInfo, paidTowardsGoal, priority, rate, reportTerminated, ssn, startDate, stateAbbrev, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddUpdateDeduction {\n");
    sb.append("    agency: ").append(toIndentedString(agency)).append("\n");
    sb.append("    annualMaximum: ").append(toIndentedString(annualMaximum)).append("\n");
    sb.append("    calcCode: ").append(toIndentedString(calcCode)).append("\n");
    sb.append("    caseNo: ").append(toIndentedString(caseNo)).append("\n");
    sb.append("    companyNumber: ").append(toIndentedString(companyNumber)).append("\n");
    sb.append("    costCenter1: ").append(toIndentedString(costCenter1)).append("\n");
    sb.append("    costCenter2: ").append(toIndentedString(costCenter2)).append("\n");
    sb.append("    costCenter3: ").append(toIndentedString(costCenter3)).append("\n");
    sb.append("    dcode: ").append(toIndentedString(dcode)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    fipsCode: ").append(toIndentedString(fipsCode)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    isSelfInsuredPlan: ").append(toIndentedString(isSelfInsuredPlan)).append("\n");
    sb.append("    loanFirstPaymentDate401K: ").append(toIndentedString(loanFirstPaymentDate401K)).append("\n");
    sb.append("    loanIssueDate401K: ").append(toIndentedString(loanIssueDate401K)).append("\n");
    sb.append("    loanNumber: ").append(toIndentedString(loanNumber)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    medicalSupport: ").append(toIndentedString(medicalSupport)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    miscInfo: ").append(toIndentedString(miscInfo)).append("\n");
    sb.append("    paidTowardsGoal: ").append(toIndentedString(paidTowardsGoal)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    reportTerminated: ").append(toIndentedString(reportTerminated)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    stateAbbrev: ").append(toIndentedString(stateAbbrev)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agency");
    openapiFields.add("annualMaximum");
    openapiFields.add("calcCode");
    openapiFields.add("caseNo");
    openapiFields.add("companyNumber");
    openapiFields.add("costCenter1");
    openapiFields.add("costCenter2");
    openapiFields.add("costCenter3");
    openapiFields.add("dcode");
    openapiFields.add("effectiveDate");
    openapiFields.add("employeeId");
    openapiFields.add("endDate");
    openapiFields.add("fipsCode");
    openapiFields.add("frequency");
    openapiFields.add("goal");
    openapiFields.add("isSelfInsuredPlan");
    openapiFields.add("loanFirstPaymentDate401K");
    openapiFields.add("loanIssueDate401K");
    openapiFields.add("loanNumber");
    openapiFields.add("maximum");
    openapiFields.add("medicalSupport");
    openapiFields.add("minimum");
    openapiFields.add("miscInfo");
    openapiFields.add("paidTowardsGoal");
    openapiFields.add("priority");
    openapiFields.add("rate");
    openapiFields.add("reportTerminated");
    openapiFields.add("ssn");
    openapiFields.add("startDate");
    openapiFields.add("stateAbbrev");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddUpdateDeduction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddUpdateDeduction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddUpdateDeduction is not found in the empty JSON string", AddUpdateDeduction.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("agency") != null && !jsonObj.get("agency").isJsonNull()) && !jsonObj.get("agency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agency").toString()));
      }
      if ((jsonObj.get("calcCode") != null && !jsonObj.get("calcCode").isJsonNull()) && !jsonObj.get("calcCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calcCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calcCode").toString()));
      }
      if ((jsonObj.get("caseNo") != null && !jsonObj.get("caseNo").isJsonNull()) && !jsonObj.get("caseNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseNo").toString()));
      }
      if ((jsonObj.get("companyNumber") != null && !jsonObj.get("companyNumber").isJsonNull()) && !jsonObj.get("companyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyNumber").toString()));
      }
      if ((jsonObj.get("costCenter1") != null && !jsonObj.get("costCenter1").isJsonNull()) && !jsonObj.get("costCenter1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter1").toString()));
      }
      if ((jsonObj.get("costCenter2") != null && !jsonObj.get("costCenter2").isJsonNull()) && !jsonObj.get("costCenter2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter2").toString()));
      }
      if ((jsonObj.get("costCenter3") != null && !jsonObj.get("costCenter3").isJsonNull()) && !jsonObj.get("costCenter3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter3").toString()));
      }
      if ((jsonObj.get("dcode") != null && !jsonObj.get("dcode").isJsonNull()) && !jsonObj.get("dcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dcode").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("fipsCode") != null && !jsonObj.get("fipsCode").isJsonNull()) && !jsonObj.get("fipsCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fipsCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fipsCode").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if ((jsonObj.get("loanNumber") != null && !jsonObj.get("loanNumber").isJsonNull()) && !jsonObj.get("loanNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanNumber").toString()));
      }
      if ((jsonObj.get("miscInfo") != null && !jsonObj.get("miscInfo").isJsonNull()) && !jsonObj.get("miscInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `miscInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("miscInfo").toString()));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("stateAbbrev") != null && !jsonObj.get("stateAbbrev").isJsonNull()) && !jsonObj.get("stateAbbrev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateAbbrev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateAbbrev").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddUpdateDeduction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddUpdateDeduction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddUpdateDeduction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddUpdateDeduction.class));

       return (TypeAdapter<T>) new TypeAdapter<AddUpdateDeduction>() {
           @Override
           public void write(JsonWriter out, AddUpdateDeduction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddUpdateDeduction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddUpdateDeduction instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddUpdateDeduction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddUpdateDeduction
  * @throws IOException if the JSON string is invalid with respect to AddUpdateDeduction
  */
  public static AddUpdateDeduction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddUpdateDeduction.class);
  }

 /**
  * Convert an instance of AddUpdateDeduction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

