/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The pay statement summary model
 */
@ApiModel(description = "The pay statement summary model")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayStatementSummary {
  public static final String SERIALIZED_NAME_AUTO_PAY = "autoPay";
  @SerializedName(SERIALIZED_NAME_AUTO_PAY)
  private Boolean autoPay;

  public static final String SERIALIZED_NAME_BEGIN_DATE = "beginDate";
  @SerializedName(SERIALIZED_NAME_BEGIN_DATE)
  private Object beginDate;

  public static final String SERIALIZED_NAME_CHECK_DATE = "checkDate";
  @SerializedName(SERIALIZED_NAME_CHECK_DATE)
  private Object checkDate;

  public static final String SERIALIZED_NAME_CHECK_NUMBER = "checkNumber";
  @SerializedName(SERIALIZED_NAME_CHECK_NUMBER)
  private Integer checkNumber;

  public static final String SERIALIZED_NAME_DIRECT_DEPOSIT_AMOUNT = "directDepositAmount";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEPOSIT_AMOUNT)
  private Object directDepositAmount;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Object endDate;

  public static final String SERIALIZED_NAME_GROSS_PAY = "grossPay";
  @SerializedName(SERIALIZED_NAME_GROSS_PAY)
  private Object grossPay;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Object hours;

  public static final String SERIALIZED_NAME_NET_CHECK = "netCheck";
  @SerializedName(SERIALIZED_NAME_NET_CHECK)
  private Object netCheck;

  public static final String SERIALIZED_NAME_NET_PAY = "netPay";
  @SerializedName(SERIALIZED_NAME_NET_PAY)
  private Object netPay;

  public static final String SERIALIZED_NAME_OVERTIME_DOLLARS = "overtimeDollars";
  @SerializedName(SERIALIZED_NAME_OVERTIME_DOLLARS)
  private Object overtimeDollars;

  public static final String SERIALIZED_NAME_OVERTIME_HOURS = "overtimeHours";
  @SerializedName(SERIALIZED_NAME_OVERTIME_HOURS)
  private Object overtimeHours;

  public static final String SERIALIZED_NAME_PROCESS = "process";
  @SerializedName(SERIALIZED_NAME_PROCESS)
  private Integer process;

  public static final String SERIALIZED_NAME_REGULAR_DOLLARS = "regularDollars";
  @SerializedName(SERIALIZED_NAME_REGULAR_DOLLARS)
  private Object regularDollars;

  public static final String SERIALIZED_NAME_REGULAR_HOURS = "regularHours";
  @SerializedName(SERIALIZED_NAME_REGULAR_HOURS)
  private Object regularHours;

  public static final String SERIALIZED_NAME_TRANSACTION_NUMBER = "transactionNumber";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_NUMBER)
  private Integer transactionNumber;

  public static final String SERIALIZED_NAME_VOUCHER_NUMBER = "voucherNumber";
  @SerializedName(SERIALIZED_NAME_VOUCHER_NUMBER)
  private Integer voucherNumber;

  public static final String SERIALIZED_NAME_WORKERS_COMP_CODE = "workersCompCode";
  @SerializedName(SERIALIZED_NAME_WORKERS_COMP_CODE)
  private Object workersCompCode;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public PayStatementSummary() {
  }

  public PayStatementSummary autoPay(Boolean autoPay) {
    
    
    
    
    this.autoPay = autoPay;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return autoPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Boolean getAutoPay() {
    return autoPay;
  }


  public void setAutoPay(Boolean autoPay) {
    
    
    
    this.autoPay = autoPay;
  }


  public PayStatementSummary beginDate(Object beginDate) {
    
    
    
    
    this.beginDate = beginDate;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return beginDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getBeginDate() {
    return beginDate;
  }


  public void setBeginDate(Object beginDate) {
    
    
    
    this.beginDate = beginDate;
  }


  public PayStatementSummary checkDate(Object checkDate) {
    
    
    
    
    this.checkDate = checkDate;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return checkDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getCheckDate() {
    return checkDate;
  }


  public void setCheckDate(Object checkDate) {
    
    
    
    this.checkDate = checkDate;
  }


  public PayStatementSummary checkNumber(Integer checkNumber) {
    
    
    
    
    this.checkNumber = checkNumber;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return checkNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Integer getCheckNumber() {
    return checkNumber;
  }


  public void setCheckNumber(Integer checkNumber) {
    
    
    
    this.checkNumber = checkNumber;
  }


  public PayStatementSummary directDepositAmount(Object directDepositAmount) {
    
    
    
    
    this.directDepositAmount = directDepositAmount;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return directDepositAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getDirectDepositAmount() {
    return directDepositAmount;
  }


  public void setDirectDepositAmount(Object directDepositAmount) {
    
    
    
    this.directDepositAmount = directDepositAmount;
  }


  public PayStatementSummary endDate(Object endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getEndDate() {
    return endDate;
  }


  public void setEndDate(Object endDate) {
    
    
    
    this.endDate = endDate;
  }


  public PayStatementSummary grossPay(Object grossPay) {
    
    
    
    
    this.grossPay = grossPay;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return grossPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getGrossPay() {
    return grossPay;
  }


  public void setGrossPay(Object grossPay) {
    
    
    
    this.grossPay = grossPay;
  }


  public PayStatementSummary hours(Object hours) {
    
    
    
    
    this.hours = hours;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getHours() {
    return hours;
  }


  public void setHours(Object hours) {
    
    
    
    this.hours = hours;
  }


  public PayStatementSummary netCheck(Object netCheck) {
    
    
    
    
    this.netCheck = netCheck;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return netCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getNetCheck() {
    return netCheck;
  }


  public void setNetCheck(Object netCheck) {
    
    
    
    this.netCheck = netCheck;
  }


  public PayStatementSummary netPay(Object netPay) {
    
    
    
    
    this.netPay = netPay;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return netPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getNetPay() {
    return netPay;
  }


  public void setNetPay(Object netPay) {
    
    
    
    this.netPay = netPay;
  }


  public PayStatementSummary overtimeDollars(Object overtimeDollars) {
    
    
    
    
    this.overtimeDollars = overtimeDollars;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return overtimeDollars
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getOvertimeDollars() {
    return overtimeDollars;
  }


  public void setOvertimeDollars(Object overtimeDollars) {
    
    
    
    this.overtimeDollars = overtimeDollars;
  }


  public PayStatementSummary overtimeHours(Object overtimeHours) {
    
    
    
    
    this.overtimeHours = overtimeHours;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return overtimeHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getOvertimeHours() {
    return overtimeHours;
  }


  public void setOvertimeHours(Object overtimeHours) {
    
    
    
    this.overtimeHours = overtimeHours;
  }


  public PayStatementSummary process(Integer process) {
    
    
    
    
    this.process = process;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return process
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Integer getProcess() {
    return process;
  }


  public void setProcess(Integer process) {
    
    
    
    this.process = process;
  }


  public PayStatementSummary regularDollars(Object regularDollars) {
    
    
    
    
    this.regularDollars = regularDollars;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return regularDollars
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getRegularDollars() {
    return regularDollars;
  }


  public void setRegularDollars(Object regularDollars) {
    
    
    
    this.regularDollars = regularDollars;
  }


  public PayStatementSummary regularHours(Object regularHours) {
    
    
    
    
    this.regularHours = regularHours;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return regularHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getRegularHours() {
    return regularHours;
  }


  public void setRegularHours(Object regularHours) {
    
    
    
    this.regularHours = regularHours;
  }


  public PayStatementSummary transactionNumber(Integer transactionNumber) {
    
    
    
    
    this.transactionNumber = transactionNumber;
    return this;
  }

   /**
   * &lt;br /&gt;
   * @return transactionNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br />")

  public Integer getTransactionNumber() {
    return transactionNumber;
  }


  public void setTransactionNumber(Integer transactionNumber) {
    
    
    
    this.transactionNumber = transactionNumber;
  }


  public PayStatementSummary voucherNumber(Integer voucherNumber) {
    
    
    
    
    this.voucherNumber = voucherNumber;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return voucherNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Integer getVoucherNumber() {
    return voucherNumber;
  }


  public void setVoucherNumber(Integer voucherNumber) {
    
    
    
    this.voucherNumber = voucherNumber;
  }


  public PayStatementSummary workersCompCode(Object workersCompCode) {
    
    
    
    
    this.workersCompCode = workersCompCode;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return workersCompCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Object getWorkersCompCode() {
    return workersCompCode;
  }


  public void setWorkersCompCode(Object workersCompCode) {
    
    
    
    this.workersCompCode = workersCompCode;
  }


  public PayStatementSummary year(Integer year) {
    
    
    
    
    this.year = year;
    return this;
  }

   /**
   * .&lt;br /&gt;
   * @return year
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = ".<br />")

  public Integer getYear() {
    return year;
  }


  public void setYear(Integer year) {
    
    
    
    this.year = year;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayStatementSummary instance itself
   */
  public PayStatementSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayStatementSummary payStatementSummary = (PayStatementSummary) o;
    return Objects.equals(this.autoPay, payStatementSummary.autoPay) &&
        Objects.equals(this.beginDate, payStatementSummary.beginDate) &&
        Objects.equals(this.checkDate, payStatementSummary.checkDate) &&
        Objects.equals(this.checkNumber, payStatementSummary.checkNumber) &&
        Objects.equals(this.directDepositAmount, payStatementSummary.directDepositAmount) &&
        Objects.equals(this.endDate, payStatementSummary.endDate) &&
        Objects.equals(this.grossPay, payStatementSummary.grossPay) &&
        Objects.equals(this.hours, payStatementSummary.hours) &&
        Objects.equals(this.netCheck, payStatementSummary.netCheck) &&
        Objects.equals(this.netPay, payStatementSummary.netPay) &&
        Objects.equals(this.overtimeDollars, payStatementSummary.overtimeDollars) &&
        Objects.equals(this.overtimeHours, payStatementSummary.overtimeHours) &&
        Objects.equals(this.process, payStatementSummary.process) &&
        Objects.equals(this.regularDollars, payStatementSummary.regularDollars) &&
        Objects.equals(this.regularHours, payStatementSummary.regularHours) &&
        Objects.equals(this.transactionNumber, payStatementSummary.transactionNumber) &&
        Objects.equals(this.voucherNumber, payStatementSummary.voucherNumber) &&
        Objects.equals(this.workersCompCode, payStatementSummary.workersCompCode) &&
        Objects.equals(this.year, payStatementSummary.year)&&
        Objects.equals(this.additionalProperties, payStatementSummary.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoPay, beginDate, checkDate, checkNumber, directDepositAmount, endDate, grossPay, hours, netCheck, netPay, overtimeDollars, overtimeHours, process, regularDollars, regularHours, transactionNumber, voucherNumber, workersCompCode, year, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayStatementSummary {\n");
    sb.append("    autoPay: ").append(toIndentedString(autoPay)).append("\n");
    sb.append("    beginDate: ").append(toIndentedString(beginDate)).append("\n");
    sb.append("    checkDate: ").append(toIndentedString(checkDate)).append("\n");
    sb.append("    checkNumber: ").append(toIndentedString(checkNumber)).append("\n");
    sb.append("    directDepositAmount: ").append(toIndentedString(directDepositAmount)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    grossPay: ").append(toIndentedString(grossPay)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    netCheck: ").append(toIndentedString(netCheck)).append("\n");
    sb.append("    netPay: ").append(toIndentedString(netPay)).append("\n");
    sb.append("    overtimeDollars: ").append(toIndentedString(overtimeDollars)).append("\n");
    sb.append("    overtimeHours: ").append(toIndentedString(overtimeHours)).append("\n");
    sb.append("    process: ").append(toIndentedString(process)).append("\n");
    sb.append("    regularDollars: ").append(toIndentedString(regularDollars)).append("\n");
    sb.append("    regularHours: ").append(toIndentedString(regularHours)).append("\n");
    sb.append("    transactionNumber: ").append(toIndentedString(transactionNumber)).append("\n");
    sb.append("    voucherNumber: ").append(toIndentedString(voucherNumber)).append("\n");
    sb.append("    workersCompCode: ").append(toIndentedString(workersCompCode)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoPay");
    openapiFields.add("beginDate");
    openapiFields.add("checkDate");
    openapiFields.add("checkNumber");
    openapiFields.add("directDepositAmount");
    openapiFields.add("endDate");
    openapiFields.add("grossPay");
    openapiFields.add("hours");
    openapiFields.add("netCheck");
    openapiFields.add("netPay");
    openapiFields.add("overtimeDollars");
    openapiFields.add("overtimeHours");
    openapiFields.add("process");
    openapiFields.add("regularDollars");
    openapiFields.add("regularHours");
    openapiFields.add("transactionNumber");
    openapiFields.add("voucherNumber");
    openapiFields.add("workersCompCode");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayStatementSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayStatementSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayStatementSummary is not found in the empty JSON string", PayStatementSummary.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayStatementSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayStatementSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayStatementSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayStatementSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PayStatementSummary>() {
           @Override
           public void write(JsonWriter out, PayStatementSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayStatementSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayStatementSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayStatementSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayStatementSummary
  * @throws IOException if the JSON string is invalid with respect to PayStatementSummary
  */
  public static PayStatementSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayStatementSummary.class);
  }

 /**
  * Convert an instance of PayStatementSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

