/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The emergency contact model
 */
@ApiModel(description = "The emergency contact model")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmergencyContact {
  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private Object address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private Object address2;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private Object city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Object country;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private Object county;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private Object email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private Object firstName;

  public static final String SERIALIZED_NAME_HOME_PHONE = "homePhone";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE)
  private Object homePhone;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private Object lastName;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobilePhone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private Object mobilePhone;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private Object notes;

  public static final String SERIALIZED_NAME_PAGER = "pager";
  @SerializedName(SERIALIZED_NAME_PAGER)
  private Object pager;

  public static final String SERIALIZED_NAME_PRIMARY_PHONE = "primaryPhone";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PHONE)
  private Object primaryPhone;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Object priority;

  public static final String SERIALIZED_NAME_RELATIONSHIP = "relationship";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP)
  private Object relationship;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Object state;

  public static final String SERIALIZED_NAME_SYNC_EMPLOYEE_INFO = "syncEmployeeInfo";
  @SerializedName(SERIALIZED_NAME_SYNC_EMPLOYEE_INFO)
  private Boolean syncEmployeeInfo;

  public static final String SERIALIZED_NAME_WORK_EXTENSION = "workExtension";
  @SerializedName(SERIALIZED_NAME_WORK_EXTENSION)
  private Object workExtension;

  public static final String SERIALIZED_NAME_WORK_PHONE = "workPhone";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE)
  private Object workPhone;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private Object zip;

  public EmergencyContact() {
  }

  public EmergencyContact address1(Object address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * 1st address line.
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "1st address line.")

  public Object getAddress1() {
    return address1;
  }


  public void setAddress1(Object address1) {
    
    
    
    this.address1 = address1;
  }


  public EmergencyContact address2(Object address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * 2nd address line.
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "2nd address line.")

  public Object getAddress2() {
    return address2;
  }


  public void setAddress2(Object address2) {
    
    
    
    this.address2 = address2;
  }


  public EmergencyContact city(Object city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City.
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City.")

  public Object getCity() {
    return city;
  }


  public void setCity(Object city) {
    
    
    
    this.city = city;
  }


  public EmergencyContact country(Object country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * County.
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "County.")

  public Object getCountry() {
    return country;
  }


  public void setCountry(Object country) {
    
    
    
    this.country = country;
  }


  public EmergencyContact county(Object county) {
    
    
    
    
    this.county = county;
    return this;
  }

   /**
   * Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada).
   * @return county
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada).")

  public Object getCounty() {
    return county;
  }


  public void setCounty(Object county) {
    
    
    
    this.county = county;
  }


  public EmergencyContact email(Object email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Contact email.  Must be valid email address format.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contact email.  Must be valid email address format.")

  public Object getEmail() {
    return email;
  }


  public void setEmail(Object email) {
    
    
    
    this.email = email;
  }


  public EmergencyContact firstName(Object firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Required. Contact first name. &lt;br  /&gt;Max length: 40
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Required. Contact first name. <br  />Max length: 40")

  public Object getFirstName() {
    return firstName;
  }


  public void setFirstName(Object firstName) {
    
    
    
    this.firstName = firstName;
  }


  public EmergencyContact homePhone(Object homePhone) {
    
    
    
    
    this.homePhone = homePhone;
    return this;
  }

   /**
   * Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
   * @return homePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.")

  public Object getHomePhone() {
    return homePhone;
  }


  public void setHomePhone(Object homePhone) {
    
    
    
    this.homePhone = homePhone;
  }


  public EmergencyContact lastName(Object lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Required. Contact last name. &lt;br  /&gt;Max length: 40
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Required. Contact last name. <br  />Max length: 40")

  public Object getLastName() {
    return lastName;
  }


  public void setLastName(Object lastName) {
    
    
    
    this.lastName = lastName;
  }


  public EmergencyContact mobilePhone(Object mobilePhone) {
    
    
    
    
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
   * @return mobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.")

  public Object getMobilePhone() {
    return mobilePhone;
  }


  public void setMobilePhone(Object mobilePhone) {
    
    
    
    this.mobilePhone = mobilePhone;
  }


  public EmergencyContact notes(Object notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Notes. &lt;br  /&gt;Max length: 1000
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Notes. <br  />Max length: 1000")

  public Object getNotes() {
    return notes;
  }


  public void setNotes(Object notes) {
    
    
    
    this.notes = notes;
  }


  public EmergencyContact pager(Object pager) {
    
    
    
    
    this.pager = pager;
    return this;
  }

   /**
   * Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
   * @return pager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.")

  public Object getPager() {
    return pager;
  }


  public void setPager(Object pager) {
    
    
    
    this.pager = pager;
  }


  public EmergencyContact primaryPhone(Object primaryPhone) {
    
    
    
    
    this.primaryPhone = primaryPhone;
    return this;
  }

   /**
   * Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work)
   * @return primaryPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work)")

  public Object getPrimaryPhone() {
    return primaryPhone;
  }


  public void setPrimaryPhone(Object primaryPhone) {
    
    
    
    this.primaryPhone = primaryPhone;
  }


  public EmergencyContact priority(Object priority) {
    
    
    
    
    this.priority = priority;
    return this;
  }

   /**
   * Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary).
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary).")

  public Object getPriority() {
    return priority;
  }


  public void setPriority(Object priority) {
    
    
    
    this.priority = priority;
  }


  public EmergencyContact relationship(Object relationship) {
    
    
    
    
    this.relationship = relationship;
    return this;
  }

   /**
   * Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father.
   * @return relationship
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father.")

  public Object getRelationship() {
    return relationship;
  }


  public void setRelationship(Object relationship) {
    
    
    
    this.relationship = relationship;
  }


  public EmergencyContact state(Object state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California).
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California).")

  public Object getState() {
    return state;
  }


  public void setState(Object state) {
    
    
    
    this.state = state;
  }


  public EmergencyContact syncEmployeeInfo(Boolean syncEmployeeInfo) {
    
    
    
    
    this.syncEmployeeInfo = syncEmployeeInfo;
    return this;
  }

   /**
   * Valid values are *true* or *false*.
   * @return syncEmployeeInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Valid values are *true* or *false*.")

  public Boolean getSyncEmployeeInfo() {
    return syncEmployeeInfo;
  }


  public void setSyncEmployeeInfo(Boolean syncEmployeeInfo) {
    
    
    
    this.syncEmployeeInfo = syncEmployeeInfo;
  }


  public EmergencyContact workExtension(Object workExtension) {
    
    
    
    
    this.workExtension = workExtension;
    return this;
  }

   /**
   * Work Extension.
   * @return workExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Work Extension.")

  public Object getWorkExtension() {
    return workExtension;
  }


  public void setWorkExtension(Object workExtension) {
    
    
    
    this.workExtension = workExtension;
  }


  public EmergencyContact workPhone(Object workPhone) {
    
    
    
    
    this.workPhone = workPhone;
    return this;
  }

   /**
   * Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.
   * @return workPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed.")

  public Object getWorkPhone() {
    return workPhone;
  }


  public void setWorkPhone(Object workPhone) {
    
    
    
    this.workPhone = workPhone;
  }


  public EmergencyContact zip(Object zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * Postal code.  If U.S. address, must be a valid zip code.
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal code.  If U.S. address, must be a valid zip code.")

  public Object getZip() {
    return zip;
  }


  public void setZip(Object zip) {
    
    
    
    this.zip = zip;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmergencyContact instance itself
   */
  public EmergencyContact putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmergencyContact emergencyContact = (EmergencyContact) o;
    return Objects.equals(this.address1, emergencyContact.address1) &&
        Objects.equals(this.address2, emergencyContact.address2) &&
        Objects.equals(this.city, emergencyContact.city) &&
        Objects.equals(this.country, emergencyContact.country) &&
        Objects.equals(this.county, emergencyContact.county) &&
        Objects.equals(this.email, emergencyContact.email) &&
        Objects.equals(this.firstName, emergencyContact.firstName) &&
        Objects.equals(this.homePhone, emergencyContact.homePhone) &&
        Objects.equals(this.lastName, emergencyContact.lastName) &&
        Objects.equals(this.mobilePhone, emergencyContact.mobilePhone) &&
        Objects.equals(this.notes, emergencyContact.notes) &&
        Objects.equals(this.pager, emergencyContact.pager) &&
        Objects.equals(this.primaryPhone, emergencyContact.primaryPhone) &&
        Objects.equals(this.priority, emergencyContact.priority) &&
        Objects.equals(this.relationship, emergencyContact.relationship) &&
        Objects.equals(this.state, emergencyContact.state) &&
        Objects.equals(this.syncEmployeeInfo, emergencyContact.syncEmployeeInfo) &&
        Objects.equals(this.workExtension, emergencyContact.workExtension) &&
        Objects.equals(this.workPhone, emergencyContact.workPhone) &&
        Objects.equals(this.zip, emergencyContact.zip)&&
        Objects.equals(this.additionalProperties, emergencyContact.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, city, country, county, email, firstName, homePhone, lastName, mobilePhone, notes, pager, primaryPhone, priority, relationship, state, syncEmployeeInfo, workExtension, workPhone, zip, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmergencyContact {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pager: ").append(toIndentedString(pager)).append("\n");
    sb.append("    primaryPhone: ").append(toIndentedString(primaryPhone)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    syncEmployeeInfo: ").append(toIndentedString(syncEmployeeInfo)).append("\n");
    sb.append("    workExtension: ").append(toIndentedString(workExtension)).append("\n");
    sb.append("    workPhone: ").append(toIndentedString(workPhone)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("county");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("homePhone");
    openapiFields.add("lastName");
    openapiFields.add("mobilePhone");
    openapiFields.add("notes");
    openapiFields.add("pager");
    openapiFields.add("primaryPhone");
    openapiFields.add("priority");
    openapiFields.add("relationship");
    openapiFields.add("state");
    openapiFields.add("syncEmployeeInfo");
    openapiFields.add("workExtension");
    openapiFields.add("workPhone");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmergencyContact
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmergencyContact.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmergencyContact is not found in the empty JSON string", EmergencyContact.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmergencyContact.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmergencyContact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmergencyContact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmergencyContact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmergencyContact.class));

       return (TypeAdapter<T>) new TypeAdapter<EmergencyContact>() {
           @Override
           public void write(JsonWriter out, EmergencyContact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmergencyContact read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmergencyContact instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmergencyContact given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmergencyContact
  * @throws IOException if the JSON string is invalid with respect to EmergencyContact
  */
  public static EmergencyContact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmergencyContact.class);
  }

 /**
  * Convert an instance of EmergencyContact to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

