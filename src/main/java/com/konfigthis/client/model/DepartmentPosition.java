/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DepartmentPosition
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DepartmentPosition {
  public static final String SERIALIZED_NAME_CHANGE_REASON = "changeReason";
  @SerializedName(SERIALIZED_NAME_CHANGE_REASON)
  private String changeReason;

  public static final String SERIALIZED_NAME_CLOCK_BADGE_NUMBER = "clockBadgeNumber";
  @SerializedName(SERIALIZED_NAME_CLOCK_BADGE_NUMBER)
  private String clockBadgeNumber;

  public static final String SERIALIZED_NAME_COST_CENTER1 = "costCenter1";
  @SerializedName(SERIALIZED_NAME_COST_CENTER1)
  private String costCenter1;

  public static final String SERIALIZED_NAME_COST_CENTER2 = "costCenter2";
  @SerializedName(SERIALIZED_NAME_COST_CENTER2)
  private String costCenter2;

  public static final String SERIALIZED_NAME_COST_CENTER3 = "costCenter3";
  @SerializedName(SERIALIZED_NAME_COST_CENTER3)
  private String costCenter3;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_TYPE = "employeeType";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_TYPE)
  private String employeeType;

  public static final String SERIALIZED_NAME_EQUAL_EMPLOYMENT_OPPORTUNITY_CLASS = "equalEmploymentOpportunityClass";
  @SerializedName(SERIALIZED_NAME_EQUAL_EMPLOYMENT_OPPORTUNITY_CLASS)
  private String equalEmploymentOpportunityClass;

  public static final String SERIALIZED_NAME_IS_SUPERVISOR_REVIEWER = "isSupervisorReviewer";
  @SerializedName(SERIALIZED_NAME_IS_SUPERVISOR_REVIEWER)
  private Boolean isSupervisorReviewer;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_MINIMUM_WAGE_EXEMPT = "minimumWageExempt";
  @SerializedName(SERIALIZED_NAME_MINIMUM_WAGE_EXEMPT)
  private Boolean minimumWageExempt;

  public static final String SERIALIZED_NAME_OVERTIME_EXEMPT = "overtimeExempt";
  @SerializedName(SERIALIZED_NAME_OVERTIME_EXEMPT)
  private Boolean overtimeExempt;

  public static final String SERIALIZED_NAME_PAY_GROUP = "payGroup";
  @SerializedName(SERIALIZED_NAME_PAY_GROUP)
  private String payGroup;

  public static final String SERIALIZED_NAME_POSITION_CODE = "positionCode";
  @SerializedName(SERIALIZED_NAME_POSITION_CODE)
  private String positionCode;

  public static final String SERIALIZED_NAME_SHIFT = "shift";
  @SerializedName(SERIALIZED_NAME_SHIFT)
  private String shift;

  public static final String SERIALIZED_NAME_SUPERVISOR_COMPANY_NUMBER = "supervisorCompanyNumber";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_COMPANY_NUMBER)
  private String supervisorCompanyNumber;

  public static final String SERIALIZED_NAME_SUPERVISOR_EMPLOYEE_ID = "supervisorEmployeeId";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_EMPLOYEE_ID)
  private String supervisorEmployeeId;

  public static final String SERIALIZED_NAME_TIPPED = "tipped";
  @SerializedName(SERIALIZED_NAME_TIPPED)
  private String tipped;

  public static final String SERIALIZED_NAME_UNION_AFFILIATION_DATE = "unionAffiliationDate";
  @SerializedName(SERIALIZED_NAME_UNION_AFFILIATION_DATE)
  private LocalDate unionAffiliationDate;

  public static final String SERIALIZED_NAME_UNION_CODE = "unionCode";
  @SerializedName(SERIALIZED_NAME_UNION_CODE)
  private String unionCode;

  public static final String SERIALIZED_NAME_UNION_DUES_COLLECTED = "unionDuesCollected";
  @SerializedName(SERIALIZED_NAME_UNION_DUES_COLLECTED)
  private Boolean unionDuesCollected;

  public static final String SERIALIZED_NAME_UNION_INITIATION_COLLECTED = "unionInitiationCollected";
  @SerializedName(SERIALIZED_NAME_UNION_INITIATION_COLLECTED)
  private Boolean unionInitiationCollected;

  public static final String SERIALIZED_NAME_UNION_POSITION = "unionPosition";
  @SerializedName(SERIALIZED_NAME_UNION_POSITION)
  private String unionPosition;

  public static final String SERIALIZED_NAME_WORKERS_COMP = "workersComp";
  @SerializedName(SERIALIZED_NAME_WORKERS_COMP)
  private String workersComp;

  public DepartmentPosition() {
  }

  public DepartmentPosition changeReason(String changeReason) {
    
    
    
    
    this.changeReason = changeReason;
    return this;
  }

   /**
   * Employee department/position change reason. Must match Company setup.&lt;br  /&gt;Max length: 15
   * @return changeReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee department/position change reason. Must match Company setup.<br  />Max length: 15")

  public String getChangeReason() {
    return changeReason;
  }


  public void setChangeReason(String changeReason) {
    
    
    
    this.changeReason = changeReason;
  }


  public DepartmentPosition clockBadgeNumber(String clockBadgeNumber) {
    
    
    
    
    this.clockBadgeNumber = clockBadgeNumber;
    return this;
  }

   /**
   * Employee clock badge number. Deafults to employeeId. &lt;br  /&gt;Max length: 10
   * @return clockBadgeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee clock badge number. Deafults to employeeId. <br  />Max length: 10")

  public String getClockBadgeNumber() {
    return clockBadgeNumber;
  }


  public void setClockBadgeNumber(String clockBadgeNumber) {
    
    
    
    this.clockBadgeNumber = clockBadgeNumber;
  }


  public DepartmentPosition costCenter1(String costCenter1) {
    
    
    
    
    this.costCenter1 = costCenter1;
    return this;
  }

   /**
   * Employer defined location, like *branch, division, department*, etc. Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return costCenter1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10")

  public String getCostCenter1() {
    return costCenter1;
  }


  public void setCostCenter1(String costCenter1) {
    
    
    
    this.costCenter1 = costCenter1;
  }


  public DepartmentPosition costCenter2(String costCenter2) {
    
    
    
    
    this.costCenter2 = costCenter2;
    return this;
  }

   /**
   * Employer defined location, like *branch, division, department*, etc. Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return costCenter2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10")

  public String getCostCenter2() {
    return costCenter2;
  }


  public void setCostCenter2(String costCenter2) {
    
    
    
    this.costCenter2 = costCenter2;
  }


  public DepartmentPosition costCenter3(String costCenter3) {
    
    
    
    
    this.costCenter3 = costCenter3;
    return this;
  }

   /**
   * Employer defined location, like *branch, division, department*, etc. Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return costCenter3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10")

  public String getCostCenter3() {
    return costCenter3;
  }


  public void setCostCenter3(String costCenter3) {
    
    
    
    this.costCenter3 = costCenter3;
  }


  public DepartmentPosition effectiveDate(LocalDate effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * The date the position takes effect. (MM-DD-CCYY)
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date the position takes effect. (MM-DD-CCYY)")

  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(LocalDate effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public DepartmentPosition employeeType(String employeeType) {
    
    
    
    
    this.employeeType = employeeType;
    return this;
  }

   /**
   * Employee current employment type. Common values *RFT (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. &lt;br  /&gt;Max length: 10
   * @return employeeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current employment type. Common values *RFT (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. <br  />Max length: 10")

  public String getEmployeeType() {
    return employeeType;
  }


  public void setEmployeeType(String employeeType) {
    
    
    
    this.employeeType = employeeType;
  }


  public DepartmentPosition equalEmploymentOpportunityClass(String equalEmploymentOpportunityClass) {
    
    
    
    
    this.equalEmploymentOpportunityClass = equalEmploymentOpportunityClass;
    return this;
  }

   /**
   * Values are configured in Company &gt; Setup &gt; HR &gt; EEO Classes.&lt;br  /&gt; Max length: 10
   * @return equalEmploymentOpportunityClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Values are configured in Company > Setup > HR > EEO Classes.<br  /> Max length: 10")

  public String getEqualEmploymentOpportunityClass() {
    return equalEmploymentOpportunityClass;
  }


  public void setEqualEmploymentOpportunityClass(String equalEmploymentOpportunityClass) {
    
    
    
    this.equalEmploymentOpportunityClass = equalEmploymentOpportunityClass;
  }


  public DepartmentPosition isSupervisorReviewer(Boolean isSupervisorReviewer) {
    
    
    
    
    this.isSupervisorReviewer = isSupervisorReviewer;
    return this;
  }

   /**
   * Indicates if employee is a supervisor or reviewer.
   * @return isSupervisorReviewer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if employee is a supervisor or reviewer.")

  public Boolean getIsSupervisorReviewer() {
    return isSupervisorReviewer;
  }


  public void setIsSupervisorReviewer(Boolean isSupervisorReviewer) {
    
    
    
    this.isSupervisorReviewer = isSupervisorReviewer;
  }


  public DepartmentPosition jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Employee current job title. &lt;br  /&gt;Max length: 50
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current job title. <br  />Max length: 50")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public DepartmentPosition minimumWageExempt(Boolean minimumWageExempt) {
    
    
    
    
    this.minimumWageExempt = minimumWageExempt;
    return this;
  }

   /**
   * Indicates if employee is exempt from minimum wage.
   * @return minimumWageExempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if employee is exempt from minimum wage.")

  public Boolean getMinimumWageExempt() {
    return minimumWageExempt;
  }


  public void setMinimumWageExempt(Boolean minimumWageExempt) {
    
    
    
    this.minimumWageExempt = minimumWageExempt;
  }


  public DepartmentPosition overtimeExempt(Boolean overtimeExempt) {
    
    
    
    
    this.overtimeExempt = overtimeExempt;
    return this;
  }

   /**
   * Indicates if employee is exempt from overtime.
   * @return overtimeExempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if employee is exempt from overtime.")

  public Boolean getOvertimeExempt() {
    return overtimeExempt;
  }


  public void setOvertimeExempt(Boolean overtimeExempt) {
    
    
    
    this.overtimeExempt = overtimeExempt;
  }


  public DepartmentPosition payGroup(String payGroup) {
    
    
    
    
    this.payGroup = payGroup;
    return this;
  }

   /**
   * Employee pay group. Must match Company setup. &lt;br  /&gt; Max length: 20
   * @return payGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee pay group. Must match Company setup. <br  /> Max length: 20")

  public String getPayGroup() {
    return payGroup;
  }


  public void setPayGroup(String payGroup) {
    
    
    
    this.payGroup = payGroup;
  }


  public DepartmentPosition positionCode(String positionCode) {
    
    
    
    
    this.positionCode = positionCode;
    return this;
  }

   /**
   * Employee position code. Must match Company setup.&lt;br  /&gt;Max length: 20
   * @return positionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee position code. Must match Company setup.<br  />Max length: 20")

  public String getPositionCode() {
    return positionCode;
  }


  public void setPositionCode(String positionCode) {
    
    
    
    this.positionCode = positionCode;
  }


  public DepartmentPosition shift(String shift) {
    
    
    
    
    this.shift = shift;
    return this;
  }

   /**
   * Employee work shift.&lt;br  /&gt;Max length: 255
   * @return shift
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work shift.<br  />Max length: 255")

  public String getShift() {
    return shift;
  }


  public void setShift(String shift) {
    
    
    
    this.shift = shift;
  }


  public DepartmentPosition supervisorCompanyNumber(String supervisorCompanyNumber) {
    
    
    
    
    this.supervisorCompanyNumber = supervisorCompanyNumber;
    return this;
  }

   /**
   * Supervisor&#39;s company number. Defaults to employee company number.&lt;br  /&gt;Max length: 9
   * @return supervisorCompanyNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Supervisor's company number. Defaults to employee company number.<br  />Max length: 9")

  public String getSupervisorCompanyNumber() {
    return supervisorCompanyNumber;
  }


  public void setSupervisorCompanyNumber(String supervisorCompanyNumber) {
    
    
    
    this.supervisorCompanyNumber = supervisorCompanyNumber;
  }


  public DepartmentPosition supervisorEmployeeId(String supervisorEmployeeId) {
    
    
    
    
    this.supervisorEmployeeId = supervisorEmployeeId;
    return this;
  }

   /**
   * EmployeeId of the supervisor. &lt;br  /&gt;Max length: 10
   * @return supervisorEmployeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EmployeeId of the supervisor. <br  />Max length: 10")

  public String getSupervisorEmployeeId() {
    return supervisorEmployeeId;
  }


  public void setSupervisorEmployeeId(String supervisorEmployeeId) {
    
    
    
    this.supervisorEmployeeId = supervisorEmployeeId;
  }


  public DepartmentPosition tipped(String tipped) {
    
    
    
    
    this.tipped = tipped;
    return this;
  }

   /**
   * Indicates if employee receives tips.
   * @return tipped
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if employee receives tips.")

  public String getTipped() {
    return tipped;
  }


  public void setTipped(String tipped) {
    
    
    
    this.tipped = tipped;
  }


  public DepartmentPosition unionAffiliationDate(LocalDate unionAffiliationDate) {
    
    
    
    
    this.unionAffiliationDate = unionAffiliationDate;
    return this;
  }

   /**
   * Employee union affiliation effective date. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.
   * @return unionAffiliationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee union affiliation effective date. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.")

  public LocalDate getUnionAffiliationDate() {
    return unionAffiliationDate;
  }


  public void setUnionAffiliationDate(LocalDate unionAffiliationDate) {
    
    
    
    this.unionAffiliationDate = unionAffiliationDate;
  }


  public DepartmentPosition unionCode(String unionCode) {
    
    
    
    
    this.unionCode = unionCode;
    return this;
  }

   /**
   * Employee union code. Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return unionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee union code. Must match Company setup. <br  />Max length: 10")

  public String getUnionCode() {
    return unionCode;
  }


  public void setUnionCode(String unionCode) {
    
    
    
    this.unionCode = unionCode;
  }


  public DepartmentPosition unionDuesCollected(Boolean unionDuesCollected) {
    
    
    
    
    this.unionDuesCollected = unionDuesCollected;
    return this;
  }

   /**
   * Indicates if union dues are collected.
   * @return unionDuesCollected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if union dues are collected.")

  public Boolean getUnionDuesCollected() {
    return unionDuesCollected;
  }


  public void setUnionDuesCollected(Boolean unionDuesCollected) {
    
    
    
    this.unionDuesCollected = unionDuesCollected;
  }


  public DepartmentPosition unionInitiationCollected(Boolean unionInitiationCollected) {
    
    
    
    
    this.unionInitiationCollected = unionInitiationCollected;
    return this;
  }

   /**
   * Indicates if union initiation fees are collected
   * @return unionInitiationCollected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if union initiation fees are collected")

  public Boolean getUnionInitiationCollected() {
    return unionInitiationCollected;
  }


  public void setUnionInitiationCollected(Boolean unionInitiationCollected) {
    
    
    
    this.unionInitiationCollected = unionInitiationCollected;
  }


  public DepartmentPosition unionPosition(String unionPosition) {
    
    
    
    
    this.unionPosition = unionPosition;
    return this;
  }

   /**
   * Employee union position. Must match Company setup. &lt;br  /&gt;Max length: 30
   * @return unionPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee union position. Must match Company setup. <br  />Max length: 30")

  public String getUnionPosition() {
    return unionPosition;
  }


  public void setUnionPosition(String unionPosition) {
    
    
    
    this.unionPosition = unionPosition;
  }


  public DepartmentPosition workersComp(String workersComp) {
    
    
    
    
    this.workersComp = workersComp;
    return this;
  }

   /**
   * Employee worker compensation code. Must match Company setup.&lt;br  /&gt; Max length: 10
   * @return workersComp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee worker compensation code. Must match Company setup.<br  /> Max length: 10")

  public String getWorkersComp() {
    return workersComp;
  }


  public void setWorkersComp(String workersComp) {
    
    
    
    this.workersComp = workersComp;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DepartmentPosition instance itself
   */
  public DepartmentPosition putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepartmentPosition departmentPosition = (DepartmentPosition) o;
    return Objects.equals(this.changeReason, departmentPosition.changeReason) &&
        Objects.equals(this.clockBadgeNumber, departmentPosition.clockBadgeNumber) &&
        Objects.equals(this.costCenter1, departmentPosition.costCenter1) &&
        Objects.equals(this.costCenter2, departmentPosition.costCenter2) &&
        Objects.equals(this.costCenter3, departmentPosition.costCenter3) &&
        Objects.equals(this.effectiveDate, departmentPosition.effectiveDate) &&
        Objects.equals(this.employeeType, departmentPosition.employeeType) &&
        Objects.equals(this.equalEmploymentOpportunityClass, departmentPosition.equalEmploymentOpportunityClass) &&
        Objects.equals(this.isSupervisorReviewer, departmentPosition.isSupervisorReviewer) &&
        Objects.equals(this.jobTitle, departmentPosition.jobTitle) &&
        Objects.equals(this.minimumWageExempt, departmentPosition.minimumWageExempt) &&
        Objects.equals(this.overtimeExempt, departmentPosition.overtimeExempt) &&
        Objects.equals(this.payGroup, departmentPosition.payGroup) &&
        Objects.equals(this.positionCode, departmentPosition.positionCode) &&
        Objects.equals(this.shift, departmentPosition.shift) &&
        Objects.equals(this.supervisorCompanyNumber, departmentPosition.supervisorCompanyNumber) &&
        Objects.equals(this.supervisorEmployeeId, departmentPosition.supervisorEmployeeId) &&
        Objects.equals(this.tipped, departmentPosition.tipped) &&
        Objects.equals(this.unionAffiliationDate, departmentPosition.unionAffiliationDate) &&
        Objects.equals(this.unionCode, departmentPosition.unionCode) &&
        Objects.equals(this.unionDuesCollected, departmentPosition.unionDuesCollected) &&
        Objects.equals(this.unionInitiationCollected, departmentPosition.unionInitiationCollected) &&
        Objects.equals(this.unionPosition, departmentPosition.unionPosition) &&
        Objects.equals(this.workersComp, departmentPosition.workersComp)&&
        Objects.equals(this.additionalProperties, departmentPosition.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeReason, clockBadgeNumber, costCenter1, costCenter2, costCenter3, effectiveDate, employeeType, equalEmploymentOpportunityClass, isSupervisorReviewer, jobTitle, minimumWageExempt, overtimeExempt, payGroup, positionCode, shift, supervisorCompanyNumber, supervisorEmployeeId, tipped, unionAffiliationDate, unionCode, unionDuesCollected, unionInitiationCollected, unionPosition, workersComp, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepartmentPosition {\n");
    sb.append("    changeReason: ").append(toIndentedString(changeReason)).append("\n");
    sb.append("    clockBadgeNumber: ").append(toIndentedString(clockBadgeNumber)).append("\n");
    sb.append("    costCenter1: ").append(toIndentedString(costCenter1)).append("\n");
    sb.append("    costCenter2: ").append(toIndentedString(costCenter2)).append("\n");
    sb.append("    costCenter3: ").append(toIndentedString(costCenter3)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    employeeType: ").append(toIndentedString(employeeType)).append("\n");
    sb.append("    equalEmploymentOpportunityClass: ").append(toIndentedString(equalEmploymentOpportunityClass)).append("\n");
    sb.append("    isSupervisorReviewer: ").append(toIndentedString(isSupervisorReviewer)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    minimumWageExempt: ").append(toIndentedString(minimumWageExempt)).append("\n");
    sb.append("    overtimeExempt: ").append(toIndentedString(overtimeExempt)).append("\n");
    sb.append("    payGroup: ").append(toIndentedString(payGroup)).append("\n");
    sb.append("    positionCode: ").append(toIndentedString(positionCode)).append("\n");
    sb.append("    shift: ").append(toIndentedString(shift)).append("\n");
    sb.append("    supervisorCompanyNumber: ").append(toIndentedString(supervisorCompanyNumber)).append("\n");
    sb.append("    supervisorEmployeeId: ").append(toIndentedString(supervisorEmployeeId)).append("\n");
    sb.append("    tipped: ").append(toIndentedString(tipped)).append("\n");
    sb.append("    unionAffiliationDate: ").append(toIndentedString(unionAffiliationDate)).append("\n");
    sb.append("    unionCode: ").append(toIndentedString(unionCode)).append("\n");
    sb.append("    unionDuesCollected: ").append(toIndentedString(unionDuesCollected)).append("\n");
    sb.append("    unionInitiationCollected: ").append(toIndentedString(unionInitiationCollected)).append("\n");
    sb.append("    unionPosition: ").append(toIndentedString(unionPosition)).append("\n");
    sb.append("    workersComp: ").append(toIndentedString(workersComp)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeReason");
    openapiFields.add("clockBadgeNumber");
    openapiFields.add("costCenter1");
    openapiFields.add("costCenter2");
    openapiFields.add("costCenter3");
    openapiFields.add("effectiveDate");
    openapiFields.add("employeeType");
    openapiFields.add("equalEmploymentOpportunityClass");
    openapiFields.add("isSupervisorReviewer");
    openapiFields.add("jobTitle");
    openapiFields.add("minimumWageExempt");
    openapiFields.add("overtimeExempt");
    openapiFields.add("payGroup");
    openapiFields.add("positionCode");
    openapiFields.add("shift");
    openapiFields.add("supervisorCompanyNumber");
    openapiFields.add("supervisorEmployeeId");
    openapiFields.add("tipped");
    openapiFields.add("unionAffiliationDate");
    openapiFields.add("unionCode");
    openapiFields.add("unionDuesCollected");
    openapiFields.add("unionInitiationCollected");
    openapiFields.add("unionPosition");
    openapiFields.add("workersComp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DepartmentPosition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DepartmentPosition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DepartmentPosition is not found in the empty JSON string", DepartmentPosition.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("changeReason") != null && !jsonObj.get("changeReason").isJsonNull()) && !jsonObj.get("changeReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeReason").toString()));
      }
      if ((jsonObj.get("clockBadgeNumber") != null && !jsonObj.get("clockBadgeNumber").isJsonNull()) && !jsonObj.get("clockBadgeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clockBadgeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clockBadgeNumber").toString()));
      }
      if ((jsonObj.get("costCenter1") != null && !jsonObj.get("costCenter1").isJsonNull()) && !jsonObj.get("costCenter1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter1").toString()));
      }
      if ((jsonObj.get("costCenter2") != null && !jsonObj.get("costCenter2").isJsonNull()) && !jsonObj.get("costCenter2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter2").toString()));
      }
      if ((jsonObj.get("costCenter3") != null && !jsonObj.get("costCenter3").isJsonNull()) && !jsonObj.get("costCenter3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter3").toString()));
      }
      if ((jsonObj.get("employeeType") != null && !jsonObj.get("employeeType").isJsonNull()) && !jsonObj.get("employeeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeType").toString()));
      }
      if ((jsonObj.get("equalEmploymentOpportunityClass") != null && !jsonObj.get("equalEmploymentOpportunityClass").isJsonNull()) && !jsonObj.get("equalEmploymentOpportunityClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `equalEmploymentOpportunityClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("equalEmploymentOpportunityClass").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if ((jsonObj.get("payGroup") != null && !jsonObj.get("payGroup").isJsonNull()) && !jsonObj.get("payGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payGroup").toString()));
      }
      if ((jsonObj.get("positionCode") != null && !jsonObj.get("positionCode").isJsonNull()) && !jsonObj.get("positionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `positionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("positionCode").toString()));
      }
      if ((jsonObj.get("shift") != null && !jsonObj.get("shift").isJsonNull()) && !jsonObj.get("shift").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shift` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shift").toString()));
      }
      if ((jsonObj.get("supervisorCompanyNumber") != null && !jsonObj.get("supervisorCompanyNumber").isJsonNull()) && !jsonObj.get("supervisorCompanyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorCompanyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorCompanyNumber").toString()));
      }
      if ((jsonObj.get("supervisorEmployeeId") != null && !jsonObj.get("supervisorEmployeeId").isJsonNull()) && !jsonObj.get("supervisorEmployeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorEmployeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorEmployeeId").toString()));
      }
      if ((jsonObj.get("tipped") != null && !jsonObj.get("tipped").isJsonNull()) && !jsonObj.get("tipped").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tipped` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tipped").toString()));
      }
      if ((jsonObj.get("unionCode") != null && !jsonObj.get("unionCode").isJsonNull()) && !jsonObj.get("unionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unionCode").toString()));
      }
      if ((jsonObj.get("unionPosition") != null && !jsonObj.get("unionPosition").isJsonNull()) && !jsonObj.get("unionPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unionPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unionPosition").toString()));
      }
      if ((jsonObj.get("workersComp") != null && !jsonObj.get("workersComp").isJsonNull()) && !jsonObj.get("workersComp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workersComp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workersComp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DepartmentPosition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DepartmentPosition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DepartmentPosition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DepartmentPosition.class));

       return (TypeAdapter<T>) new TypeAdapter<DepartmentPosition>() {
           @Override
           public void write(JsonWriter out, DepartmentPosition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DepartmentPosition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DepartmentPosition instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DepartmentPosition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DepartmentPosition
  * @throws IOException if the JSON string is invalid with respect to DepartmentPosition
  */
  public static DepartmentPosition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DepartmentPosition.class);
  }

 /**
  * Convert an instance of DepartmentPosition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

