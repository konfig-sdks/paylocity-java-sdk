/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The employee earning model
 */
@ApiModel(description = "The employee earning model")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Earning {
  public static final String SERIALIZED_NAME_AGENCY = "agency";
  @SerializedName(SERIALIZED_NAME_AGENCY)
  private Object agency;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Object amount;

  public static final String SERIALIZED_NAME_ANNUAL_MAXIMUM = "annualMaximum";
  @SerializedName(SERIALIZED_NAME_ANNUAL_MAXIMUM)
  private Object annualMaximum;

  public static final String SERIALIZED_NAME_CALCULATION_CODE = "calculationCode";
  @SerializedName(SERIALIZED_NAME_CALCULATION_CODE)
  private Object calculationCode;

  public static final String SERIALIZED_NAME_COST_CENTER1 = "costCenter1";
  @SerializedName(SERIALIZED_NAME_COST_CENTER1)
  private Object costCenter1;

  public static final String SERIALIZED_NAME_COST_CENTER2 = "costCenter2";
  @SerializedName(SERIALIZED_NAME_COST_CENTER2)
  private Object costCenter2;

  public static final String SERIALIZED_NAME_COST_CENTER3 = "costCenter3";
  @SerializedName(SERIALIZED_NAME_COST_CENTER3)
  private Object costCenter3;

  public static final String SERIALIZED_NAME_EARNING_CODE = "earningCode";
  @SerializedName(SERIALIZED_NAME_EARNING_CODE)
  private Object earningCode;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private Object effectiveDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Object endDate;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Object frequency;

  public static final String SERIALIZED_NAME_GOAL = "goal";
  @SerializedName(SERIALIZED_NAME_GOAL)
  private Object goal;

  public static final String SERIALIZED_NAME_HOURS_OR_UNITS = "hoursOrUnits";
  @SerializedName(SERIALIZED_NAME_HOURS_OR_UNITS)
  private Object hoursOrUnits;

  public static final String SERIALIZED_NAME_IS_SELF_INSURED = "isSelfInsured";
  @SerializedName(SERIALIZED_NAME_IS_SELF_INSURED)
  private Object isSelfInsured;

  public static final String SERIALIZED_NAME_JOB_CODE = "jobCode";
  @SerializedName(SERIALIZED_NAME_JOB_CODE)
  private Object jobCode;

  public static final String SERIALIZED_NAME_MISCELLANEOUS_INFO = "miscellaneousInfo";
  @SerializedName(SERIALIZED_NAME_MISCELLANEOUS_INFO)
  private Object miscellaneousInfo;

  public static final String SERIALIZED_NAME_PAID_TOWARDS_GOAL = "paidTowardsGoal";
  @SerializedName(SERIALIZED_NAME_PAID_TOWARDS_GOAL)
  private Object paidTowardsGoal;

  public static final String SERIALIZED_NAME_PAY_PERIOD_MAXIMUM = "payPeriodMaximum";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_MAXIMUM)
  private Object payPeriodMaximum;

  public static final String SERIALIZED_NAME_PAY_PERIOD_MINIMUM = "payPeriodMinimum";
  @SerializedName(SERIALIZED_NAME_PAY_PERIOD_MINIMUM)
  private Object payPeriodMinimum;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Object rate;

  public static final String SERIALIZED_NAME_RATE_CODE = "rateCode";
  @SerializedName(SERIALIZED_NAME_RATE_CODE)
  private Object rateCode;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Object startDate;

  public Earning() {
  }

  public Earning agency(Object agency) {
    
    
    
    
    this.agency = agency;
    return this;
  }

   /**
   * Third-party agency associated with earning. Must match Company setup.&lt;br  /&gt;Max length: 10
   * @return agency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10")

  public Object getAgency() {
    return agency;
  }


  public void setAgency(Object agency) {
    
    
    
    this.agency = agency;
  }


  public Earning amount(Object amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 &#x3D; 10%).  &lt;br  /&gt;Decimal(12,2)
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2)")

  public Object getAmount() {
    return amount;
  }


  public void setAmount(Object amount) {
    
    
    
    this.amount = amount;
  }


  public Earning annualMaximum(Object annualMaximum) {
    
    
    
    
    this.annualMaximum = annualMaximum;
    return this;
  }

   /**
   * Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. &lt;br  /&gt;Decimal(12,2)
   * @return annualMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2)")

  public Object getAnnualMaximum() {
    return annualMaximum;
  }


  public void setAnnualMaximum(Object annualMaximum) {
    
    
    
    this.annualMaximum = annualMaximum;
  }


  public Earning calculationCode(Object calculationCode) {
    
    
    
    
    this.calculationCode = calculationCode;
    return this;
  }

   /**
   * Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. &lt;br  /&gt;Max length: 20
   * @return calculationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20")

  public Object getCalculationCode() {
    return calculationCode;
  }


  public void setCalculationCode(Object calculationCode) {
    
    
    
    this.calculationCode = calculationCode;
  }


  public Earning costCenter1(Object costCenter1) {
    
    
    
    
    this.costCenter1 = costCenter1;
    return this;
  }

   /**
   * Cost Center associated with earning. Must match Company setup.&lt;br  /&gt; Max length: 10
   * @return costCenter1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10")

  public Object getCostCenter1() {
    return costCenter1;
  }


  public void setCostCenter1(Object costCenter1) {
    
    
    
    this.costCenter1 = costCenter1;
  }


  public Earning costCenter2(Object costCenter2) {
    
    
    
    
    this.costCenter2 = costCenter2;
    return this;
  }

   /**
   * Cost Center associated with earning. Must match Company setup.&lt;br  /&gt; Max length: 10
   * @return costCenter2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10")

  public Object getCostCenter2() {
    return costCenter2;
  }


  public void setCostCenter2(Object costCenter2) {
    
    
    
    this.costCenter2 = costCenter2;
  }


  public Earning costCenter3(Object costCenter3) {
    
    
    
    
    this.costCenter3 = costCenter3;
    return this;
  }

   /**
   * Cost Center associated with earning. Must match Company setup.&lt;br  /&gt; Max length: 10
   * @return costCenter3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10")

  public Object getCostCenter3() {
    return costCenter3;
  }


  public void setCostCenter3(Object costCenter3) {
    
    
    
    this.costCenter3 = costCenter3;
  }


  public Earning earningCode(Object earningCode) {
    
    
    
    
    this.earningCode = earningCode;
    return this;
  }

   /**
   * Earning code. Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return earningCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Earning code. Must match Company setup. <br  />Max length: 10")

  public Object getEarningCode() {
    return earningCode;
  }


  public void setEarningCode(Object earningCode) {
    
    
    
    this.earningCode = earningCode;
  }


  public Earning effectiveDate(Object effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.")

  public Object getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(Object effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public Earning endDate(Object endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.")

  public Object getEndDate() {
    return endDate;
  }


  public void setEndDate(Object endDate) {
    
    
    
    this.endDate = endDate;
  }


  public Earning frequency(Object frequency) {
    
    
    
    
    this.frequency = frequency;
    return this;
  }

   /**
   * Needed if earning is applied differently from the payroll frequency (one time earning for example).&lt;br  /&gt; Max length: 5
   * @return frequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5")

  public Object getFrequency() {
    return frequency;
  }


  public void setFrequency(Object frequency) {
    
    
    
    this.frequency = frequency;
  }


  public Earning goal(Object goal) {
    
    
    
    
    this.goal = goal;
    return this;
  }

   /**
   * Dollar amount. The employee earning will stop when the goal amount is reached.&lt;br  /&gt; Decimal(12,2)
   * @return goal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2)")

  public Object getGoal() {
    return goal;
  }


  public void setGoal(Object goal) {
    
    
    
    this.goal = goal;
  }


  public Earning hoursOrUnits(Object hoursOrUnits) {
    
    
    
    
    this.hoursOrUnits = hoursOrUnits;
    return this;
  }

   /**
   * The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. &lt;br  /&gt; Decimal(12,2)
   * @return hoursOrUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2)")

  public Object getHoursOrUnits() {
    return hoursOrUnits;
  }


  public void setHoursOrUnits(Object hoursOrUnits) {
    
    
    
    this.hoursOrUnits = hoursOrUnits;
  }


  public Earning isSelfInsured(Object isSelfInsured) {
    
    
    
    
    this.isSelfInsured = isSelfInsured;
    return this;
  }

   /**
   * Used for ACA. If not entered, defaulted to Company earning setup.
   * @return isSelfInsured
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used for ACA. If not entered, defaulted to Company earning setup.")

  public Object getIsSelfInsured() {
    return isSelfInsured;
  }


  public void setIsSelfInsured(Object isSelfInsured) {
    
    
    
    this.isSelfInsured = isSelfInsured;
  }


  public Earning jobCode(Object jobCode) {
    
    
    
    
    this.jobCode = jobCode;
    return this;
  }

   /**
   * Job code associated with earnings. Must match Company setup.&lt;br  /&gt; Max length: 20
   * @return jobCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Job code associated with earnings. Must match Company setup.<br  /> Max length: 20")

  public Object getJobCode() {
    return jobCode;
  }


  public void setJobCode(Object jobCode) {
    
    
    
    this.jobCode = jobCode;
  }


  public Earning miscellaneousInfo(Object miscellaneousInfo) {
    
    
    
    
    this.miscellaneousInfo = miscellaneousInfo;
    return this;
  }

   /**
   * Information to print on the check stub if agency is set up for this earning. &lt;br  /&gt;Max length: 50
   * @return miscellaneousInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50")

  public Object getMiscellaneousInfo() {
    return miscellaneousInfo;
  }


  public void setMiscellaneousInfo(Object miscellaneousInfo) {
    
    
    
    this.miscellaneousInfo = miscellaneousInfo;
  }


  public Earning paidTowardsGoal(Object paidTowardsGoal) {
    
    
    
    
    this.paidTowardsGoal = paidTowardsGoal;
    return this;
  }

   /**
   * Amount already paid to employee toward goal. &lt;br  /&gt; Decimal(12,2)
   * @return paidTowardsGoal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount already paid to employee toward goal. <br  /> Decimal(12,2)")

  public Object getPaidTowardsGoal() {
    return paidTowardsGoal;
  }


  public void setPaidTowardsGoal(Object paidTowardsGoal) {
    
    
    
    this.paidTowardsGoal = paidTowardsGoal;
  }


  public Earning payPeriodMaximum(Object payPeriodMaximum) {
    
    
    
    
    this.payPeriodMaximum = payPeriodMaximum;
    return this;
  }

   /**
   * Maximum amount of the earning on a single paycheck. &lt;br  /&gt; Decimal(12,2)
   * @return payPeriodMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2)")

  public Object getPayPeriodMaximum() {
    return payPeriodMaximum;
  }


  public void setPayPeriodMaximum(Object payPeriodMaximum) {
    
    
    
    this.payPeriodMaximum = payPeriodMaximum;
  }


  public Earning payPeriodMinimum(Object payPeriodMinimum) {
    
    
    
    
    this.payPeriodMinimum = payPeriodMinimum;
    return this;
  }

   /**
   * Minimum amount of the earning on a single paycheck. &lt;br  /&gt; Decimal(12,2)
   * @return payPeriodMinimum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2)")

  public Object getPayPeriodMinimum() {
    return payPeriodMinimum;
  }


  public void setPayPeriodMinimum(Object payPeriodMinimum) {
    
    
    
    this.payPeriodMinimum = payPeriodMinimum;
  }


  public Earning rate(Object rate) {
    
    
    
    
    this.rate = rate;
    return this;
  }

   /**
   * Rate is used in conjunction with the hoursOrUnits field. &lt;br  /&gt; Decimal(12,2)
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2)")

  public Object getRate() {
    return rate;
  }


  public void setRate(Object rate) {
    
    
    
    this.rate = rate;
  }


  public Earning rateCode(Object rateCode) {
    
    
    
    
    this.rateCode = rateCode;
    return this;
  }

   /**
   * Rate Code applies to additional pay rates entered for an employee. Must match Company setup. &lt;br  /&gt; Max length: 10
   * @return rateCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10")

  public Object getRateCode() {
    return rateCode;
  }


  public void setRateCode(Object rateCode) {
    
    
    
    this.rateCode = rateCode;
  }


  public Earning startDate(Object startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.")

  public Object getStartDate() {
    return startDate;
  }


  public void setStartDate(Object startDate) {
    
    
    
    this.startDate = startDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Earning instance itself
   */
  public Earning putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Earning earning = (Earning) o;
    return Objects.equals(this.agency, earning.agency) &&
        Objects.equals(this.amount, earning.amount) &&
        Objects.equals(this.annualMaximum, earning.annualMaximum) &&
        Objects.equals(this.calculationCode, earning.calculationCode) &&
        Objects.equals(this.costCenter1, earning.costCenter1) &&
        Objects.equals(this.costCenter2, earning.costCenter2) &&
        Objects.equals(this.costCenter3, earning.costCenter3) &&
        Objects.equals(this.earningCode, earning.earningCode) &&
        Objects.equals(this.effectiveDate, earning.effectiveDate) &&
        Objects.equals(this.endDate, earning.endDate) &&
        Objects.equals(this.frequency, earning.frequency) &&
        Objects.equals(this.goal, earning.goal) &&
        Objects.equals(this.hoursOrUnits, earning.hoursOrUnits) &&
        Objects.equals(this.isSelfInsured, earning.isSelfInsured) &&
        Objects.equals(this.jobCode, earning.jobCode) &&
        Objects.equals(this.miscellaneousInfo, earning.miscellaneousInfo) &&
        Objects.equals(this.paidTowardsGoal, earning.paidTowardsGoal) &&
        Objects.equals(this.payPeriodMaximum, earning.payPeriodMaximum) &&
        Objects.equals(this.payPeriodMinimum, earning.payPeriodMinimum) &&
        Objects.equals(this.rate, earning.rate) &&
        Objects.equals(this.rateCode, earning.rateCode) &&
        Objects.equals(this.startDate, earning.startDate)&&
        Objects.equals(this.additionalProperties, earning.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agency, amount, annualMaximum, calculationCode, costCenter1, costCenter2, costCenter3, earningCode, effectiveDate, endDate, frequency, goal, hoursOrUnits, isSelfInsured, jobCode, miscellaneousInfo, paidTowardsGoal, payPeriodMaximum, payPeriodMinimum, rate, rateCode, startDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Earning {\n");
    sb.append("    agency: ").append(toIndentedString(agency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    annualMaximum: ").append(toIndentedString(annualMaximum)).append("\n");
    sb.append("    calculationCode: ").append(toIndentedString(calculationCode)).append("\n");
    sb.append("    costCenter1: ").append(toIndentedString(costCenter1)).append("\n");
    sb.append("    costCenter2: ").append(toIndentedString(costCenter2)).append("\n");
    sb.append("    costCenter3: ").append(toIndentedString(costCenter3)).append("\n");
    sb.append("    earningCode: ").append(toIndentedString(earningCode)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    hoursOrUnits: ").append(toIndentedString(hoursOrUnits)).append("\n");
    sb.append("    isSelfInsured: ").append(toIndentedString(isSelfInsured)).append("\n");
    sb.append("    jobCode: ").append(toIndentedString(jobCode)).append("\n");
    sb.append("    miscellaneousInfo: ").append(toIndentedString(miscellaneousInfo)).append("\n");
    sb.append("    paidTowardsGoal: ").append(toIndentedString(paidTowardsGoal)).append("\n");
    sb.append("    payPeriodMaximum: ").append(toIndentedString(payPeriodMaximum)).append("\n");
    sb.append("    payPeriodMinimum: ").append(toIndentedString(payPeriodMinimum)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    rateCode: ").append(toIndentedString(rateCode)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agency");
    openapiFields.add("amount");
    openapiFields.add("annualMaximum");
    openapiFields.add("calculationCode");
    openapiFields.add("costCenter1");
    openapiFields.add("costCenter2");
    openapiFields.add("costCenter3");
    openapiFields.add("earningCode");
    openapiFields.add("effectiveDate");
    openapiFields.add("endDate");
    openapiFields.add("frequency");
    openapiFields.add("goal");
    openapiFields.add("hoursOrUnits");
    openapiFields.add("isSelfInsured");
    openapiFields.add("jobCode");
    openapiFields.add("miscellaneousInfo");
    openapiFields.add("paidTowardsGoal");
    openapiFields.add("payPeriodMaximum");
    openapiFields.add("payPeriodMinimum");
    openapiFields.add("rate");
    openapiFields.add("rateCode");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("earningCode");
    openapiRequiredFields.add("startDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Earning
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Earning.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Earning is not found in the empty JSON string", Earning.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Earning.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Earning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Earning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Earning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Earning.class));

       return (TypeAdapter<T>) new TypeAdapter<Earning>() {
           @Override
           public void write(JsonWriter out, Earning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Earning read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Earning instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Earning given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Earning
  * @throws IOException if the JSON string is invalid with respect to Earning
  */
  public static Earning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Earning.class);
  }

 /**
  * Convert an instance of Earning to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

