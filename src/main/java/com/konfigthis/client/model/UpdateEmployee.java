/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BenefitSetup;
import com.konfigthis.client.model.DepartmentPosition;
import com.konfigthis.client.model.PrimaryPayRate;
import com.konfigthis.client.model.WebTime;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UpdateEmployee
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UpdateEmployee {
  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ADJ_SENIORITY_DATE = "adjSeniorityDate";
  @SerializedName(SERIALIZED_NAME_ADJ_SENIORITY_DATE)
  private LocalDate adjSeniorityDate;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private LocalDate birthDate;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY_NUMBER = "companyNumber";
  @SerializedName(SERIALIZED_NAME_COMPANY_NUMBER)
  private String companyNumber;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_DISABILITY = "disability";
  @SerializedName(SERIALIZED_NAME_DISABILITY)
  private String disability;

  public static final String SERIALIZED_NAME_ELIGIBLE_FOR_REHIRE = "eligibleForRehire";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_FOR_REHIRE)
  private Boolean eligibleForRehire;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_EMPLOYEE_STATUS = "employeeStatus";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_STATUS)
  private String employeeStatus;

  public static final String SERIALIZED_NAME_EMP_STATUS_CHANGE_REASON = "empStatusChangeReason";
  @SerializedName(SERIALIZED_NAME_EMP_STATUS_CHANGE_REASON)
  private String empStatusChangeReason;

  public static final String SERIALIZED_NAME_EMP_STATUS_EFFECTIVE_DATE = "empStatusEffectiveDate";
  @SerializedName(SERIALIZED_NAME_EMP_STATUS_EFFECTIVE_DATE)
  private String empStatusEffectiveDate;

  public static final String SERIALIZED_NAME_ETHNICITY = "ethnicity";
  @SerializedName(SERIALIZED_NAME_ETHNICITY)
  private String ethnicity;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_HOME_PHONE = "homePhone";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE)
  private String homePhone;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "maritalStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private String maritalStatus;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_PAGER = "pager";
  @SerializedName(SERIALIZED_NAME_PAGER)
  private String pager;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL_ADDRESS = "personalEmailAddress";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL_ADDRESS)
  private String personalEmailAddress;

  public static final String SERIALIZED_NAME_PERSONAL_MOBILE_PHONE = "personalMobilePhone";
  @SerializedName(SERIALIZED_NAME_PERSONAL_MOBILE_PHONE)
  private String personalMobilePhone;

  public static final String SERIALIZED_NAME_PRIOR_LAST_NAME = "priorLastName";
  @SerializedName(SERIALIZED_NAME_PRIOR_LAST_NAME)
  private String priorLastName;

  public static final String SERIALIZED_NAME_SALUTATION = "salutation";
  @SerializedName(SERIALIZED_NAME_SALUTATION)
  private String salutation;

  public static final String SERIALIZED_NAME_SEX = "sex";
  @SerializedName(SERIALIZED_NAME_SEX)
  private String sex;

  public static final String SERIALIZED_NAME_SMOKER = "smoker";
  @SerializedName(SERIALIZED_NAME_SMOKER)
  private Boolean smoker;

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  private String ssn;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public static final String SERIALIZED_NAME_SUI_EXEMPT = "suiExempt";
  @SerializedName(SERIALIZED_NAME_SUI_EXEMPT)
  private Boolean suiExempt;

  public static final String SERIALIZED_NAME_SUI_EXEMPT_NOTES = "suiExemptNotes";
  @SerializedName(SERIALIZED_NAME_SUI_EXEMPT_NOTES)
  private String suiExemptNotes;

  public static final String SERIALIZED_NAME_SUI_EXEMPT_REASON = "suiExemptReason";
  @SerializedName(SERIALIZED_NAME_SUI_EXEMPT_REASON)
  private String suiExemptReason;

  public static final String SERIALIZED_NAME_VETERAN = "veteran";
  @SerializedName(SERIALIZED_NAME_VETERAN)
  private String veteran;

  public static final String SERIALIZED_NAME_WORK_ADDRESS1 = "workAddress1";
  @SerializedName(SERIALIZED_NAME_WORK_ADDRESS1)
  private String workAddress1;

  public static final String SERIALIZED_NAME_WORK_ADDRESS2 = "workAddress2";
  @SerializedName(SERIALIZED_NAME_WORK_ADDRESS2)
  private String workAddress2;

  public static final String SERIALIZED_NAME_WORK_CITY = "workCity";
  @SerializedName(SERIALIZED_NAME_WORK_CITY)
  private String workCity;

  public static final String SERIALIZED_NAME_WORK_COUNTRY = "workCountry";
  @SerializedName(SERIALIZED_NAME_WORK_COUNTRY)
  private String workCountry;

  public static final String SERIALIZED_NAME_WORK_COUNTY = "workCounty";
  @SerializedName(SERIALIZED_NAME_WORK_COUNTY)
  private String workCounty;

  public static final String SERIALIZED_NAME_WORK_EMAIL_ADDRESS = "workEmailAddress";
  @SerializedName(SERIALIZED_NAME_WORK_EMAIL_ADDRESS)
  private String workEmailAddress;

  public static final String SERIALIZED_NAME_WORK_MAIL_STOP = "workMailStop";
  @SerializedName(SERIALIZED_NAME_WORK_MAIL_STOP)
  private String workMailStop;

  public static final String SERIALIZED_NAME_WORK_MOBILE_PHONE = "workMobilePhone";
  @SerializedName(SERIALIZED_NAME_WORK_MOBILE_PHONE)
  private String workMobilePhone;

  public static final String SERIALIZED_NAME_WORK_PAGER = "workPager";
  @SerializedName(SERIALIZED_NAME_WORK_PAGER)
  private String workPager;

  public static final String SERIALIZED_NAME_WORK_PHONE = "workPhone";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE)
  private String workPhone;

  public static final String SERIALIZED_NAME_WORK_PHONE_EXT = "workPhoneExt";
  @SerializedName(SERIALIZED_NAME_WORK_PHONE_EXT)
  private String workPhoneExt;

  public static final String SERIALIZED_NAME_WORK_STATE = "workState";
  @SerializedName(SERIALIZED_NAME_WORK_STATE)
  private String workState;

  public static final String SERIALIZED_NAME_WORK_ZIP = "workZip";
  @SerializedName(SERIALIZED_NAME_WORK_ZIP)
  private String workZip;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_BENEFIT_SETUP = "benefitSetup";
  @SerializedName(SERIALIZED_NAME_BENEFIT_SETUP)
  private List<BenefitSetup> benefitSetup = null;

  public static final String SERIALIZED_NAME_DEPARTMENT_POSITION = "departmentPosition";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_POSITION)
  private List<DepartmentPosition> departmentPosition = null;

  public static final String SERIALIZED_NAME_PRIMARY_PAY_RATE = "primaryPayRate";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PAY_RATE)
  private List<PrimaryPayRate> primaryPayRate = null;

  public static final String SERIALIZED_NAME_WEB_TIME = "webTime";
  @SerializedName(SERIALIZED_NAME_WEB_TIME)
  private List<WebTime> webTime = null;

  public UpdateEmployee() {
  }

  public UpdateEmployee address1(String address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * Employee home 1st address line. &lt;br  /&gt;Max length: 40
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home 1st address line. <br  />Max length: 40")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    
    this.address1 = address1;
  }


  public UpdateEmployee address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * Employee home 2nd address line. &lt;br  /&gt;Max length: 40
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home 2nd address line. <br  />Max length: 40")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public UpdateEmployee adjSeniorityDate(LocalDate adjSeniorityDate) {
    
    
    
    
    this.adjSeniorityDate = adjSeniorityDate;
    return this;
  }

   /**
   * Adjusted seniority date. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.
   * @return adjSeniorityDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Adjusted seniority date. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.")

  public LocalDate getAdjSeniorityDate() {
    return adjSeniorityDate;
  }


  public void setAdjSeniorityDate(LocalDate adjSeniorityDate) {
    
    
    
    this.adjSeniorityDate = adjSeniorityDate;
  }


  public UpdateEmployee birthDate(LocalDate birthDate) {
    
    
    
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * Employee birthdate. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee birthdate. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.")

  public LocalDate getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(LocalDate birthDate) {
    
    
    
    this.birthDate = birthDate;
  }


  public UpdateEmployee city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Employee home city. &lt;br  /&gt;Max length: 40
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home city. <br  />Max length: 40")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public UpdateEmployee companyNumber(String companyNumber) {
    
    
    
    
    this.companyNumber = companyNumber;
    return this;
  }

   /**
   * Paylocity assigned company number. &lt;br  /&gt; Max length: 9
   * @return companyNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Paylocity assigned company number. <br  /> Max length: 9")

  public String getCompanyNumber() {
    return companyNumber;
  }


  public void setCompanyNumber(String companyNumber) {
    
    
    
    this.companyNumber = companyNumber;
  }


  public UpdateEmployee country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Employee country. &lt;br  /&gt; Max length: 30
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee country. <br  /> Max length: 30")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public UpdateEmployee county(String county) {
    
    
    
    
    this.county = county;
    return this;
  }

   /**
   * Employee county.&lt;br  /&gt; Max length: 30
   * @return county
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee county.<br  /> Max length: 30")

  public String getCounty() {
    return county;
  }


  public void setCounty(String county) {
    
    
    
    this.county = county;
  }


  public UpdateEmployee disability(String disability) {
    
    
    
    
    this.disability = disability;
    return this;
  }

   /**
   * Indicates if employee has disability status.
   * @return disability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if employee has disability status.")

  public String getDisability() {
    return disability;
  }


  public void setDisability(String disability) {
    
    
    
    this.disability = disability;
  }


  public UpdateEmployee eligibleForRehire(Boolean eligibleForRehire) {
    
    
    
    
    this.eligibleForRehire = eligibleForRehire;
    return this;
  }

   /**
   * Indicates if employee eligible for rehire.
   * @return eligibleForRehire
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if employee eligible for rehire.")

  public Boolean getEligibleForRehire() {
    return eligibleForRehire;
  }


  public void setEligibleForRehire(Boolean eligibleForRehire) {
    
    
    
    this.eligibleForRehire = eligibleForRehire;
  }


  public UpdateEmployee employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public UpdateEmployee employeeStatus(String employeeStatus) {
    
    
    
    
    this.employeeStatus = employeeStatus;
    return this;
  }

   /**
   * Employee current work status. Common values are *A* (Active), *L* (Leave of Absence), *T* (Terminated). &lt;br  /&gt;Max length: 20
   * @return employeeStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current work status. Common values are *A* (Active), *L* (Leave of Absence), *T* (Terminated). <br  />Max length: 20")

  public String getEmployeeStatus() {
    return employeeStatus;
  }


  public void setEmployeeStatus(String employeeStatus) {
    
    
    
    this.employeeStatus = employeeStatus;
  }


  public UpdateEmployee empStatusChangeReason(String empStatusChangeReason) {
    
    
    
    
    this.empStatusChangeReason = empStatusChangeReason;
    return this;
  }

   /**
   * Employee status change reason. Must match Company setup.&lt;br  /&gt;Max length: 15
   * @return empStatusChangeReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee status change reason. Must match Company setup.<br  />Max length: 15")

  public String getEmpStatusChangeReason() {
    return empStatusChangeReason;
  }


  public void setEmpStatusChangeReason(String empStatusChangeReason) {
    
    
    
    this.empStatusChangeReason = empStatusChangeReason;
  }


  public UpdateEmployee empStatusEffectiveDate(String empStatusEffectiveDate) {
    
    
    
    
    this.empStatusEffectiveDate = empStatusEffectiveDate;
    return this;
  }

   /**
   * Effective date of employee status change, can be in the future. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.
   * @return empStatusEffectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Effective date of employee status change, can be in the future. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.")

  public String getEmpStatusEffectiveDate() {
    return empStatusEffectiveDate;
  }


  public void setEmpStatusEffectiveDate(String empStatusEffectiveDate) {
    
    
    
    this.empStatusEffectiveDate = empStatusEffectiveDate;
  }


  public UpdateEmployee ethnicity(String ethnicity) {
    
    
    
    
    this.ethnicity = ethnicity;
    return this;
  }

   /**
   * Employee ethnicity.&lt;br  /&gt; Max length: 10
   * @return ethnicity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee ethnicity.<br  /> Max length: 10")

  public String getEthnicity() {
    return ethnicity;
  }


  public void setEthnicity(String ethnicity) {
    
    
    
    this.ethnicity = ethnicity;
  }


  public UpdateEmployee firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Employee first name. &lt;br  /&gt;Max length: 40
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee first name. <br  />Max length: 40")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public UpdateEmployee homePhone(String homePhone) {
    
    
    
    
    this.homePhone = homePhone;
    return this;
  }

   /**
   * Employee home phone number.  &lt;br  /&gt;Max length: 12
   * @return homePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home phone number.  <br  />Max length: 12")

  public String getHomePhone() {
    return homePhone;
  }


  public void setHomePhone(String homePhone) {
    
    
    
    this.homePhone = homePhone;
  }


  public UpdateEmployee lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Employee last name. &lt;br  /&gt;Max length: 40
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee last name. <br  />Max length: 40")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public UpdateEmployee maritalStatus(String maritalStatus) {
    
    
    
    
    this.maritalStatus = maritalStatus;
    return this;
  }

   /**
   * Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. &lt;br  /&gt;Max length: 10
   * @return maritalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10")

  public String getMaritalStatus() {
    return maritalStatus;
  }


  public void setMaritalStatus(String maritalStatus) {
    
    
    
    this.maritalStatus = maritalStatus;
  }


  public UpdateEmployee middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Employee middle name.&lt;br  /&gt; Max length: 20
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee middle name.<br  /> Max length: 20")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public UpdateEmployee nickname(String nickname) {
    
    
    
    
    this.nickname = nickname;
    return this;
  }

   /**
   * Employee preferred display name. &lt;br  /&gt; Max length: 20
   * @return nickname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee preferred display name. <br  /> Max length: 20")

  public String getNickname() {
    return nickname;
  }


  public void setNickname(String nickname) {
    
    
    
    this.nickname = nickname;
  }


  public UpdateEmployee pager(String pager) {
    
    
    
    
    this.pager = pager;
    return this;
  }

   /**
   * Employee work pager number.&lt;br  /&gt; Max length: 20
   * @return pager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work pager number.<br  /> Max length: 20")

  public String getPager() {
    return pager;
  }


  public void setPager(String pager) {
    
    
    
    this.pager = pager;
  }


  public UpdateEmployee personalEmailAddress(String personalEmailAddress) {
    
    
    
    
    this.personalEmailAddress = personalEmailAddress;
    return this;
  }

   /**
   * Employee personal email address. &lt;br  /&gt;Max length: 50
   * @return personalEmailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee personal email address. <br  />Max length: 50")

  public String getPersonalEmailAddress() {
    return personalEmailAddress;
  }


  public void setPersonalEmailAddress(String personalEmailAddress) {
    
    
    
    this.personalEmailAddress = personalEmailAddress;
  }


  public UpdateEmployee personalMobilePhone(String personalMobilePhone) {
    
    
    
    
    this.personalMobilePhone = personalMobilePhone;
    return this;
  }

   /**
   * Employee personal mobile phone number. &lt;br  /&gt;Max length: 12
   * @return personalMobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee personal mobile phone number. <br  />Max length: 12")

  public String getPersonalMobilePhone() {
    return personalMobilePhone;
  }


  public void setPersonalMobilePhone(String personalMobilePhone) {
    
    
    
    this.personalMobilePhone = personalMobilePhone;
  }


  public UpdateEmployee priorLastName(String priorLastName) {
    
    
    
    
    this.priorLastName = priorLastName;
    return this;
  }

   /**
   * Prior last name if applicable.&lt;br  /&gt;Max length: 40
   * @return priorLastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Prior last name if applicable.<br  />Max length: 40")

  public String getPriorLastName() {
    return priorLastName;
  }


  public void setPriorLastName(String priorLastName) {
    
    
    
    this.priorLastName = priorLastName;
  }


  public UpdateEmployee salutation(String salutation) {
    
    
    
    
    this.salutation = salutation;
    return this;
  }

   /**
   * Employee preferred salutation. &lt;br  /&gt;Max length: 10
   * @return salutation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee preferred salutation. <br  />Max length: 10")

  public String getSalutation() {
    return salutation;
  }


  public void setSalutation(String salutation) {
    
    
    
    this.salutation = salutation;
  }


  public UpdateEmployee sex(String sex) {
    
    
    
    
    this.sex = sex;
    return this;
  }

   /**
   * Employee gender. Common values *M* (Male), *F* (Female). &lt;br  /&gt;Max length: 1
   * @return sex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee gender. Common values *M* (Male), *F* (Female). <br  />Max length: 1")

  public String getSex() {
    return sex;
  }


  public void setSex(String sex) {
    
    
    
    this.sex = sex;
  }


  public UpdateEmployee smoker(Boolean smoker) {
    
    
    
    
    this.smoker = smoker;
    return this;
  }

   /**
   * Indicates if employee is a smoker.
   * @return smoker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if employee is a smoker.")

  public Boolean getSmoker() {
    return smoker;
  }


  public void setSmoker(Boolean smoker) {
    
    
    
    this.smoker = smoker;
  }


  public UpdateEmployee ssn(String ssn) {
    
    
    
    
    this.ssn = ssn;
    return this;
  }

   /**
   * Employee social security number. Leave it blank if valid social security number not available. &lt;br  /&gt;Max length: 11
   * @return ssn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11")

  public String getSsn() {
    return ssn;
  }


  public void setSsn(String ssn) {
    
    
    
    this.ssn = ssn;
  }


  public UpdateEmployee state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Employee home state. &lt;br  /&gt;Max length: 2
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home state. <br  />Max length: 2")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public UpdateEmployee suffix(String suffix) {
    
    
    
    
    this.suffix = suffix;
    return this;
  }

   /**
   * Employee name suffix. Common values are *Jr, Sr, II*.&lt;br  /&gt;Max length: 30
   * @return suffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee name suffix. Common values are *Jr, Sr, II*.<br  />Max length: 30")

  public String getSuffix() {
    return suffix;
  }


  public void setSuffix(String suffix) {
    
    
    
    this.suffix = suffix;
  }


  public UpdateEmployee suiExempt(Boolean suiExempt) {
    
    
    
    
    this.suiExempt = suiExempt;
    return this;
  }

   /**
   * Indicates if employee is exempt from state unemployment insurance.
   * @return suiExempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if employee is exempt from state unemployment insurance.")

  public Boolean getSuiExempt() {
    return suiExempt;
  }


  public void setSuiExempt(Boolean suiExempt) {
    
    
    
    this.suiExempt = suiExempt;
  }


  public UpdateEmployee suiExemptNotes(String suiExemptNotes) {
    
    
    
    
    this.suiExemptNotes = suiExemptNotes;
    return this;
  }

   /**
   * Notes for SUI exempt.&lt;br  /&gt; Max length: 250
   * @return suiExemptNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Notes for SUI exempt.<br  /> Max length: 250")

  public String getSuiExemptNotes() {
    return suiExemptNotes;
  }


  public void setSuiExemptNotes(String suiExemptNotes) {
    
    
    
    this.suiExemptNotes = suiExemptNotes;
  }


  public UpdateEmployee suiExemptReason(String suiExemptReason) {
    
    
    
    
    this.suiExemptReason = suiExemptReason;
    return this;
  }

   /**
   * Reason code for SUI exemption. Common values are *SE* (Statutory employee), *CR* (Clergy/Religious). &lt;br  /&gt; Max length: 30
   * @return suiExemptReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reason code for SUI exemption. Common values are *SE* (Statutory employee), *CR* (Clergy/Religious). <br  /> Max length: 30")

  public String getSuiExemptReason() {
    return suiExemptReason;
  }


  public void setSuiExemptReason(String suiExemptReason) {
    
    
    
    this.suiExemptReason = suiExemptReason;
  }


  public UpdateEmployee veteran(String veteran) {
    
    
    
    
    this.veteran = veteran;
    return this;
  }

   /**
   * Indicates if employee is a veteran.
   * @return veteran
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if employee is a veteran.")

  public String getVeteran() {
    return veteran;
  }


  public void setVeteran(String veteran) {
    
    
    
    this.veteran = veteran;
  }


  public UpdateEmployee workAddress1(String workAddress1) {
    
    
    
    
    this.workAddress1 = workAddress1;
    return this;
  }

   /**
   * Employee work 1st address line.&lt;br  /&gt; Max length: 40
   * @return workAddress1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work 1st address line.<br  /> Max length: 40")

  public String getWorkAddress1() {
    return workAddress1;
  }


  public void setWorkAddress1(String workAddress1) {
    
    
    
    this.workAddress1 = workAddress1;
  }


  public UpdateEmployee workAddress2(String workAddress2) {
    
    
    
    
    this.workAddress2 = workAddress2;
    return this;
  }

   /**
   * Employee work 2nd address line. &lt;br  /&gt; Max length: 40
   * @return workAddress2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work 2nd address line. <br  /> Max length: 40")

  public String getWorkAddress2() {
    return workAddress2;
  }


  public void setWorkAddress2(String workAddress2) {
    
    
    
    this.workAddress2 = workAddress2;
  }


  public UpdateEmployee workCity(String workCity) {
    
    
    
    
    this.workCity = workCity;
    return this;
  }

   /**
   * Employee work city.&lt;br  /&gt; Max length: 40
   * @return workCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work city.<br  /> Max length: 40")

  public String getWorkCity() {
    return workCity;
  }


  public void setWorkCity(String workCity) {
    
    
    
    this.workCity = workCity;
  }


  public UpdateEmployee workCountry(String workCountry) {
    
    
    
    
    this.workCountry = workCountry;
    return this;
  }

   /**
   * Employee work country.&lt;br  /&gt; Max length: 30
   * @return workCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work country.<br  /> Max length: 30")

  public String getWorkCountry() {
    return workCountry;
  }


  public void setWorkCountry(String workCountry) {
    
    
    
    this.workCountry = workCountry;
  }


  public UpdateEmployee workCounty(String workCounty) {
    
    
    
    
    this.workCounty = workCounty;
    return this;
  }

   /**
   * Employee work county.&lt;br  /&gt; Max length: 30
   * @return workCounty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work county.<br  /> Max length: 30")

  public String getWorkCounty() {
    return workCounty;
  }


  public void setWorkCounty(String workCounty) {
    
    
    
    this.workCounty = workCounty;
  }


  public UpdateEmployee workEmailAddress(String workEmailAddress) {
    
    
    
    
    this.workEmailAddress = workEmailAddress;
    return this;
  }

   /**
   * Employee work email. &lt;br  /&gt;Max length: 50
   * @return workEmailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work email. <br  />Max length: 50")

  public String getWorkEmailAddress() {
    return workEmailAddress;
  }


  public void setWorkEmailAddress(String workEmailAddress) {
    
    
    
    this.workEmailAddress = workEmailAddress;
  }


  public UpdateEmployee workMailStop(String workMailStop) {
    
    
    
    
    this.workMailStop = workMailStop;
    return this;
  }

   /**
   * Employee physical mail box location.&lt;br  /&gt; Max length: 10
   * @return workMailStop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee physical mail box location.<br  /> Max length: 10")

  public String getWorkMailStop() {
    return workMailStop;
  }


  public void setWorkMailStop(String workMailStop) {
    
    
    
    this.workMailStop = workMailStop;
  }


  public UpdateEmployee workMobilePhone(String workMobilePhone) {
    
    
    
    
    this.workMobilePhone = workMobilePhone;
    return this;
  }

   /**
   * Employee work mobile phone number.&lt;br  /&gt; Max length: 12
   * @return workMobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work mobile phone number.<br  /> Max length: 12")

  public String getWorkMobilePhone() {
    return workMobilePhone;
  }


  public void setWorkMobilePhone(String workMobilePhone) {
    
    
    
    this.workMobilePhone = workMobilePhone;
  }


  public UpdateEmployee workPager(String workPager) {
    
    
    
    
    this.workPager = workPager;
    return this;
  }

   /**
   * Employee work pager number.&lt;br  /&gt; Max length: 20
   * @return workPager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work pager number.<br  /> Max length: 20")

  public String getWorkPager() {
    return workPager;
  }


  public void setWorkPager(String workPager) {
    
    
    
    this.workPager = workPager;
  }


  public UpdateEmployee workPhone(String workPhone) {
    
    
    
    
    this.workPhone = workPhone;
    return this;
  }

   /**
   * Employee work phone number.&lt;br  /&gt; Max length: 12
   * @return workPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work phone number.<br  /> Max length: 12")

  public String getWorkPhone() {
    return workPhone;
  }


  public void setWorkPhone(String workPhone) {
    
    
    
    this.workPhone = workPhone;
  }


  public UpdateEmployee workPhoneExt(String workPhoneExt) {
    
    
    
    
    this.workPhoneExt = workPhoneExt;
    return this;
  }

   /**
   * Employee work phone extension number.&lt;br  /&gt; Max length: 10
   * @return workPhoneExt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work phone extension number.<br  /> Max length: 10")

  public String getWorkPhoneExt() {
    return workPhoneExt;
  }


  public void setWorkPhoneExt(String workPhoneExt) {
    
    
    
    this.workPhoneExt = workPhoneExt;
  }


  public UpdateEmployee workState(String workState) {
    
    
    
    
    this.workState = workState;
    return this;
  }

   /**
   * Employee work state.&lt;br  /&gt; Max length: 2
   * @return workState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work state.<br  /> Max length: 2")

  public String getWorkState() {
    return workState;
  }


  public void setWorkState(String workState) {
    
    
    
    this.workState = workState;
  }


  public UpdateEmployee workZip(String workZip) {
    
    
    
    
    this.workZip = workZip;
    return this;
  }

   /**
   * Employee work zip code.&lt;br  /&gt; Max length: 10
   * @return workZip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work zip code.<br  /> Max length: 10")

  public String getWorkZip() {
    return workZip;
  }


  public void setWorkZip(String workZip) {
    
    
    
    this.workZip = workZip;
  }


  public UpdateEmployee zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * Employee home zip code. &lt;br  /&gt;Max length: 10
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home zip code. <br  />Max length: 10")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }


  public UpdateEmployee benefitSetup(List<BenefitSetup> benefitSetup) {
    
    
    
    
    this.benefitSetup = benefitSetup;
    return this;
  }

  public UpdateEmployee addBenefitSetupItem(BenefitSetup benefitSetupItem) {
    if (this.benefitSetup == null) {
      this.benefitSetup = new ArrayList<>();
    }
    this.benefitSetup.add(benefitSetupItem);
    return this;
  }

   /**
   * Get benefitSetup
   * @return benefitSetup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<BenefitSetup> getBenefitSetup() {
    return benefitSetup;
  }


  public void setBenefitSetup(List<BenefitSetup> benefitSetup) {
    
    
    
    this.benefitSetup = benefitSetup;
  }


  public UpdateEmployee departmentPosition(List<DepartmentPosition> departmentPosition) {
    
    
    
    
    this.departmentPosition = departmentPosition;
    return this;
  }

  public UpdateEmployee addDepartmentPositionItem(DepartmentPosition departmentPositionItem) {
    if (this.departmentPosition == null) {
      this.departmentPosition = new ArrayList<>();
    }
    this.departmentPosition.add(departmentPositionItem);
    return this;
  }

   /**
   * Get departmentPosition
   * @return departmentPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DepartmentPosition> getDepartmentPosition() {
    return departmentPosition;
  }


  public void setDepartmentPosition(List<DepartmentPosition> departmentPosition) {
    
    
    
    this.departmentPosition = departmentPosition;
  }


  public UpdateEmployee primaryPayRate(List<PrimaryPayRate> primaryPayRate) {
    
    
    
    
    this.primaryPayRate = primaryPayRate;
    return this;
  }

  public UpdateEmployee addPrimaryPayRateItem(PrimaryPayRate primaryPayRateItem) {
    if (this.primaryPayRate == null) {
      this.primaryPayRate = new ArrayList<>();
    }
    this.primaryPayRate.add(primaryPayRateItem);
    return this;
  }

   /**
   * Get primaryPayRate
   * @return primaryPayRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PrimaryPayRate> getPrimaryPayRate() {
    return primaryPayRate;
  }


  public void setPrimaryPayRate(List<PrimaryPayRate> primaryPayRate) {
    
    
    
    this.primaryPayRate = primaryPayRate;
  }


  public UpdateEmployee webTime(List<WebTime> webTime) {
    
    
    
    
    this.webTime = webTime;
    return this;
  }

  public UpdateEmployee addWebTimeItem(WebTime webTimeItem) {
    if (this.webTime == null) {
      this.webTime = new ArrayList<>();
    }
    this.webTime.add(webTimeItem);
    return this;
  }

   /**
   * Get webTime
   * @return webTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<WebTime> getWebTime() {
    return webTime;
  }


  public void setWebTime(List<WebTime> webTime) {
    
    
    
    this.webTime = webTime;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdateEmployee instance itself
   */
  public UpdateEmployee putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEmployee updateEmployee = (UpdateEmployee) o;
    return Objects.equals(this.address1, updateEmployee.address1) &&
        Objects.equals(this.address2, updateEmployee.address2) &&
        Objects.equals(this.adjSeniorityDate, updateEmployee.adjSeniorityDate) &&
        Objects.equals(this.birthDate, updateEmployee.birthDate) &&
        Objects.equals(this.city, updateEmployee.city) &&
        Objects.equals(this.companyNumber, updateEmployee.companyNumber) &&
        Objects.equals(this.country, updateEmployee.country) &&
        Objects.equals(this.county, updateEmployee.county) &&
        Objects.equals(this.disability, updateEmployee.disability) &&
        Objects.equals(this.eligibleForRehire, updateEmployee.eligibleForRehire) &&
        Objects.equals(this.employeeId, updateEmployee.employeeId) &&
        Objects.equals(this.employeeStatus, updateEmployee.employeeStatus) &&
        Objects.equals(this.empStatusChangeReason, updateEmployee.empStatusChangeReason) &&
        Objects.equals(this.empStatusEffectiveDate, updateEmployee.empStatusEffectiveDate) &&
        Objects.equals(this.ethnicity, updateEmployee.ethnicity) &&
        Objects.equals(this.firstName, updateEmployee.firstName) &&
        Objects.equals(this.homePhone, updateEmployee.homePhone) &&
        Objects.equals(this.lastName, updateEmployee.lastName) &&
        Objects.equals(this.maritalStatus, updateEmployee.maritalStatus) &&
        Objects.equals(this.middleName, updateEmployee.middleName) &&
        Objects.equals(this.nickname, updateEmployee.nickname) &&
        Objects.equals(this.pager, updateEmployee.pager) &&
        Objects.equals(this.personalEmailAddress, updateEmployee.personalEmailAddress) &&
        Objects.equals(this.personalMobilePhone, updateEmployee.personalMobilePhone) &&
        Objects.equals(this.priorLastName, updateEmployee.priorLastName) &&
        Objects.equals(this.salutation, updateEmployee.salutation) &&
        Objects.equals(this.sex, updateEmployee.sex) &&
        Objects.equals(this.smoker, updateEmployee.smoker) &&
        Objects.equals(this.ssn, updateEmployee.ssn) &&
        Objects.equals(this.state, updateEmployee.state) &&
        Objects.equals(this.suffix, updateEmployee.suffix) &&
        Objects.equals(this.suiExempt, updateEmployee.suiExempt) &&
        Objects.equals(this.suiExemptNotes, updateEmployee.suiExemptNotes) &&
        Objects.equals(this.suiExemptReason, updateEmployee.suiExemptReason) &&
        Objects.equals(this.veteran, updateEmployee.veteran) &&
        Objects.equals(this.workAddress1, updateEmployee.workAddress1) &&
        Objects.equals(this.workAddress2, updateEmployee.workAddress2) &&
        Objects.equals(this.workCity, updateEmployee.workCity) &&
        Objects.equals(this.workCountry, updateEmployee.workCountry) &&
        Objects.equals(this.workCounty, updateEmployee.workCounty) &&
        Objects.equals(this.workEmailAddress, updateEmployee.workEmailAddress) &&
        Objects.equals(this.workMailStop, updateEmployee.workMailStop) &&
        Objects.equals(this.workMobilePhone, updateEmployee.workMobilePhone) &&
        Objects.equals(this.workPager, updateEmployee.workPager) &&
        Objects.equals(this.workPhone, updateEmployee.workPhone) &&
        Objects.equals(this.workPhoneExt, updateEmployee.workPhoneExt) &&
        Objects.equals(this.workState, updateEmployee.workState) &&
        Objects.equals(this.workZip, updateEmployee.workZip) &&
        Objects.equals(this.zip, updateEmployee.zip) &&
        Objects.equals(this.benefitSetup, updateEmployee.benefitSetup) &&
        Objects.equals(this.departmentPosition, updateEmployee.departmentPosition) &&
        Objects.equals(this.primaryPayRate, updateEmployee.primaryPayRate) &&
        Objects.equals(this.webTime, updateEmployee.webTime)&&
        Objects.equals(this.additionalProperties, updateEmployee.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, adjSeniorityDate, birthDate, city, companyNumber, country, county, disability, eligibleForRehire, employeeId, employeeStatus, empStatusChangeReason, empStatusEffectiveDate, ethnicity, firstName, homePhone, lastName, maritalStatus, middleName, nickname, pager, personalEmailAddress, personalMobilePhone, priorLastName, salutation, sex, smoker, ssn, state, suffix, suiExempt, suiExemptNotes, suiExemptReason, veteran, workAddress1, workAddress2, workCity, workCountry, workCounty, workEmailAddress, workMailStop, workMobilePhone, workPager, workPhone, workPhoneExt, workState, workZip, zip, benefitSetup, departmentPosition, primaryPayRate, webTime, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEmployee {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    adjSeniorityDate: ").append(toIndentedString(adjSeniorityDate)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    companyNumber: ").append(toIndentedString(companyNumber)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    disability: ").append(toIndentedString(disability)).append("\n");
    sb.append("    eligibleForRehire: ").append(toIndentedString(eligibleForRehire)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    employeeStatus: ").append(toIndentedString(employeeStatus)).append("\n");
    sb.append("    empStatusChangeReason: ").append(toIndentedString(empStatusChangeReason)).append("\n");
    sb.append("    empStatusEffectiveDate: ").append(toIndentedString(empStatusEffectiveDate)).append("\n");
    sb.append("    ethnicity: ").append(toIndentedString(ethnicity)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    pager: ").append(toIndentedString(pager)).append("\n");
    sb.append("    personalEmailAddress: ").append(toIndentedString(personalEmailAddress)).append("\n");
    sb.append("    personalMobilePhone: ").append(toIndentedString(personalMobilePhone)).append("\n");
    sb.append("    priorLastName: ").append(toIndentedString(priorLastName)).append("\n");
    sb.append("    salutation: ").append(toIndentedString(salutation)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    smoker: ").append(toIndentedString(smoker)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    suiExempt: ").append(toIndentedString(suiExempt)).append("\n");
    sb.append("    suiExemptNotes: ").append(toIndentedString(suiExemptNotes)).append("\n");
    sb.append("    suiExemptReason: ").append(toIndentedString(suiExemptReason)).append("\n");
    sb.append("    veteran: ").append(toIndentedString(veteran)).append("\n");
    sb.append("    workAddress1: ").append(toIndentedString(workAddress1)).append("\n");
    sb.append("    workAddress2: ").append(toIndentedString(workAddress2)).append("\n");
    sb.append("    workCity: ").append(toIndentedString(workCity)).append("\n");
    sb.append("    workCountry: ").append(toIndentedString(workCountry)).append("\n");
    sb.append("    workCounty: ").append(toIndentedString(workCounty)).append("\n");
    sb.append("    workEmailAddress: ").append(toIndentedString(workEmailAddress)).append("\n");
    sb.append("    workMailStop: ").append(toIndentedString(workMailStop)).append("\n");
    sb.append("    workMobilePhone: ").append(toIndentedString(workMobilePhone)).append("\n");
    sb.append("    workPager: ").append(toIndentedString(workPager)).append("\n");
    sb.append("    workPhone: ").append(toIndentedString(workPhone)).append("\n");
    sb.append("    workPhoneExt: ").append(toIndentedString(workPhoneExt)).append("\n");
    sb.append("    workState: ").append(toIndentedString(workState)).append("\n");
    sb.append("    workZip: ").append(toIndentedString(workZip)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    benefitSetup: ").append(toIndentedString(benefitSetup)).append("\n");
    sb.append("    departmentPosition: ").append(toIndentedString(departmentPosition)).append("\n");
    sb.append("    primaryPayRate: ").append(toIndentedString(primaryPayRate)).append("\n");
    sb.append("    webTime: ").append(toIndentedString(webTime)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("adjSeniorityDate");
    openapiFields.add("birthDate");
    openapiFields.add("city");
    openapiFields.add("companyNumber");
    openapiFields.add("country");
    openapiFields.add("county");
    openapiFields.add("disability");
    openapiFields.add("eligibleForRehire");
    openapiFields.add("employeeId");
    openapiFields.add("employeeStatus");
    openapiFields.add("empStatusChangeReason");
    openapiFields.add("empStatusEffectiveDate");
    openapiFields.add("ethnicity");
    openapiFields.add("firstName");
    openapiFields.add("homePhone");
    openapiFields.add("lastName");
    openapiFields.add("maritalStatus");
    openapiFields.add("middleName");
    openapiFields.add("nickname");
    openapiFields.add("pager");
    openapiFields.add("personalEmailAddress");
    openapiFields.add("personalMobilePhone");
    openapiFields.add("priorLastName");
    openapiFields.add("salutation");
    openapiFields.add("sex");
    openapiFields.add("smoker");
    openapiFields.add("ssn");
    openapiFields.add("state");
    openapiFields.add("suffix");
    openapiFields.add("suiExempt");
    openapiFields.add("suiExemptNotes");
    openapiFields.add("suiExemptReason");
    openapiFields.add("veteran");
    openapiFields.add("workAddress1");
    openapiFields.add("workAddress2");
    openapiFields.add("workCity");
    openapiFields.add("workCountry");
    openapiFields.add("workCounty");
    openapiFields.add("workEmailAddress");
    openapiFields.add("workMailStop");
    openapiFields.add("workMobilePhone");
    openapiFields.add("workPager");
    openapiFields.add("workPhone");
    openapiFields.add("workPhoneExt");
    openapiFields.add("workState");
    openapiFields.add("workZip");
    openapiFields.add("zip");
    openapiFields.add("benefitSetup");
    openapiFields.add("departmentPosition");
    openapiFields.add("primaryPayRate");
    openapiFields.add("webTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateEmployee
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateEmployee.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEmployee is not found in the empty JSON string", UpdateEmployee.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("address1") != null && !jsonObj.get("address1").isJsonNull()) && !jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonNull()) && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("companyNumber") != null && !jsonObj.get("companyNumber").isJsonNull()) && !jsonObj.get("companyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyNumber").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if ((jsonObj.get("disability") != null && !jsonObj.get("disability").isJsonNull()) && !jsonObj.get("disability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disability").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("employeeStatus") != null && !jsonObj.get("employeeStatus").isJsonNull()) && !jsonObj.get("employeeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeStatus").toString()));
      }
      if ((jsonObj.get("empStatusChangeReason") != null && !jsonObj.get("empStatusChangeReason").isJsonNull()) && !jsonObj.get("empStatusChangeReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `empStatusChangeReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("empStatusChangeReason").toString()));
      }
      if ((jsonObj.get("empStatusEffectiveDate") != null && !jsonObj.get("empStatusEffectiveDate").isJsonNull()) && !jsonObj.get("empStatusEffectiveDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `empStatusEffectiveDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("empStatusEffectiveDate").toString()));
      }
      if ((jsonObj.get("ethnicity") != null && !jsonObj.get("ethnicity").isJsonNull()) && !jsonObj.get("ethnicity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethnicity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethnicity").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("homePhone") != null && !jsonObj.get("homePhone").isJsonNull()) && !jsonObj.get("homePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePhone").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("maritalStatus") != null && !jsonObj.get("maritalStatus").isJsonNull()) && !jsonObj.get("maritalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maritalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maritalStatus").toString()));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("pager") != null && !jsonObj.get("pager").isJsonNull()) && !jsonObj.get("pager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pager").toString()));
      }
      if ((jsonObj.get("personalEmailAddress") != null && !jsonObj.get("personalEmailAddress").isJsonNull()) && !jsonObj.get("personalEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalEmailAddress").toString()));
      }
      if ((jsonObj.get("personalMobilePhone") != null && !jsonObj.get("personalMobilePhone").isJsonNull()) && !jsonObj.get("personalMobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalMobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalMobilePhone").toString()));
      }
      if ((jsonObj.get("priorLastName") != null && !jsonObj.get("priorLastName").isJsonNull()) && !jsonObj.get("priorLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priorLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priorLastName").toString()));
      }
      if ((jsonObj.get("salutation") != null && !jsonObj.get("salutation").isJsonNull()) && !jsonObj.get("salutation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salutation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salutation").toString()));
      }
      if ((jsonObj.get("sex") != null && !jsonObj.get("sex").isJsonNull()) && !jsonObj.get("sex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sex").toString()));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) && !jsonObj.get("suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffix").toString()));
      }
      if ((jsonObj.get("suiExemptNotes") != null && !jsonObj.get("suiExemptNotes").isJsonNull()) && !jsonObj.get("suiExemptNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suiExemptNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suiExemptNotes").toString()));
      }
      if ((jsonObj.get("suiExemptReason") != null && !jsonObj.get("suiExemptReason").isJsonNull()) && !jsonObj.get("suiExemptReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suiExemptReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suiExemptReason").toString()));
      }
      if ((jsonObj.get("veteran") != null && !jsonObj.get("veteran").isJsonNull()) && !jsonObj.get("veteran").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `veteran` to be a primitive type in the JSON string but got `%s`", jsonObj.get("veteran").toString()));
      }
      if ((jsonObj.get("workAddress1") != null && !jsonObj.get("workAddress1").isJsonNull()) && !jsonObj.get("workAddress1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workAddress1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workAddress1").toString()));
      }
      if ((jsonObj.get("workAddress2") != null && !jsonObj.get("workAddress2").isJsonNull()) && !jsonObj.get("workAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workAddress2").toString()));
      }
      if ((jsonObj.get("workCity") != null && !jsonObj.get("workCity").isJsonNull()) && !jsonObj.get("workCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workCity").toString()));
      }
      if ((jsonObj.get("workCountry") != null && !jsonObj.get("workCountry").isJsonNull()) && !jsonObj.get("workCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workCountry").toString()));
      }
      if ((jsonObj.get("workCounty") != null && !jsonObj.get("workCounty").isJsonNull()) && !jsonObj.get("workCounty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workCounty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workCounty").toString()));
      }
      if ((jsonObj.get("workEmailAddress") != null && !jsonObj.get("workEmailAddress").isJsonNull()) && !jsonObj.get("workEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workEmailAddress").toString()));
      }
      if ((jsonObj.get("workMailStop") != null && !jsonObj.get("workMailStop").isJsonNull()) && !jsonObj.get("workMailStop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workMailStop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workMailStop").toString()));
      }
      if ((jsonObj.get("workMobilePhone") != null && !jsonObj.get("workMobilePhone").isJsonNull()) && !jsonObj.get("workMobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workMobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workMobilePhone").toString()));
      }
      if ((jsonObj.get("workPager") != null && !jsonObj.get("workPager").isJsonNull()) && !jsonObj.get("workPager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPager").toString()));
      }
      if ((jsonObj.get("workPhone") != null && !jsonObj.get("workPhone").isJsonNull()) && !jsonObj.get("workPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhone").toString()));
      }
      if ((jsonObj.get("workPhoneExt") != null && !jsonObj.get("workPhoneExt").isJsonNull()) && !jsonObj.get("workPhoneExt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhoneExt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhoneExt").toString()));
      }
      if ((jsonObj.get("workState") != null && !jsonObj.get("workState").isJsonNull()) && !jsonObj.get("workState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workState").toString()));
      }
      if ((jsonObj.get("workZip") != null && !jsonObj.get("workZip").isJsonNull()) && !jsonObj.get("workZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workZip").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if (jsonObj.get("benefitSetup") != null && !jsonObj.get("benefitSetup").isJsonNull()) {
        JsonArray jsonArraybenefitSetup = jsonObj.getAsJsonArray("benefitSetup");
        if (jsonArraybenefitSetup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("benefitSetup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `benefitSetup` to be an array in the JSON string but got `%s`", jsonObj.get("benefitSetup").toString()));
          }

          // validate the optional field `benefitSetup` (array)
          for (int i = 0; i < jsonArraybenefitSetup.size(); i++) {
            BenefitSetup.validateJsonObject(jsonArraybenefitSetup.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("departmentPosition") != null && !jsonObj.get("departmentPosition").isJsonNull()) {
        JsonArray jsonArraydepartmentPosition = jsonObj.getAsJsonArray("departmentPosition");
        if (jsonArraydepartmentPosition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("departmentPosition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `departmentPosition` to be an array in the JSON string but got `%s`", jsonObj.get("departmentPosition").toString()));
          }

          // validate the optional field `departmentPosition` (array)
          for (int i = 0; i < jsonArraydepartmentPosition.size(); i++) {
            DepartmentPosition.validateJsonObject(jsonArraydepartmentPosition.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("primaryPayRate") != null && !jsonObj.get("primaryPayRate").isJsonNull()) {
        JsonArray jsonArrayprimaryPayRate = jsonObj.getAsJsonArray("primaryPayRate");
        if (jsonArrayprimaryPayRate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("primaryPayRate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `primaryPayRate` to be an array in the JSON string but got `%s`", jsonObj.get("primaryPayRate").toString()));
          }

          // validate the optional field `primaryPayRate` (array)
          for (int i = 0; i < jsonArrayprimaryPayRate.size(); i++) {
            PrimaryPayRate.validateJsonObject(jsonArrayprimaryPayRate.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("webTime") != null && !jsonObj.get("webTime").isJsonNull()) {
        JsonArray jsonArraywebTime = jsonObj.getAsJsonArray("webTime");
        if (jsonArraywebTime != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webTime").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webTime` to be an array in the JSON string but got `%s`", jsonObj.get("webTime").toString()));
          }

          // validate the optional field `webTime` (array)
          for (int i = 0; i < jsonArraywebTime.size(); i++) {
            WebTime.validateJsonObject(jsonArraywebTime.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEmployee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEmployee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEmployee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEmployee.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEmployee>() {
           @Override
           public void write(JsonWriter out, UpdateEmployee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEmployee read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UpdateEmployee instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateEmployee given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateEmployee
  * @throws IOException if the JSON string is invalid with respect to UpdateEmployee
  */
  public static UpdateEmployee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEmployee.class);
  }

 /**
  * Convert an instance of UpdateEmployee to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

