/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Department Position
 */
@ApiModel(description = "Department Position")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeV1DepartmentPosition {
  public static final String SERIALIZED_NAME_COST_CENTER1 = "costCenter1";
  @SerializedName(SERIALIZED_NAME_COST_CENTER1)
  private String costCenter1;

  public static final String SERIALIZED_NAME_COST_CENTER2 = "costCenter2";
  @SerializedName(SERIALIZED_NAME_COST_CENTER2)
  private String costCenter2;

  public static final String SERIALIZED_NAME_COST_CENTER3 = "costCenter3";
  @SerializedName(SERIALIZED_NAME_COST_CENTER3)
  private String costCenter3;

  public static final String SERIALIZED_NAME_EMPLOYEE_TYPE = "employeeType";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_TYPE)
  private String employeeType;

  public static final String SERIALIZED_NAME_EQUAL_EMPLOYMENT_OPPORTUNITY_CLASS = "equalEmploymentOpportunityClass";
  @SerializedName(SERIALIZED_NAME_EQUAL_EMPLOYMENT_OPPORTUNITY_CLASS)
  private String equalEmploymentOpportunityClass;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_PAY_GROUP = "payGroup";
  @SerializedName(SERIALIZED_NAME_PAY_GROUP)
  private String payGroup;

  public EmployeeV1DepartmentPosition() {
  }

  public EmployeeV1DepartmentPosition costCenter1(String costCenter1) {
    
    
    
    
    this.costCenter1 = costCenter1;
    return this;
  }

   /**
   * Employer defined location, like *branch, division, department*, etc. Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return costCenter1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10")

  public String getCostCenter1() {
    return costCenter1;
  }


  public void setCostCenter1(String costCenter1) {
    
    
    
    this.costCenter1 = costCenter1;
  }


  public EmployeeV1DepartmentPosition costCenter2(String costCenter2) {
    
    
    
    
    this.costCenter2 = costCenter2;
    return this;
  }

   /**
   * Employer defined location, like *branch, division, department*, etc. Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return costCenter2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10")

  public String getCostCenter2() {
    return costCenter2;
  }


  public void setCostCenter2(String costCenter2) {
    
    
    
    this.costCenter2 = costCenter2;
  }


  public EmployeeV1DepartmentPosition costCenter3(String costCenter3) {
    
    
    
    
    this.costCenter3 = costCenter3;
    return this;
  }

   /**
   * Employer defined location, like *branch, division, department*, etc. Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return costCenter3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employer defined location, like *branch, division, department*, etc. Must match Company setup. <br  />Max length: 10")

  public String getCostCenter3() {
    return costCenter3;
  }


  public void setCostCenter3(String costCenter3) {
    
    
    
    this.costCenter3 = costCenter3;
  }


  public EmployeeV1DepartmentPosition employeeType(String employeeType) {
    
    
    
    
    this.employeeType = employeeType;
    return this;
  }

   /**
   * Employee current employment type. Common values *RFT (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. &lt;br  /&gt;Max length: 10
   * @return employeeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current employment type. Common values *RFT (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. <br  />Max length: 10")

  public String getEmployeeType() {
    return employeeType;
  }


  public void setEmployeeType(String employeeType) {
    
    
    
    this.employeeType = employeeType;
  }


  public EmployeeV1DepartmentPosition equalEmploymentOpportunityClass(String equalEmploymentOpportunityClass) {
    
    
    
    
    this.equalEmploymentOpportunityClass = equalEmploymentOpportunityClass;
    return this;
  }

   /**
   * Values are configured in Company &gt; Setup &gt; HR &gt; EEO Classes.&lt;br  /&gt; Max length: 10
   * @return equalEmploymentOpportunityClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Values are configured in Company > Setup > HR > EEO Classes.<br  /> Max length: 10")

  public String getEqualEmploymentOpportunityClass() {
    return equalEmploymentOpportunityClass;
  }


  public void setEqualEmploymentOpportunityClass(String equalEmploymentOpportunityClass) {
    
    
    
    this.equalEmploymentOpportunityClass = equalEmploymentOpportunityClass;
  }


  public EmployeeV1DepartmentPosition jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Employee current job title. &lt;br  /&gt;Max length: 50
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current job title. <br  />Max length: 50")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public EmployeeV1DepartmentPosition payGroup(String payGroup) {
    
    
    
    
    this.payGroup = payGroup;
    return this;
  }

   /**
   * Employee pay group. Must match Company setup. &lt;br  /&gt; Max length: 20
   * @return payGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee pay group. Must match Company setup. <br  /> Max length: 20")

  public String getPayGroup() {
    return payGroup;
  }


  public void setPayGroup(String payGroup) {
    
    
    
    this.payGroup = payGroup;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeV1DepartmentPosition instance itself
   */
  public EmployeeV1DepartmentPosition putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeV1DepartmentPosition employeeV1DepartmentPosition = (EmployeeV1DepartmentPosition) o;
    return Objects.equals(this.costCenter1, employeeV1DepartmentPosition.costCenter1) &&
        Objects.equals(this.costCenter2, employeeV1DepartmentPosition.costCenter2) &&
        Objects.equals(this.costCenter3, employeeV1DepartmentPosition.costCenter3) &&
        Objects.equals(this.employeeType, employeeV1DepartmentPosition.employeeType) &&
        Objects.equals(this.equalEmploymentOpportunityClass, employeeV1DepartmentPosition.equalEmploymentOpportunityClass) &&
        Objects.equals(this.jobTitle, employeeV1DepartmentPosition.jobTitle) &&
        Objects.equals(this.payGroup, employeeV1DepartmentPosition.payGroup)&&
        Objects.equals(this.additionalProperties, employeeV1DepartmentPosition.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costCenter1, costCenter2, costCenter3, employeeType, equalEmploymentOpportunityClass, jobTitle, payGroup, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeV1DepartmentPosition {\n");
    sb.append("    costCenter1: ").append(toIndentedString(costCenter1)).append("\n");
    sb.append("    costCenter2: ").append(toIndentedString(costCenter2)).append("\n");
    sb.append("    costCenter3: ").append(toIndentedString(costCenter3)).append("\n");
    sb.append("    employeeType: ").append(toIndentedString(employeeType)).append("\n");
    sb.append("    equalEmploymentOpportunityClass: ").append(toIndentedString(equalEmploymentOpportunityClass)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    payGroup: ").append(toIndentedString(payGroup)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costCenter1");
    openapiFields.add("costCenter2");
    openapiFields.add("costCenter3");
    openapiFields.add("employeeType");
    openapiFields.add("equalEmploymentOpportunityClass");
    openapiFields.add("jobTitle");
    openapiFields.add("payGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeV1DepartmentPosition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeV1DepartmentPosition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeV1DepartmentPosition is not found in the empty JSON string", EmployeeV1DepartmentPosition.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("costCenter1") != null && !jsonObj.get("costCenter1").isJsonNull()) && !jsonObj.get("costCenter1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter1").toString()));
      }
      if ((jsonObj.get("costCenter2") != null && !jsonObj.get("costCenter2").isJsonNull()) && !jsonObj.get("costCenter2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter2").toString()));
      }
      if ((jsonObj.get("costCenter3") != null && !jsonObj.get("costCenter3").isJsonNull()) && !jsonObj.get("costCenter3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter3").toString()));
      }
      if ((jsonObj.get("employeeType") != null && !jsonObj.get("employeeType").isJsonNull()) && !jsonObj.get("employeeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeType").toString()));
      }
      if ((jsonObj.get("equalEmploymentOpportunityClass") != null && !jsonObj.get("equalEmploymentOpportunityClass").isJsonNull()) && !jsonObj.get("equalEmploymentOpportunityClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `equalEmploymentOpportunityClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("equalEmploymentOpportunityClass").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if ((jsonObj.get("payGroup") != null && !jsonObj.get("payGroup").isJsonNull()) && !jsonObj.get("payGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payGroup").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeV1DepartmentPosition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeV1DepartmentPosition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeV1DepartmentPosition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeV1DepartmentPosition.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeV1DepartmentPosition>() {
           @Override
           public void write(JsonWriter out, EmployeeV1DepartmentPosition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeV1DepartmentPosition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeV1DepartmentPosition instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeV1DepartmentPosition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeV1DepartmentPosition
  * @throws IOException if the JSON string is invalid with respect to EmployeeV1DepartmentPosition
  */
  public static EmployeeV1DepartmentPosition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeV1DepartmentPosition.class);
  }

 /**
  * Convert an instance of EmployeeV1DepartmentPosition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

