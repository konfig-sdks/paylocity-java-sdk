/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Onboarding
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Onboarding {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_AUTO_PAY_TYPE = "autoPayType";
  @SerializedName(SERIALIZED_NAME_AUTO_PAY_TYPE)
  private String autoPayType;

  public static final String SERIALIZED_NAME_BASE_RATE = "baseRate";
  @SerializedName(SERIALIZED_NAME_BASE_RATE)
  private Double baseRate;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COST_CENTER1 = "costCenter1";
  @SerializedName(SERIALIZED_NAME_COST_CENTER1)
  private String costCenter1;

  public static final String SERIALIZED_NAME_COST_CENTER2 = "costCenter2";
  @SerializedName(SERIALIZED_NAME_COST_CENTER2)
  private String costCenter2;

  public static final String SERIALIZED_NAME_COST_CENTER3 = "costCenter3";
  @SerializedName(SERIALIZED_NAME_COST_CENTER3)
  private String costCenter3;

  public static final String SERIALIZED_NAME_DEFAULT_HOURS = "defaultHours";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HOURS)
  private Double defaultHours;

  public static final String SERIALIZED_NAME_EMPLOYEE_STATUS = "employeeStatus";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_STATUS)
  private String employeeStatus;

  public static final String SERIALIZED_NAME_EMPLOYMENT_TYPE = "employmentType";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TYPE)
  private String employmentType;

  public static final String SERIALIZED_NAME_FEDERAL_FILING_STATUS = "federalFilingStatus";
  @SerializedName(SERIALIZED_NAME_FEDERAL_FILING_STATUS)
  private String federalFilingStatus;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_SEX = "sex";
  @SerializedName(SERIALIZED_NAME_SEX)
  private String sex;

  public static final String SERIALIZED_NAME_HIRE_DATE = "hireDate";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private String hireDate;

  public static final String SERIALIZED_NAME_HOME_PHONE = "homePhone";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE)
  private String homePhone;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "maritalStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private String maritalStatus;

  public static final String SERIALIZED_NAME_PERSONAL_MOBILE_PHONE = "personalMobilePhone";
  @SerializedName(SERIALIZED_NAME_PERSONAL_MOBILE_PHONE)
  private String personalMobilePhone;

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "payFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private String payFrequency;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL_ADDRESS = "personalEmailAddress";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL_ADDRESS)
  private String personalEmailAddress;

  public static final String SERIALIZED_NAME_PAY_TYPE = "payType";
  @SerializedName(SERIALIZED_NAME_PAY_TYPE)
  private String payType;

  public static final String SERIALIZED_NAME_RATE_PER = "ratePer";
  @SerializedName(SERIALIZED_NAME_RATE_PER)
  private String ratePer;

  public static final String SERIALIZED_NAME_SALARY = "salary";
  @SerializedName(SERIALIZED_NAME_SALARY)
  private Double salary;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SSN = "ssn";
  @SerializedName(SERIALIZED_NAME_SSN)
  private String ssn;

  public static final String SERIALIZED_NAME_STATE_FILING_STATUS = "stateFilingStatus";
  @SerializedName(SERIALIZED_NAME_STATE_FILING_STATUS)
  private String stateFilingStatus;

  public static final String SERIALIZED_NAME_SUI_STATE = "suiState";
  @SerializedName(SERIALIZED_NAME_SUI_STATE)
  private String suiState;

  public static final String SERIALIZED_NAME_TAX_FORM = "taxForm";
  @SerializedName(SERIALIZED_NAME_TAX_FORM)
  private String taxForm;

  public static final String SERIALIZED_NAME_TAX_STATE = "taxState";
  @SerializedName(SERIALIZED_NAME_TAX_STATE)
  private String taxState;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_WORK_EMAIL_ADDRESS = "workEmailAddress";
  @SerializedName(SERIALIZED_NAME_WORK_EMAIL_ADDRESS)
  private String workEmailAddress;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public Onboarding() {
  }

  public Onboarding employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * (optional) The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(optional) The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public Onboarding address1(String address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * Employee home 1st address line. &lt;br  /&gt;Max length: 40
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home 1st address line. <br  />Max length: 40")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    
    this.address1 = address1;
  }


  public Onboarding address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * Employee home 2nd address line. &lt;br  /&gt;Max length: 40
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home 2nd address line. <br  />Max length: 40")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public Onboarding autoPayType(String autoPayType) {
    
    
    
    
    this.autoPayType = autoPayType;
    return this;
  }

   /**
   * Valid values are *N, D, S. (N- employee won&#39;t automatically receive a salary or hours during payroll, D - employee will be automatically paid in defaultHours during payroll, S - employee will be automatically paid Salary amount during payroll)*. &lt;br  /&gt;Max length: 3
   * @return autoPayType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Valid values are *N, D, S. (N- employee won't automatically receive a salary or hours during payroll, D - employee will be automatically paid in defaultHours during payroll, S - employee will be automatically paid Salary amount during payroll)*. <br  />Max length: 3")

  public String getAutoPayType() {
    return autoPayType;
  }


  public void setAutoPayType(String autoPayType) {
    
    
    
    this.autoPayType = autoPayType;
  }


  public Onboarding baseRate(Double baseRate) {
    
    
    
    
    this.baseRate = baseRate;
    return this;
  }

  public Onboarding baseRate(Integer baseRate) {
    
    
    
    
    this.baseRate = baseRate.doubleValue();
    return this;
  }

   /**
   * Employee base rate, used for Hourly employees. &lt;br  /&gt;Decimal (12,2)
   * @return baseRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee base rate, used for Hourly employees. <br  />Decimal (12,2)")

  public Double getBaseRate() {
    return baseRate;
  }


  public void setBaseRate(Double baseRate) {
    
    
    
    this.baseRate = baseRate;
  }


  public Onboarding city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Employee home city. &lt;br  /&gt;Max length: 40
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home city. <br  />Max length: 40")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public Onboarding costCenter1(String costCenter1) {
    
    
    
    
    this.costCenter1 = costCenter1;
    return this;
  }

   /**
   * Employer defined location, like *branch, division, department, etc.* Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return costCenter1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employer defined location, like *branch, division, department, etc.* Must match Company setup. <br  />Max length: 10")

  public String getCostCenter1() {
    return costCenter1;
  }


  public void setCostCenter1(String costCenter1) {
    
    
    
    this.costCenter1 = costCenter1;
  }


  public Onboarding costCenter2(String costCenter2) {
    
    
    
    
    this.costCenter2 = costCenter2;
    return this;
  }

   /**
   * Employer defined location, like *branch, division, department, etc.* Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return costCenter2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employer defined location, like *branch, division, department, etc.* Must match Company setup. <br  />Max length: 10")

  public String getCostCenter2() {
    return costCenter2;
  }


  public void setCostCenter2(String costCenter2) {
    
    
    
    this.costCenter2 = costCenter2;
  }


  public Onboarding costCenter3(String costCenter3) {
    
    
    
    
    this.costCenter3 = costCenter3;
    return this;
  }

   /**
   * Employer defined location, like *branch, division, department, etc.* Must match Company setup. &lt;br  /&gt;Max length: 10
   * @return costCenter3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employer defined location, like *branch, division, department, etc.* Must match Company setup. <br  />Max length: 10")

  public String getCostCenter3() {
    return costCenter3;
  }


  public void setCostCenter3(String costCenter3) {
    
    
    
    this.costCenter3 = costCenter3;
  }


  public Onboarding defaultHours(Double defaultHours) {
    
    
    
    
    this.defaultHours = defaultHours;
    return this;
  }

  public Onboarding defaultHours(Integer defaultHours) {
    
    
    
    
    this.defaultHours = defaultHours.doubleValue();
    return this;
  }

   /**
   * Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. &lt;br  /&gt;Decimal (12,2)
   * @return defaultHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. <br  />Decimal (12,2)")

  public Double getDefaultHours() {
    return defaultHours;
  }


  public void setDefaultHours(Double defaultHours) {
    
    
    
    this.defaultHours = defaultHours;
  }


  public Onboarding employeeStatus(String employeeStatus) {
    
    
    
    
    this.employeeStatus = employeeStatus;
    return this;
  }

   /**
   * Employee current work status. Common values are *A (Active), L (Leave of Absence), T (Terminated)*. &lt;br  /&gt;Max length: 20
   * @return employeeStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current work status. Common values are *A (Active), L (Leave of Absence), T (Terminated)*. <br  />Max length: 20")

  public String getEmployeeStatus() {
    return employeeStatus;
  }


  public void setEmployeeStatus(String employeeStatus) {
    
    
    
    this.employeeStatus = employeeStatus;
  }


  public Onboarding employmentType(String employmentType) {
    
    
    
    
    this.employmentType = employmentType;
    return this;
  }

   /**
   * Employee current employment type. Common values RFT *(Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. &lt;br  /&gt;Max length: 10
   * @return employmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current employment type. Common values RFT *(Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*. <br  />Max length: 10")

  public String getEmploymentType() {
    return employmentType;
  }


  public void setEmploymentType(String employmentType) {
    
    
    
    this.employmentType = employmentType;
  }


  public Onboarding federalFilingStatus(String federalFilingStatus) {
    
    
    
    
    this.federalFilingStatus = federalFilingStatus;
    return this;
  }

   /**
   * Employee federal filing status. Common values *M (Married), S (Single)*. &lt;br  /&gt;Max length: 10
   * @return federalFilingStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee federal filing status. Common values *M (Married), S (Single)*. <br  />Max length: 10")

  public String getFederalFilingStatus() {
    return federalFilingStatus;
  }


  public void setFederalFilingStatus(String federalFilingStatus) {
    
    
    
    this.federalFilingStatus = federalFilingStatus;
  }


  public Onboarding firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Employee first name. &lt;br  /&gt;Max length: 40
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee first name. <br  />Max length: 40")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public Onboarding sex(String sex) {
    
    
    
    
    this.sex = sex;
    return this;
  }

   /**
   * Employee gender. Common values *M (Male), F (Female)*. &lt;br  /&gt;Max length: 1
   * @return sex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee gender. Common values *M (Male), F (Female)*. <br  />Max length: 1")

  public String getSex() {
    return sex;
  }


  public void setSex(String sex) {
    
    
    
    this.sex = sex;
  }


  public Onboarding hireDate(String hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * Employee hired date. Common formats are MM-DD-CCYY, CCYY-MM-DD
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee hired date. Common formats are MM-DD-CCYY, CCYY-MM-DD")

  public String getHireDate() {
    return hireDate;
  }


  public void setHireDate(String hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


  public Onboarding homePhone(String homePhone) {
    
    
    
    
    this.homePhone = homePhone;
    return this;
  }

   /**
   * Employee home phone number. &lt;br  /&gt;Max length: 12
   * @return homePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home phone number. <br  />Max length: 12")

  public String getHomePhone() {
    return homePhone;
  }


  public void setHomePhone(String homePhone) {
    
    
    
    this.homePhone = homePhone;
  }


  public Onboarding lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Employee last name. &lt;br  /&gt;Max length: 40
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee last name. <br  />Max length: 40")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public Onboarding maritalStatus(String maritalStatus) {
    
    
    
    
    this.maritalStatus = maritalStatus;
    return this;
  }

   /**
   * Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. &lt;br  /&gt;Max length: 10
   * @return maritalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10")

  public String getMaritalStatus() {
    return maritalStatus;
  }


  public void setMaritalStatus(String maritalStatus) {
    
    
    
    this.maritalStatus = maritalStatus;
  }


  public Onboarding personalMobilePhone(String personalMobilePhone) {
    
    
    
    
    this.personalMobilePhone = personalMobilePhone;
    return this;
  }

   /**
   * Employee personal mobile phone number. &lt;br  /&gt;Max length: 12
   * @return personalMobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee personal mobile phone number. <br  />Max length: 12")

  public String getPersonalMobilePhone() {
    return personalMobilePhone;
  }


  public void setPersonalMobilePhone(String personalMobilePhone) {
    
    
    
    this.personalMobilePhone = personalMobilePhone;
  }


  public Onboarding payFrequency(String payFrequency) {
    
    
    
    
    this.payFrequency = payFrequency;
    return this;
  }

   /**
   * Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. &lt;br  /&gt;Max length: 5
   * @return payFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. <br  />Max length: 5")

  public String getPayFrequency() {
    return payFrequency;
  }


  public void setPayFrequency(String payFrequency) {
    
    
    
    this.payFrequency = payFrequency;
  }


  public Onboarding personalEmailAddress(String personalEmailAddress) {
    
    
    
    
    this.personalEmailAddress = personalEmailAddress;
    return this;
  }

   /**
   * Employee personal email address. &lt;br  /&gt;Max length: 50
   * @return personalEmailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee personal email address. <br  />Max length: 50")

  public String getPersonalEmailAddress() {
    return personalEmailAddress;
  }


  public void setPersonalEmailAddress(String personalEmailAddress) {
    
    
    
    this.personalEmailAddress = personalEmailAddress;
  }


  public Onboarding payType(String payType) {
    
    
    
    
    this.payType = payType;
    return this;
  }

   /**
   * Employee pay type. Valid values are *Hourly or Salary*. &lt;br  /&gt;Max length: 10
   * @return payType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee pay type. Valid values are *Hourly or Salary*. <br  />Max length: 10")

  public String getPayType() {
    return payType;
  }


  public void setPayType(String payType) {
    
    
    
    this.payType = payType;
  }


  public Onboarding ratePer(String ratePer) {
    
    
    
    
    this.ratePer = ratePer;
    return this;
  }

   /**
   * Employee base rate frequency used with payType Hourly. Common values are *Hour or Week*. Default is Hour &lt;br  /&gt;Max length: 10
   * @return ratePer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee base rate frequency used with payType Hourly. Common values are *Hour or Week*. Default is Hour <br  />Max length: 10")

  public String getRatePer() {
    return ratePer;
  }


  public void setRatePer(String ratePer) {
    
    
    
    this.ratePer = ratePer;
  }


  public Onboarding salary(Double salary) {
    
    
    
    
    this.salary = salary;
    return this;
  }

  public Onboarding salary(Integer salary) {
    
    
    
    
    this.salary = salary.doubleValue();
    return this;
  }

   /**
   * Employee gross salary per pay period used with payType Salary. &lt;br  /&gt;Decimal (12,2)
   * @return salary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee gross salary per pay period used with payType Salary. <br  />Decimal (12,2)")

  public Double getSalary() {
    return salary;
  }


  public void setSalary(Double salary) {
    
    
    
    this.salary = salary;
  }


  public Onboarding state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Employee home state. &lt;br  /&gt;Max length: 2
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home state. <br  />Max length: 2")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public Onboarding ssn(String ssn) {
    
    
    
    
    this.ssn = ssn;
    return this;
  }

   /**
   * Employee social security number. Leave it blank if valid social security number not available. &lt;br  /&gt;Max length: 11
   * @return ssn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11")

  public String getSsn() {
    return ssn;
  }


  public void setSsn(String ssn) {
    
    
    
    this.ssn = ssn;
  }


  public Onboarding stateFilingStatus(String stateFilingStatus) {
    
    
    
    
    this.stateFilingStatus = stateFilingStatus;
    return this;
  }

   /**
   * Employee state filing status. Common values are *M (Married), S (Single)*. &lt;br  /&gt;Max length: 50
   * @return stateFilingStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee state filing status. Common values are *M (Married), S (Single)*. <br  />Max length: 50")

  public String getStateFilingStatus() {
    return stateFilingStatus;
  }


  public void setStateFilingStatus(String stateFilingStatus) {
    
    
    
    this.stateFilingStatus = stateFilingStatus;
  }


  public Onboarding suiState(String suiState) {
    
    
    
    
    this.suiState = suiState;
    return this;
  }

   /**
   * Employee SUI (State Unemployment Insurance) state. &lt;br  /&gt;Max length: 2
   * @return suiState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee SUI (State Unemployment Insurance) state. <br  />Max length: 2")

  public String getSuiState() {
    return suiState;
  }


  public void setSuiState(String suiState) {
    
    
    
    this.suiState = suiState;
  }


  public Onboarding taxForm(String taxForm) {
    
    
    
    
    this.taxForm = taxForm;
    return this;
  }

   /**
   * Employee tax form for reporting income. Valid values are *W2, 1099M, 1099R*. Default is W2. &lt;br  /&gt;Max length: 15
   * @return taxForm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee tax form for reporting income. Valid values are *W2, 1099M, 1099R*. Default is W2. <br  />Max length: 15")

  public String getTaxForm() {
    return taxForm;
  }


  public void setTaxForm(String taxForm) {
    
    
    
    this.taxForm = taxForm;
  }


  public Onboarding taxState(String taxState) {
    
    
    
    
    this.taxState = taxState;
    return this;
  }

   /**
   * Employee primary tax state. &lt;br  /&gt;Max Length: 2
   * @return taxState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee primary tax state. <br  />Max Length: 2")

  public String getTaxState() {
    return taxState;
  }


  public void setTaxState(String taxState) {
    
    
    
    this.taxState = taxState;
  }


  public Onboarding userName(String userName) {
    
    
    
    
    this.userName = userName;
    return this;
  }

   /**
   * Required. Employer assigned username to log into Onboarding. Duplicate usernames are not allowed. &lt;br  /&gt;Must be between 3 and 20 characters and cannot have special characters other than . (period) and _ (underscore)
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required. Employer assigned username to log into Onboarding. Duplicate usernames are not allowed. <br  />Must be between 3 and 20 characters and cannot have special characters other than . (period) and _ (underscore)")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    
    
    
    this.userName = userName;
  }


  public Onboarding workEmailAddress(String workEmailAddress) {
    
    
    
    
    this.workEmailAddress = workEmailAddress;
    return this;
  }

   /**
   * Employee work email. &lt;br  /&gt;Max length: 50
   * @return workEmailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee work email. <br  />Max length: 50")

  public String getWorkEmailAddress() {
    return workEmailAddress;
  }


  public void setWorkEmailAddress(String workEmailAddress) {
    
    
    
    this.workEmailAddress = workEmailAddress;
  }


  public Onboarding zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * Employee home zip code. &lt;br  /&gt;Max length: 10
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee home zip code. <br  />Max length: 10")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Onboarding instance itself
   */
  public Onboarding putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Onboarding onboarding = (Onboarding) o;
    return Objects.equals(this.employeeId, onboarding.employeeId) &&
        Objects.equals(this.address1, onboarding.address1) &&
        Objects.equals(this.address2, onboarding.address2) &&
        Objects.equals(this.autoPayType, onboarding.autoPayType) &&
        Objects.equals(this.baseRate, onboarding.baseRate) &&
        Objects.equals(this.city, onboarding.city) &&
        Objects.equals(this.costCenter1, onboarding.costCenter1) &&
        Objects.equals(this.costCenter2, onboarding.costCenter2) &&
        Objects.equals(this.costCenter3, onboarding.costCenter3) &&
        Objects.equals(this.defaultHours, onboarding.defaultHours) &&
        Objects.equals(this.employeeStatus, onboarding.employeeStatus) &&
        Objects.equals(this.employmentType, onboarding.employmentType) &&
        Objects.equals(this.federalFilingStatus, onboarding.federalFilingStatus) &&
        Objects.equals(this.firstName, onboarding.firstName) &&
        Objects.equals(this.sex, onboarding.sex) &&
        Objects.equals(this.hireDate, onboarding.hireDate) &&
        Objects.equals(this.homePhone, onboarding.homePhone) &&
        Objects.equals(this.lastName, onboarding.lastName) &&
        Objects.equals(this.maritalStatus, onboarding.maritalStatus) &&
        Objects.equals(this.personalMobilePhone, onboarding.personalMobilePhone) &&
        Objects.equals(this.payFrequency, onboarding.payFrequency) &&
        Objects.equals(this.personalEmailAddress, onboarding.personalEmailAddress) &&
        Objects.equals(this.payType, onboarding.payType) &&
        Objects.equals(this.ratePer, onboarding.ratePer) &&
        Objects.equals(this.salary, onboarding.salary) &&
        Objects.equals(this.state, onboarding.state) &&
        Objects.equals(this.ssn, onboarding.ssn) &&
        Objects.equals(this.stateFilingStatus, onboarding.stateFilingStatus) &&
        Objects.equals(this.suiState, onboarding.suiState) &&
        Objects.equals(this.taxForm, onboarding.taxForm) &&
        Objects.equals(this.taxState, onboarding.taxState) &&
        Objects.equals(this.userName, onboarding.userName) &&
        Objects.equals(this.workEmailAddress, onboarding.workEmailAddress) &&
        Objects.equals(this.zip, onboarding.zip)&&
        Objects.equals(this.additionalProperties, onboarding.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, address1, address2, autoPayType, baseRate, city, costCenter1, costCenter2, costCenter3, defaultHours, employeeStatus, employmentType, federalFilingStatus, firstName, sex, hireDate, homePhone, lastName, maritalStatus, personalMobilePhone, payFrequency, personalEmailAddress, payType, ratePer, salary, state, ssn, stateFilingStatus, suiState, taxForm, taxState, userName, workEmailAddress, zip, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Onboarding {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    autoPayType: ").append(toIndentedString(autoPayType)).append("\n");
    sb.append("    baseRate: ").append(toIndentedString(baseRate)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    costCenter1: ").append(toIndentedString(costCenter1)).append("\n");
    sb.append("    costCenter2: ").append(toIndentedString(costCenter2)).append("\n");
    sb.append("    costCenter3: ").append(toIndentedString(costCenter3)).append("\n");
    sb.append("    defaultHours: ").append(toIndentedString(defaultHours)).append("\n");
    sb.append("    employeeStatus: ").append(toIndentedString(employeeStatus)).append("\n");
    sb.append("    employmentType: ").append(toIndentedString(employmentType)).append("\n");
    sb.append("    federalFilingStatus: ").append(toIndentedString(federalFilingStatus)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    personalMobilePhone: ").append(toIndentedString(personalMobilePhone)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    personalEmailAddress: ").append(toIndentedString(personalEmailAddress)).append("\n");
    sb.append("    payType: ").append(toIndentedString(payType)).append("\n");
    sb.append("    ratePer: ").append(toIndentedString(ratePer)).append("\n");
    sb.append("    salary: ").append(toIndentedString(salary)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    ssn: ").append(toIndentedString(ssn)).append("\n");
    sb.append("    stateFilingStatus: ").append(toIndentedString(stateFilingStatus)).append("\n");
    sb.append("    suiState: ").append(toIndentedString(suiState)).append("\n");
    sb.append("    taxForm: ").append(toIndentedString(taxForm)).append("\n");
    sb.append("    taxState: ").append(toIndentedString(taxState)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    workEmailAddress: ").append(toIndentedString(workEmailAddress)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeId");
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("autoPayType");
    openapiFields.add("baseRate");
    openapiFields.add("city");
    openapiFields.add("costCenter1");
    openapiFields.add("costCenter2");
    openapiFields.add("costCenter3");
    openapiFields.add("defaultHours");
    openapiFields.add("employeeStatus");
    openapiFields.add("employmentType");
    openapiFields.add("federalFilingStatus");
    openapiFields.add("firstName");
    openapiFields.add("sex");
    openapiFields.add("hireDate");
    openapiFields.add("homePhone");
    openapiFields.add("lastName");
    openapiFields.add("maritalStatus");
    openapiFields.add("personalMobilePhone");
    openapiFields.add("payFrequency");
    openapiFields.add("personalEmailAddress");
    openapiFields.add("payType");
    openapiFields.add("ratePer");
    openapiFields.add("salary");
    openapiFields.add("state");
    openapiFields.add("ssn");
    openapiFields.add("stateFilingStatus");
    openapiFields.add("suiState");
    openapiFields.add("taxForm");
    openapiFields.add("taxState");
    openapiFields.add("userName");
    openapiFields.add("workEmailAddress");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Onboarding
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Onboarding.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Onboarding is not found in the empty JSON string", Onboarding.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Onboarding.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("address1") != null && !jsonObj.get("address1").isJsonNull()) && !jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonNull()) && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if ((jsonObj.get("autoPayType") != null && !jsonObj.get("autoPayType").isJsonNull()) && !jsonObj.get("autoPayType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoPayType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoPayType").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("costCenter1") != null && !jsonObj.get("costCenter1").isJsonNull()) && !jsonObj.get("costCenter1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter1").toString()));
      }
      if ((jsonObj.get("costCenter2") != null && !jsonObj.get("costCenter2").isJsonNull()) && !jsonObj.get("costCenter2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter2").toString()));
      }
      if ((jsonObj.get("costCenter3") != null && !jsonObj.get("costCenter3").isJsonNull()) && !jsonObj.get("costCenter3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter3").toString()));
      }
      if ((jsonObj.get("employeeStatus") != null && !jsonObj.get("employeeStatus").isJsonNull()) && !jsonObj.get("employeeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeStatus").toString()));
      }
      if ((jsonObj.get("employmentType") != null && !jsonObj.get("employmentType").isJsonNull()) && !jsonObj.get("employmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employmentType").toString()));
      }
      if ((jsonObj.get("federalFilingStatus") != null && !jsonObj.get("federalFilingStatus").isJsonNull()) && !jsonObj.get("federalFilingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `federalFilingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("federalFilingStatus").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("sex") != null && !jsonObj.get("sex").isJsonNull()) && !jsonObj.get("sex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sex").toString()));
      }
      if ((jsonObj.get("hireDate") != null && !jsonObj.get("hireDate").isJsonNull()) && !jsonObj.get("hireDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hireDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hireDate").toString()));
      }
      if ((jsonObj.get("homePhone") != null && !jsonObj.get("homePhone").isJsonNull()) && !jsonObj.get("homePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePhone").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("maritalStatus") != null && !jsonObj.get("maritalStatus").isJsonNull()) && !jsonObj.get("maritalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maritalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maritalStatus").toString()));
      }
      if ((jsonObj.get("personalMobilePhone") != null && !jsonObj.get("personalMobilePhone").isJsonNull()) && !jsonObj.get("personalMobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalMobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalMobilePhone").toString()));
      }
      if ((jsonObj.get("payFrequency") != null && !jsonObj.get("payFrequency").isJsonNull()) && !jsonObj.get("payFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payFrequency").toString()));
      }
      if ((jsonObj.get("personalEmailAddress") != null && !jsonObj.get("personalEmailAddress").isJsonNull()) && !jsonObj.get("personalEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalEmailAddress").toString()));
      }
      if ((jsonObj.get("payType") != null && !jsonObj.get("payType").isJsonNull()) && !jsonObj.get("payType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payType").toString()));
      }
      if ((jsonObj.get("ratePer") != null && !jsonObj.get("ratePer").isJsonNull()) && !jsonObj.get("ratePer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratePer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratePer").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("ssn") != null && !jsonObj.get("ssn").isJsonNull()) && !jsonObj.get("ssn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssn").toString()));
      }
      if ((jsonObj.get("stateFilingStatus") != null && !jsonObj.get("stateFilingStatus").isJsonNull()) && !jsonObj.get("stateFilingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateFilingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateFilingStatus").toString()));
      }
      if ((jsonObj.get("suiState") != null && !jsonObj.get("suiState").isJsonNull()) && !jsonObj.get("suiState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suiState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suiState").toString()));
      }
      if ((jsonObj.get("taxForm") != null && !jsonObj.get("taxForm").isJsonNull()) && !jsonObj.get("taxForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxForm").toString()));
      }
      if ((jsonObj.get("taxState") != null && !jsonObj.get("taxState").isJsonNull()) && !jsonObj.get("taxState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxState").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if ((jsonObj.get("workEmailAddress") != null && !jsonObj.get("workEmailAddress").isJsonNull()) && !jsonObj.get("workEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workEmailAddress").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Onboarding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Onboarding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Onboarding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Onboarding.class));

       return (TypeAdapter<T>) new TypeAdapter<Onboarding>() {
           @Override
           public void write(JsonWriter out, Onboarding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Onboarding read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Onboarding instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Onboarding given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Onboarding
  * @throws IOException if the JSON string is invalid with respect to Onboarding
  */
  public static Onboarding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Onboarding.class);
  }

 /**
  * Convert an instance of Onboarding to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

