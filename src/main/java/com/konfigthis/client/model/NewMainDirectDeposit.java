/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NewMainDirectDeposit
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NewMainDirectDeposit {
  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_BLOCK_SPECIAL = "blockSpecial";
  @SerializedName(SERIALIZED_NAME_BLOCK_SPECIAL)
  private Boolean blockSpecial;

  public static final String SERIALIZED_NAME_NAME_ON_ACCOUNT = "nameOnAccount";
  @SerializedName(SERIALIZED_NAME_NAME_ON_ACCOUNT)
  private String nameOnAccount;

  public static final String SERIALIZED_NAME_SKIP_PRE_NOTE = "skipPreNote";
  @SerializedName(SERIALIZED_NAME_SKIP_PRE_NOTE)
  private Boolean skipPreNote;

  public static final String SERIALIZED_NAME_PRE_NOTE_DATE = "preNoteDate";
  @SerializedName(SERIALIZED_NAME_PRE_NOTE_DATE)
  private LocalDate preNoteDate;

  public NewMainDirectDeposit() {
  }

  public NewMainDirectDeposit accountType(String accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). &lt;br   /&gt;Max length: 1&lt;br /&gt;&lt;small&gt;new with Web Link 16.6 release&lt;/small&gt;
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Account type. Valid values are *C* (Checking), *S* (Saving), *P* (Pay Card). <br   />Max length: 1<br /><small>new with Web Link 16.6 release</small>")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    
    
    
    this.accountType = accountType;
  }


  public NewMainDirectDeposit routingNumber(String routingNumber) {
    
    
    
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * ABA Transit Routing Number, entered without dashes or spaces. &lt;br  /&gt;Max length: 9&lt;br /&gt;&lt;small&gt;new with Web Link 16.6 release&lt;/small&gt;
   * @return routingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ABA Transit Routing Number, entered without dashes or spaces. <br  />Max length: 9<br /><small>new with Web Link 16.6 release</small>")

  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    
    
    
    this.routingNumber = routingNumber;
  }


  public NewMainDirectDeposit accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Account number, entered without special characters and spaces. &lt;br  /&gt;Max length: 17&lt;br /&gt;&lt;small&gt;new with Web Link 16.6 release&lt;/small&gt;
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Account number, entered without special characters and spaces. <br  />Max length: 17<br /><small>new with Web Link 16.6 release</small>")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public NewMainDirectDeposit blockSpecial(Boolean blockSpecial) {
    
    
    
    
    this.blockSpecial = blockSpecial;
    return this;
  }

   /**
   * Indicates if direct deposit should be blocked when special check types such as Bonus are processed.&lt;br /&gt;&lt;small&gt;new with Web Link 16.6 release&lt;/small&gt;
   * @return blockSpecial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if direct deposit should be blocked when special check types such as Bonus are processed.<br /><small>new with Web Link 16.6 release</small>")

  public Boolean getBlockSpecial() {
    return blockSpecial;
  }


  public void setBlockSpecial(Boolean blockSpecial) {
    
    
    
    this.blockSpecial = blockSpecial;
  }


  public NewMainDirectDeposit nameOnAccount(String nameOnAccount) {
    
    
    
    
    this.nameOnAccount = nameOnAccount;
    return this;
  }

   /**
   * Name on the bank account. Defaults to employee&#39;s name. &lt;br  /&gt;Max length: 30&lt;br /&gt;&lt;small&gt;new with Web Link 16.6 release&lt;/small&gt;
   * @return nameOnAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name on the bank account. Defaults to employee's name. <br  />Max length: 30<br /><small>new with Web Link 16.6 release</small>")

  public String getNameOnAccount() {
    return nameOnAccount;
  }


  public void setNameOnAccount(String nameOnAccount) {
    
    
    
    this.nameOnAccount = nameOnAccount;
  }


  public NewMainDirectDeposit skipPreNote(Boolean skipPreNote) {
    
    
    
    
    this.skipPreNote = skipPreNote;
    return this;
  }

   /**
   * Indicates if account will not pre-note.&lt;br /&gt;&lt;small&gt;new with Web Link 16.6 release&lt;/small&gt;
   * @return skipPreNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if account will not pre-note.<br /><small>new with Web Link 16.6 release</small>")

  public Boolean getSkipPreNote() {
    return skipPreNote;
  }


  public void setSkipPreNote(Boolean skipPreNote) {
    
    
    
    this.skipPreNote = skipPreNote;
  }


  public NewMainDirectDeposit preNoteDate(LocalDate preNoteDate) {
    
    
    
    
    this.preNoteDate = preNoteDate;
    return this;
  }

   /**
   * Date to end the pre-note of the account. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.&lt;br /&gt;&lt;small&gt;new with Web Link 16.6 release&lt;/small&gt;
   * @return preNoteDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date to end the pre-note of the account. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.<br /><small>new with Web Link 16.6 release</small>")

  public LocalDate getPreNoteDate() {
    return preNoteDate;
  }


  public void setPreNoteDate(LocalDate preNoteDate) {
    
    
    
    this.preNoteDate = preNoteDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NewMainDirectDeposit instance itself
   */
  public NewMainDirectDeposit putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewMainDirectDeposit newMainDirectDeposit = (NewMainDirectDeposit) o;
    return Objects.equals(this.accountType, newMainDirectDeposit.accountType) &&
        Objects.equals(this.routingNumber, newMainDirectDeposit.routingNumber) &&
        Objects.equals(this.accountNumber, newMainDirectDeposit.accountNumber) &&
        Objects.equals(this.blockSpecial, newMainDirectDeposit.blockSpecial) &&
        Objects.equals(this.nameOnAccount, newMainDirectDeposit.nameOnAccount) &&
        Objects.equals(this.skipPreNote, newMainDirectDeposit.skipPreNote) &&
        Objects.equals(this.preNoteDate, newMainDirectDeposit.preNoteDate)&&
        Objects.equals(this.additionalProperties, newMainDirectDeposit.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, routingNumber, accountNumber, blockSpecial, nameOnAccount, skipPreNote, preNoteDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewMainDirectDeposit {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    blockSpecial: ").append(toIndentedString(blockSpecial)).append("\n");
    sb.append("    nameOnAccount: ").append(toIndentedString(nameOnAccount)).append("\n");
    sb.append("    skipPreNote: ").append(toIndentedString(skipPreNote)).append("\n");
    sb.append("    preNoteDate: ").append(toIndentedString(preNoteDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountType");
    openapiFields.add("routingNumber");
    openapiFields.add("accountNumber");
    openapiFields.add("blockSpecial");
    openapiFields.add("nameOnAccount");
    openapiFields.add("skipPreNote");
    openapiFields.add("preNoteDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NewMainDirectDeposit
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NewMainDirectDeposit.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewMainDirectDeposit is not found in the empty JSON string", NewMainDirectDeposit.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if ((jsonObj.get("routingNumber") != null && !jsonObj.get("routingNumber").isJsonNull()) && !jsonObj.get("routingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingNumber").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("nameOnAccount") != null && !jsonObj.get("nameOnAccount").isJsonNull()) && !jsonObj.get("nameOnAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameOnAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameOnAccount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewMainDirectDeposit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewMainDirectDeposit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewMainDirectDeposit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewMainDirectDeposit.class));

       return (TypeAdapter<T>) new TypeAdapter<NewMainDirectDeposit>() {
           @Override
           public void write(JsonWriter out, NewMainDirectDeposit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NewMainDirectDeposit read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NewMainDirectDeposit instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewMainDirectDeposit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewMainDirectDeposit
  * @throws IOException if the JSON string is invalid with respect to NewMainDirectDeposit
  */
  public static NewMainDirectDeposit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewMainDirectDeposit.class);
  }

 /**
  * Convert an instance of NewMainDirectDeposit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

