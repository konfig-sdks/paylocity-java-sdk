/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Primary Pay Rate
 */
@ApiModel(description = "Primary Pay Rate")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeV1PrimaryPayRate {
  public static final String SERIALIZED_NAME_ANNUAL_SALARY = "annualSalary";
  @SerializedName(SERIALIZED_NAME_ANNUAL_SALARY)
  private Double annualSalary;

  public static final String SERIALIZED_NAME_BASE_RATE = "baseRate";
  @SerializedName(SERIALIZED_NAME_BASE_RATE)
  private Double baseRate;

  public static final String SERIALIZED_NAME_DEFAULT_HOURS = "defaultHours";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HOURS)
  private Double defaultHours;

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "payFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private String payFrequency;

  public static final String SERIALIZED_NAME_PAY_TYPE = "payType";
  @SerializedName(SERIALIZED_NAME_PAY_TYPE)
  private String payType;

  public static final String SERIALIZED_NAME_PRIMARY_PAY_RATE_EFFECTIVE_DATE = "primaryPayRateEffectiveDate";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PAY_RATE_EFFECTIVE_DATE)
  private String primaryPayRateEffectiveDate;

  public static final String SERIALIZED_NAME_SALARY = "salary";
  @SerializedName(SERIALIZED_NAME_SALARY)
  private Double salary;

  public EmployeeV1PrimaryPayRate() {
  }

  public EmployeeV1PrimaryPayRate annualSalary(Double annualSalary) {
    
    
    
    
    this.annualSalary = annualSalary;
    return this;
  }

  public EmployeeV1PrimaryPayRate annualSalary(Integer annualSalary) {
    
    
    
    
    this.annualSalary = annualSalary.doubleValue();
    return this;
  }

   /**
   * Employee annual salary. &lt;br  /&gt;Decimal (12,2)
   * @return annualSalary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee annual salary. <br  />Decimal (12,2)")

  public Double getAnnualSalary() {
    return annualSalary;
  }


  public void setAnnualSalary(Double annualSalary) {
    
    
    
    this.annualSalary = annualSalary;
  }


  public EmployeeV1PrimaryPayRate baseRate(Double baseRate) {
    
    
    
    
    this.baseRate = baseRate;
    return this;
  }

  public EmployeeV1PrimaryPayRate baseRate(Integer baseRate) {
    
    
    
    
    this.baseRate = baseRate.doubleValue();
    return this;
  }

   /**
   * Employee base rate, used for Hourly employees. &lt;br  /&gt;Decimal (12,2)
   * @return baseRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee base rate, used for Hourly employees. <br  />Decimal (12,2)")

  public Double getBaseRate() {
    return baseRate;
  }


  public void setBaseRate(Double baseRate) {
    
    
    
    this.baseRate = baseRate;
  }


  public EmployeeV1PrimaryPayRate defaultHours(Double defaultHours) {
    
    
    
    
    this.defaultHours = defaultHours;
    return this;
  }

  public EmployeeV1PrimaryPayRate defaultHours(Integer defaultHours) {
    
    
    
    
    this.defaultHours = defaultHours.doubleValue();
    return this;
  }

   /**
   * Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. &lt;br  /&gt;Decimal (12,2)
   * @return defaultHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. <br  />Decimal (12,2)")

  public Double getDefaultHours() {
    return defaultHours;
  }


  public void setDefaultHours(Double defaultHours) {
    
    
    
    this.defaultHours = defaultHours;
  }


  public EmployeeV1PrimaryPayRate payFrequency(String payFrequency) {
    
    
    
    
    this.payFrequency = payFrequency;
    return this;
  }

   /**
   * Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. &lt;br  /&gt;Max length: 5
   * @return payFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. <br  />Max length: 5")

  public String getPayFrequency() {
    return payFrequency;
  }


  public void setPayFrequency(String payFrequency) {
    
    
    
    this.payFrequency = payFrequency;
  }


  public EmployeeV1PrimaryPayRate payType(String payType) {
    
    
    
    
    this.payType = payType;
    return this;
  }

   /**
   * Employee pay type (rate code). Valid values are *Hourly* or *Salary*. &lt;br  /&gt;Max length: 10
   * @return payType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee pay type (rate code). Valid values are *Hourly* or *Salary*. <br  />Max length: 10")

  public String getPayType() {
    return payType;
  }


  public void setPayType(String payType) {
    
    
    
    this.payType = payType;
  }


  public EmployeeV1PrimaryPayRate primaryPayRateEffectiveDate(String primaryPayRateEffectiveDate) {
    
    
    
    
    this.primaryPayRateEffectiveDate = primaryPayRateEffectiveDate;
    return this;
  }

   /**
   * The date the employee’s pay rate takes effect. (MM-DD-CCYY)
   * @return primaryPayRateEffectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date the employee’s pay rate takes effect. (MM-DD-CCYY)")

  public String getPrimaryPayRateEffectiveDate() {
    return primaryPayRateEffectiveDate;
  }


  public void setPrimaryPayRateEffectiveDate(String primaryPayRateEffectiveDate) {
    
    
    
    this.primaryPayRateEffectiveDate = primaryPayRateEffectiveDate;
  }


  public EmployeeV1PrimaryPayRate salary(Double salary) {
    
    
    
    
    this.salary = salary;
    return this;
  }

  public EmployeeV1PrimaryPayRate salary(Integer salary) {
    
    
    
    
    this.salary = salary.doubleValue();
    return this;
  }

   /**
   * Employee gross salary per pay period used with payType Salary.&lt;br  /&gt;Decimal (12,2)
   * @return salary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee gross salary per pay period used with payType Salary.<br  />Decimal (12,2)")

  public Double getSalary() {
    return salary;
  }


  public void setSalary(Double salary) {
    
    
    
    this.salary = salary;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeV1PrimaryPayRate instance itself
   */
  public EmployeeV1PrimaryPayRate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeV1PrimaryPayRate employeeV1PrimaryPayRate = (EmployeeV1PrimaryPayRate) o;
    return Objects.equals(this.annualSalary, employeeV1PrimaryPayRate.annualSalary) &&
        Objects.equals(this.baseRate, employeeV1PrimaryPayRate.baseRate) &&
        Objects.equals(this.defaultHours, employeeV1PrimaryPayRate.defaultHours) &&
        Objects.equals(this.payFrequency, employeeV1PrimaryPayRate.payFrequency) &&
        Objects.equals(this.payType, employeeV1PrimaryPayRate.payType) &&
        Objects.equals(this.primaryPayRateEffectiveDate, employeeV1PrimaryPayRate.primaryPayRateEffectiveDate) &&
        Objects.equals(this.salary, employeeV1PrimaryPayRate.salary)&&
        Objects.equals(this.additionalProperties, employeeV1PrimaryPayRate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualSalary, baseRate, defaultHours, payFrequency, payType, primaryPayRateEffectiveDate, salary, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeV1PrimaryPayRate {\n");
    sb.append("    annualSalary: ").append(toIndentedString(annualSalary)).append("\n");
    sb.append("    baseRate: ").append(toIndentedString(baseRate)).append("\n");
    sb.append("    defaultHours: ").append(toIndentedString(defaultHours)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    payType: ").append(toIndentedString(payType)).append("\n");
    sb.append("    primaryPayRateEffectiveDate: ").append(toIndentedString(primaryPayRateEffectiveDate)).append("\n");
    sb.append("    salary: ").append(toIndentedString(salary)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annualSalary");
    openapiFields.add("baseRate");
    openapiFields.add("defaultHours");
    openapiFields.add("payFrequency");
    openapiFields.add("payType");
    openapiFields.add("primaryPayRateEffectiveDate");
    openapiFields.add("salary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeV1PrimaryPayRate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeV1PrimaryPayRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeV1PrimaryPayRate is not found in the empty JSON string", EmployeeV1PrimaryPayRate.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payFrequency") != null && !jsonObj.get("payFrequency").isJsonNull()) && !jsonObj.get("payFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payFrequency").toString()));
      }
      if ((jsonObj.get("payType") != null && !jsonObj.get("payType").isJsonNull()) && !jsonObj.get("payType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payType").toString()));
      }
      if ((jsonObj.get("primaryPayRateEffectiveDate") != null && !jsonObj.get("primaryPayRateEffectiveDate").isJsonNull()) && !jsonObj.get("primaryPayRateEffectiveDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryPayRateEffectiveDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryPayRateEffectiveDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeV1PrimaryPayRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeV1PrimaryPayRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeV1PrimaryPayRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeV1PrimaryPayRate.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeV1PrimaryPayRate>() {
           @Override
           public void write(JsonWriter out, EmployeeV1PrimaryPayRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeV1PrimaryPayRate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeV1PrimaryPayRate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeV1PrimaryPayRate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeV1PrimaryPayRate
  * @throws IOException if the JSON string is invalid with respect to EmployeeV1PrimaryPayRate
  */
  public static EmployeeV1PrimaryPayRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeV1PrimaryPayRate.class);
  }

 /**
  * Convert an instance of EmployeeV1PrimaryPayRate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

