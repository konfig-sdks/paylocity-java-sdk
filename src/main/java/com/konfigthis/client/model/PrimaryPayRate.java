/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PrimaryPayRate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PrimaryPayRate {
  public static final String SERIALIZED_NAME_AUTO_PAY = "autoPay";
  @SerializedName(SERIALIZED_NAME_AUTO_PAY)
  private Boolean autoPay;

  public static final String SERIALIZED_NAME_BASE_RATE = "baseRate";
  @SerializedName(SERIALIZED_NAME_BASE_RATE)
  private Double baseRate;

  public static final String SERIALIZED_NAME_DEFAULT_HOURS = "defaultHours";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HOURS)
  private Double defaultHours;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "payFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private String payFrequency;

  public static final String SERIALIZED_NAME_PAY_GRADE = "payGrade";
  @SerializedName(SERIALIZED_NAME_PAY_GRADE)
  private String payGrade;

  public static final String SERIALIZED_NAME_PAY_TYPE = "payType";
  @SerializedName(SERIALIZED_NAME_PAY_TYPE)
  private String payType;

  public static final String SERIALIZED_NAME_RATE_PER = "ratePer";
  @SerializedName(SERIALIZED_NAME_RATE_PER)
  private String ratePer;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SALARY = "salary";
  @SerializedName(SERIALIZED_NAME_SALARY)
  private Double salary;

  public PrimaryPayRate() {
  }

  public PrimaryPayRate autoPay(Boolean autoPay) {
    
    
    
    
    this.autoPay = autoPay;
    return this;
  }

   /**
   * If set to *True*, employee will be paid automatically using deafultHours. 
   * @return autoPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to *True*, employee will be paid automatically using deafultHours. ")

  public Boolean getAutoPay() {
    return autoPay;
  }


  public void setAutoPay(Boolean autoPay) {
    
    
    
    this.autoPay = autoPay;
  }


  public PrimaryPayRate baseRate(Double baseRate) {
    
    
    
    
    this.baseRate = baseRate;
    return this;
  }

  public PrimaryPayRate baseRate(Integer baseRate) {
    
    
    
    
    this.baseRate = baseRate.doubleValue();
    return this;
  }

   /**
   * Employee base rate, used for Hourly employees. &lt;br  /&gt;Decimal (12,2)
   * @return baseRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee base rate, used for Hourly employees. <br  />Decimal (12,2)")

  public Double getBaseRate() {
    return baseRate;
  }


  public void setBaseRate(Double baseRate) {
    
    
    
    this.baseRate = baseRate;
  }


  public PrimaryPayRate defaultHours(Double defaultHours) {
    
    
    
    
    this.defaultHours = defaultHours;
    return this;
  }

  public PrimaryPayRate defaultHours(Integer defaultHours) {
    
    
    
    
    this.defaultHours = defaultHours.doubleValue();
    return this;
  }

   /**
   * Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. &lt;br  /&gt;Decimal (12,2)
   * @return defaultHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee default hours consistently worked. If autoPayType is set to D, employee will be paid hourly base rate for the defaultHours. <br  />Decimal (12,2)")

  public Double getDefaultHours() {
    return defaultHours;
  }


  public void setDefaultHours(Double defaultHours) {
    
    
    
    this.defaultHours = defaultHours;
  }


  public PrimaryPayRate effectiveDate(LocalDate effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * The date the employee’s pay rate takes effect. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date the employee’s pay rate takes effect. Common formats are *MM-DD-CCYY, CCYY-MM-DD*.")

  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(LocalDate effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public PrimaryPayRate payFrequency(String payFrequency) {
    
    
    
    
    this.payFrequency = payFrequency;
    return this;
  }

   /**
   * Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. &lt;br  /&gt;Max length: 5
   * @return payFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee current pay frequency. Common values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly), Q (Quarterly), W (Weekly)*. <br  />Max length: 5")

  public String getPayFrequency() {
    return payFrequency;
  }


  public void setPayFrequency(String payFrequency) {
    
    
    
    this.payFrequency = payFrequency;
  }


  public PrimaryPayRate payGrade(String payGrade) {
    
    
    
    
    this.payGrade = payGrade;
    return this;
  }

   /**
   * Employee pay grade. Must match Company setup. &lt;br  /&gt; Max length: 10
   * @return payGrade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee pay grade. Must match Company setup. <br  /> Max length: 10")

  public String getPayGrade() {
    return payGrade;
  }


  public void setPayGrade(String payGrade) {
    
    
    
    this.payGrade = payGrade;
  }


  public PrimaryPayRate payType(String payType) {
    
    
    
    
    this.payType = payType;
    return this;
  }

   /**
   * Employee pay type (rate code). Valid values are *Hourly* or *Salary*. &lt;br  /&gt;Max length: 10
   * @return payType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee pay type (rate code). Valid values are *Hourly* or *Salary*. <br  />Max length: 10")

  public String getPayType() {
    return payType;
  }


  public void setPayType(String payType) {
    
    
    
    this.payType = payType;
  }


  public PrimaryPayRate ratePer(String ratePer) {
    
    
    
    
    this.ratePer = ratePer;
    return this;
  }

   /**
   * Employee base rate frequency used with payType Hourly. Common values are *Hour, Week*. Default is Hour. &lt;br  /&gt;Max length: 10
   * @return ratePer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee base rate frequency used with payType Hourly. Common values are *Hour, Week*. Default is Hour. <br  />Max length: 10")

  public String getRatePer() {
    return ratePer;
  }


  public void setRatePer(String ratePer) {
    
    
    
    this.ratePer = ratePer;
  }


  public PrimaryPayRate reason(String reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * Primary Pay Rate change reason. Must match Company setup.&lt;br  /&gt;Max length: 15
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Primary Pay Rate change reason. Must match Company setup.<br  />Max length: 15")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    
    
    
    this.reason = reason;
  }


  public PrimaryPayRate salary(Double salary) {
    
    
    
    
    this.salary = salary;
    return this;
  }

  public PrimaryPayRate salary(Integer salary) {
    
    
    
    
    this.salary = salary.doubleValue();
    return this;
  }

   /**
   * Employee gross salary per pay period used with payType Salary.&lt;br  /&gt;Decimal (12,2)
   * @return salary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee gross salary per pay period used with payType Salary.<br  />Decimal (12,2)")

  public Double getSalary() {
    return salary;
  }


  public void setSalary(Double salary) {
    
    
    
    this.salary = salary;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PrimaryPayRate instance itself
   */
  public PrimaryPayRate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrimaryPayRate primaryPayRate = (PrimaryPayRate) o;
    return Objects.equals(this.autoPay, primaryPayRate.autoPay) &&
        Objects.equals(this.baseRate, primaryPayRate.baseRate) &&
        Objects.equals(this.defaultHours, primaryPayRate.defaultHours) &&
        Objects.equals(this.effectiveDate, primaryPayRate.effectiveDate) &&
        Objects.equals(this.payFrequency, primaryPayRate.payFrequency) &&
        Objects.equals(this.payGrade, primaryPayRate.payGrade) &&
        Objects.equals(this.payType, primaryPayRate.payType) &&
        Objects.equals(this.ratePer, primaryPayRate.ratePer) &&
        Objects.equals(this.reason, primaryPayRate.reason) &&
        Objects.equals(this.salary, primaryPayRate.salary)&&
        Objects.equals(this.additionalProperties, primaryPayRate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoPay, baseRate, defaultHours, effectiveDate, payFrequency, payGrade, payType, ratePer, reason, salary, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrimaryPayRate {\n");
    sb.append("    autoPay: ").append(toIndentedString(autoPay)).append("\n");
    sb.append("    baseRate: ").append(toIndentedString(baseRate)).append("\n");
    sb.append("    defaultHours: ").append(toIndentedString(defaultHours)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    payGrade: ").append(toIndentedString(payGrade)).append("\n");
    sb.append("    payType: ").append(toIndentedString(payType)).append("\n");
    sb.append("    ratePer: ").append(toIndentedString(ratePer)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    salary: ").append(toIndentedString(salary)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoPay");
    openapiFields.add("baseRate");
    openapiFields.add("defaultHours");
    openapiFields.add("effectiveDate");
    openapiFields.add("payFrequency");
    openapiFields.add("payGrade");
    openapiFields.add("payType");
    openapiFields.add("ratePer");
    openapiFields.add("reason");
    openapiFields.add("salary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PrimaryPayRate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PrimaryPayRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrimaryPayRate is not found in the empty JSON string", PrimaryPayRate.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payFrequency") != null && !jsonObj.get("payFrequency").isJsonNull()) && !jsonObj.get("payFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payFrequency").toString()));
      }
      if ((jsonObj.get("payGrade") != null && !jsonObj.get("payGrade").isJsonNull()) && !jsonObj.get("payGrade").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payGrade` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payGrade").toString()));
      }
      if ((jsonObj.get("payType") != null && !jsonObj.get("payType").isJsonNull()) && !jsonObj.get("payType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payType").toString()));
      }
      if ((jsonObj.get("ratePer") != null && !jsonObj.get("ratePer").isJsonNull()) && !jsonObj.get("ratePer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratePer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratePer").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrimaryPayRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrimaryPayRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrimaryPayRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrimaryPayRate.class));

       return (TypeAdapter<T>) new TypeAdapter<PrimaryPayRate>() {
           @Override
           public void write(JsonWriter out, PrimaryPayRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PrimaryPayRate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PrimaryPayRate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PrimaryPayRate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PrimaryPayRate
  * @throws IOException if the JSON string is invalid with respect to PrimaryPayRate
  */
  public static PrimaryPayRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrimaryPayRate.class);
  }

 /**
  * Convert an instance of PrimaryPayRate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

