/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeV1;
import com.konfigthis.client.model.EmployeeV1CreateNewEmployeeRecordRequest;
import com.konfigthis.client.model.EmployeeV1UpdateEmployeeDataToPaylocityRequest;
import com.konfigthis.client.model.NewEmployee;
import com.konfigthis.client.model.UpdateEmployee;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeV1ApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeV1ApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeV1ApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEmployeeRecordCall(EmployeeV1CreateNewEmployeeRecordRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/employee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEmployeeRecordValidateBeforeCall(EmployeeV1CreateNewEmployeeRecordRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createNewEmployeeRecord(Async)");
        }

        return createNewEmployeeRecordCall(body, _callback);

    }


    private ApiResponse<Void> createNewEmployeeRecordWithHttpInfo(EmployeeV1CreateNewEmployeeRecordRequest body) throws ApiException {
        okhttp3.Call localVarCall = createNewEmployeeRecordValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewEmployeeRecordAsync(EmployeeV1CreateNewEmployeeRecordRequest body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEmployeeRecordValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewEmployeeRecordRequestBuilder {
        private NewEmployee newEmployee;

        private CreateNewEmployeeRecordRequestBuilder() {
        }

        /**
         * Set newEmployee
         * @param newEmployee  (optional)
         * @return CreateNewEmployeeRecordRequestBuilder
         */
        public CreateNewEmployeeRecordRequestBuilder newEmployee(NewEmployee newEmployee) {
            this.newEmployee = newEmployee;
            return this;
        }
        
        /**
         * Build call for createNewEmployeeRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeV1CreateNewEmployeeRecordRequest body = buildBodyParams();
            return createNewEmployeeRecordCall(body, _callback);
        }

        private EmployeeV1CreateNewEmployeeRecordRequest buildBodyParams() {
            EmployeeV1CreateNewEmployeeRecordRequest body = new EmployeeV1CreateNewEmployeeRecordRequest();
            body.newEmployee(this.newEmployee);
            return body;
        }

        /**
         * Execute createNewEmployeeRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeV1CreateNewEmployeeRecordRequest body = buildBodyParams();
            createNewEmployeeRecordWithHttpInfo(body);
        }

        /**
         * Execute createNewEmployeeRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeV1CreateNewEmployeeRecordRequest body = buildBodyParams();
            return createNewEmployeeRecordWithHttpInfo(body);
        }

        /**
         * Execute createNewEmployeeRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeV1CreateNewEmployeeRecordRequest body = buildBodyParams();
            return createNewEmployeeRecordAsync(body, _callback);
        }
    }

    /**
     * Add new employee
     * This resource allows for the creation of a new employee record for a specified companyID.  Additional field objects may need to be added for companies that use the New Hire Template in the Paylocity HCM solution when hiring employees and have additional required fields.   &gt; 🚧 Maintenance Mode &gt;  &gt; _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
     * @param body New Employee (required)
     * @return CreateNewEmployeeRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEmployeeRecordRequestBuilder createNewEmployeeRecord() throws IllegalArgumentException {
        return new CreateNewEmployeeRecordRequestBuilder();
    }
    private okhttp3.Call getEmployeeDataCall(String companyId, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/{companyId}/employee/{employeeId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeDataValidateBeforeCall(String companyId, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getEmployeeData(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeeData(Async)");
        }

        return getEmployeeDataCall(companyId, employeeId, _callback);

    }


    private ApiResponse<EmployeeV1> getEmployeeDataWithHttpInfo(String companyId, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeDataValidateBeforeCall(companyId, employeeId, null);
        Type localVarReturnType = new TypeToken<EmployeeV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeDataAsync(String companyId, String employeeId, final ApiCallback<EmployeeV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeDataValidateBeforeCall(companyId, employeeId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeDataRequestBuilder {
        private final String companyId;
        private final String employeeId;

        private GetEmployeeDataRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getEmployeeData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeDataCall(companyId, employeeId, _callback);
        }


        /**
         * Execute getEmployeeData request
         * @return EmployeeV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeV1 execute() throws ApiException {
            ApiResponse<EmployeeV1> localVarResp = getEmployeeDataWithHttpInfo(companyId, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeData request with HTTP info returned
         * @return ApiResponse&lt;EmployeeV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeV1> executeWithHttpInfo() throws ApiException {
            return getEmployeeDataWithHttpInfo(companyId, employeeId);
        }

        /**
         * Execute getEmployeeData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeV1> _callback) throws ApiException {
            return getEmployeeDataAsync(companyId, employeeId, _callback);
        }
    }

    /**
     * Get Employee
     * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution.   &gt; 🚧 Maintenance Mode &gt;  &gt; _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @return GetEmployeeDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeDataRequestBuilder getEmployeeData(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetEmployeeDataRequestBuilder(companyId, employeeId);
    }
    private okhttp3.Call updateEmployeeDataToPaylocityCall(EmployeeV1UpdateEmployeeDataToPaylocityRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/update-employee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeDataToPaylocityValidateBeforeCall(EmployeeV1UpdateEmployeeDataToPaylocityRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEmployeeDataToPaylocity(Async)");
        }

        return updateEmployeeDataToPaylocityCall(body, _callback);

    }


    private ApiResponse<Void> updateEmployeeDataToPaylocityWithHttpInfo(EmployeeV1UpdateEmployeeDataToPaylocityRequest body) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeDataToPaylocityValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmployeeDataToPaylocityAsync(EmployeeV1UpdateEmployeeDataToPaylocityRequest body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeDataToPaylocityValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeDataToPaylocityRequestBuilder {
        private UpdateEmployee updateEmployee;

        private UpdateEmployeeDataToPaylocityRequestBuilder() {
        }

        /**
         * Set updateEmployee
         * @param updateEmployee  (optional)
         * @return UpdateEmployeeDataToPaylocityRequestBuilder
         */
        public UpdateEmployeeDataToPaylocityRequestBuilder updateEmployee(UpdateEmployee updateEmployee) {
            this.updateEmployee = updateEmployee;
            return this;
        }
        
        /**
         * Build call for updateEmployeeDataToPaylocity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeV1UpdateEmployeeDataToPaylocityRequest body = buildBodyParams();
            return updateEmployeeDataToPaylocityCall(body, _callback);
        }

        private EmployeeV1UpdateEmployeeDataToPaylocityRequest buildBodyParams() {
            EmployeeV1UpdateEmployeeDataToPaylocityRequest body = new EmployeeV1UpdateEmployeeDataToPaylocityRequest();
            body.updateEmployee(this.updateEmployee);
            return body;
        }

        /**
         * Execute updateEmployeeDataToPaylocity request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeV1UpdateEmployeeDataToPaylocityRequest body = buildBodyParams();
            updateEmployeeDataToPaylocityWithHttpInfo(body);
        }

        /**
         * Execute updateEmployeeDataToPaylocity request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeV1UpdateEmployeeDataToPaylocityRequest body = buildBodyParams();
            return updateEmployeeDataToPaylocityWithHttpInfo(body);
        }

        /**
         * Execute updateEmployeeDataToPaylocity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeV1UpdateEmployeeDataToPaylocityRequest body = buildBodyParams();
            return updateEmployeeDataToPaylocityAsync(body, _callback);
        }
    }

    /**
     * Update employee
     * Update Employee API sends updates to employee data to Paylocity Payroll/HR solution.   &gt; 🚧 Maintenance Mode &gt;  &gt; _This resource version is in a limited support mode and should not be used for new integrations.  Please use the latest version._ 
     * @param body UpdateEmployee (required)
     * @return UpdateEmployeeDataToPaylocityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeDataToPaylocityRequestBuilder updateEmployeeDataToPaylocity() throws IllegalArgumentException {
        return new UpdateEmployeeDataToPaylocityRequestBuilder();
    }
}
