/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.NonPrimaryStateTax;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NonPrimaryStateTaxApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NonPrimaryStateTaxApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NonPrimaryStateTaxApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addOrUpdateStateTaxCall(String companyId, String employeeId, NonPrimaryStateTax json, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = json;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/nonprimaryStateTax"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrUpdateStateTaxValidateBeforeCall(String companyId, String employeeId, NonPrimaryStateTax json, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling addOrUpdateStateTax(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addOrUpdateStateTax(Async)");
        }

        // verify the required parameter 'json' is set
        if (json == null) {
            throw new ApiException("Missing the required parameter 'json' when calling addOrUpdateStateTax(Async)");
        }

        return addOrUpdateStateTaxCall(companyId, employeeId, json, _callback);

    }


    private ApiResponse<Void> addOrUpdateStateTaxWithHttpInfo(String companyId, String employeeId, NonPrimaryStateTax json) throws ApiException {
        okhttp3.Call localVarCall = addOrUpdateStateTaxValidateBeforeCall(companyId, employeeId, json, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addOrUpdateStateTaxAsync(String companyId, String employeeId, NonPrimaryStateTax json, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrUpdateStateTaxValidateBeforeCall(companyId, employeeId, json, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddOrUpdateStateTaxRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private Object amount;
        private Double deductionsAmount;
        private Double dependentsAmount;
        private Object exemptions;
        private Object exemptions2;
        private Object filingStatus;
        private Boolean higherRate;
        private Double otherIncomeAmount;
        private Object percentage;
        private Object reciprocityCode;
        private Object specialCheckCalc;
        private Object taxCalculationCode;
        private Object taxCode;
        private Integer w4FormYear;

        private AddOrUpdateStateTaxRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set amount
         * @param amount State tax code.&lt;br  /&gt; Max length: 50 (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder amount(Object amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set deductionsAmount
         * @param deductionsAmount Box 4(b) on form W4 (year 2020 or later): Deductions amount. &lt;br  /&gt;Decimal (12,2) (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder deductionsAmount(Double deductionsAmount) {
            this.deductionsAmount = deductionsAmount;
            return this;
        }
        
        /**
         * Set dependentsAmount
         * @param dependentsAmount Box 3 on form W4 (year 2020 or later): Total dependents amount. &lt;br  /&gt;Decimal (12,2) (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder dependentsAmount(Double dependentsAmount) {
            this.dependentsAmount = dependentsAmount;
            return this;
        }
        
        /**
         * Set exemptions
         * @param exemptions State tax exemptions value.&lt;br  /&gt;Decimal (12,2) (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder exemptions(Object exemptions) {
            this.exemptions = exemptions;
            return this;
        }
        
        /**
         * Set exemptions2
         * @param exemptions2 State tax exemptions 2 value.&lt;br  /&gt;Decimal (12,2) (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder exemptions2(Object exemptions2) {
            this.exemptions2 = exemptions2;
            return this;
        }
        
        /**
         * Set filingStatus
         * @param filingStatus Employee state tax filing status. Common values are *S* (Single), *M* (Married).&lt;br  /&gt;Max length: 50 (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder filingStatus(Object filingStatus) {
            this.filingStatus = filingStatus;
            return this;
        }
        
        /**
         * Set higherRate
         * @param higherRate Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. &lt;br  /&gt;Boolean (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder higherRate(Boolean higherRate) {
            this.higherRate = higherRate;
            return this;
        }
        
        /**
         * Set otherIncomeAmount
         * @param otherIncomeAmount Box 4(a) on form W4 (year 2020 or later): Other income amount. &lt;br  /&gt;Decimal (12,2) (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder otherIncomeAmount(Double otherIncomeAmount) {
            this.otherIncomeAmount = otherIncomeAmount;
            return this;
        }
        
        /**
         * Set percentage
         * @param percentage State Tax percentage. &lt;br  /&gt;Decimal (12,2) (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder percentage(Object percentage) {
            this.percentage = percentage;
            return this;
        }
        
        /**
         * Set reciprocityCode
         * @param reciprocityCode Non-primary state tax reciprocity code.&lt;br  /&gt; Max length: 50 (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder reciprocityCode(Object reciprocityCode) {
            this.reciprocityCode = reciprocityCode;
            return this;
        }
        
        /**
         * Set specialCheckCalc
         * @param specialCheckCalc Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). &lt;br  /&gt;Max length: 10 (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder specialCheckCalc(Object specialCheckCalc) {
            this.specialCheckCalc = specialCheckCalc;
            return this;
        }
        
        /**
         * Set taxCalculationCode
         * @param taxCalculationCode Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). &lt;br  /&gt;Max length: 10 (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder taxCalculationCode(Object taxCalculationCode) {
            this.taxCalculationCode = taxCalculationCode;
            return this;
        }
        
        /**
         * Set taxCode
         * @param taxCode State tax code.&lt;br  /&gt; Max length: 50 (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder taxCode(Object taxCode) {
            this.taxCode = taxCode;
            return this;
        }
        
        /**
         * Set w4FormYear
         * @param w4FormYear The state W4 form year &lt;br  /&gt;Integer (optional)
         * @return AddOrUpdateStateTaxRequestBuilder
         */
        public AddOrUpdateStateTaxRequestBuilder w4FormYear(Integer w4FormYear) {
            this.w4FormYear = w4FormYear;
            return this;
        }
        
        /**
         * Build call for addOrUpdateStateTax
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NonPrimaryStateTax json = buildBodyParams();
            return addOrUpdateStateTaxCall(companyId, employeeId, json, _callback);
        }

        private NonPrimaryStateTax buildBodyParams() {
            NonPrimaryStateTax json = new NonPrimaryStateTax();
            json.amount(this.amount);
            json.deductionsAmount(this.deductionsAmount);
            json.dependentsAmount(this.dependentsAmount);
            json.exemptions(this.exemptions);
            json.exemptions2(this.exemptions2);
            json.filingStatus(this.filingStatus);
            json.higherRate(this.higherRate);
            json.otherIncomeAmount(this.otherIncomeAmount);
            json.percentage(this.percentage);
            json.reciprocityCode(this.reciprocityCode);
            json.specialCheckCalc(this.specialCheckCalc);
            json.taxCalculationCode(this.taxCalculationCode);
            json.taxCode(this.taxCode);
            json.w4FormYear(this.w4FormYear);
            return json;
        }

        /**
         * Execute addOrUpdateStateTax request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            NonPrimaryStateTax json = buildBodyParams();
            addOrUpdateStateTaxWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute addOrUpdateStateTax request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            NonPrimaryStateTax json = buildBodyParams();
            return addOrUpdateStateTaxWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute addOrUpdateStateTax request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            NonPrimaryStateTax json = buildBodyParams();
            return addOrUpdateStateTaxAsync(companyId, employeeId, json, _callback);
        }
    }

    /**
     * Add/update non-primary state tax
     * Sends new or updated employee non-primary state tax information directly to Paylocity Payroll/HR solution.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param json Non-Primary State Tax Model (required)
     * @return AddOrUpdateStateTaxRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public AddOrUpdateStateTaxRequestBuilder addOrUpdateStateTax(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddOrUpdateStateTaxRequestBuilder(companyId, employeeId);
    }
}
