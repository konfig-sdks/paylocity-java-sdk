/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdditionalRate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdditionalRatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdditionalRatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdditionalRatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call updateEmployeeAdditionalRatesCall(String companyId, String employeeId, AdditionalRate json, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = json;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/additionalRates"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeAdditionalRatesValidateBeforeCall(String companyId, String employeeId, AdditionalRate json, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateEmployeeAdditionalRates(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateEmployeeAdditionalRates(Async)");
        }

        // verify the required parameter 'json' is set
        if (json == null) {
            throw new ApiException("Missing the required parameter 'json' when calling updateEmployeeAdditionalRates(Async)");
        }

        return updateEmployeeAdditionalRatesCall(companyId, employeeId, json, _callback);

    }


    private ApiResponse<Void> updateEmployeeAdditionalRatesWithHttpInfo(String companyId, String employeeId, AdditionalRate json) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeAdditionalRatesValidateBeforeCall(companyId, employeeId, json, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmployeeAdditionalRatesAsync(String companyId, String employeeId, AdditionalRate json, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeAdditionalRatesValidateBeforeCall(companyId, employeeId, json, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeAdditionalRatesRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private Object changeReason;
        private Object costCenter1;
        private Object costCenter2;
        private Object costCenter3;
        private Object effectiveDate;
        private Object endCheckDate;
        private Object job;
        private Object rate;
        private Object rateCode;
        private Object rateNotes;
        private Object ratePer;
        private Object shift;

        private UpdateEmployeeAdditionalRatesRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set changeReason
         * @param changeReason Not required. If populated, must match one of the system coded values available in the Additional Rates Change Reason drop down.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder changeReason(Object changeReason) {
            this.changeReason = changeReason;
            return this;
        }
        
        /**
         * Set costCenter1
         * @param costCenter1 Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 1 drop down. This cell must be in a text format.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder costCenter1(Object costCenter1) {
            this.costCenter1 = costCenter1;
            return this;
        }
        
        /**
         * Set costCenter2
         * @param costCenter2 Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 2 drop down. This cell must be in a text format.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder costCenter2(Object costCenter2) {
            this.costCenter2 = costCenter2;
            return this;
        }
        
        /**
         * Set costCenter3
         * @param costCenter3 Not required. Valid values must match one of the system coded cost centers available in the Additional Rates Cost Center level 3 drop down. This cell must be in a text format.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder costCenter3(Object costCenter3) {
            this.costCenter3 = costCenter3;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate Required. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder effectiveDate(Object effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set endCheckDate
         * @param endCheckDate Not required. Must match one of the system coded check dates available in the Additional Rates End Check Date drop down. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder endCheckDate(Object endCheckDate) {
            this.endCheckDate = endCheckDate;
            return this;
        }
        
        /**
         * Set job
         * @param job Not required. If populated, must match one of the system coded values available in the Additional Rates Job drop down.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder job(Object job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set rate
         * @param rate Required. Enter dollar amount that corresponds to the Per selection.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder rate(Object rate) {
            this.rate = rate;
            return this;
        }
        
        /**
         * Set rateCode
         * @param rateCode Required. If populated, must match one of the system coded values available in the Additional Rates Rate Code drop down.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder rateCode(Object rateCode) {
            this.rateCode = rateCode;
            return this;
        }
        
        /**
         * Set rateNotes
         * @param rateNotes Not required.&lt;br  /&gt;Max length: 4000&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder rateNotes(Object rateNotes) {
            this.rateNotes = rateNotes;
            return this;
        }
        
        /**
         * Set ratePer
         * @param ratePer Required. Valid values are HOUR or WEEK.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder ratePer(Object ratePer) {
            this.ratePer = ratePer;
            return this;
        }
        
        /**
         * Set shift
         * @param shift Not required. If populated, must match one of the system coded values available in the Additional Rates Shift drop down.&lt;br /&gt; (optional)
         * @return UpdateEmployeeAdditionalRatesRequestBuilder
         */
        public UpdateEmployeeAdditionalRatesRequestBuilder shift(Object shift) {
            this.shift = shift;
            return this;
        }
        
        /**
         * Build call for updateEmployeeAdditionalRates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdditionalRate json = buildBodyParams();
            return updateEmployeeAdditionalRatesCall(companyId, employeeId, json, _callback);
        }

        private AdditionalRate buildBodyParams() {
            AdditionalRate json = new AdditionalRate();
            json.changeReason(this.changeReason);
            json.costCenter1(this.costCenter1);
            json.costCenter2(this.costCenter2);
            json.costCenter3(this.costCenter3);
            json.effectiveDate(this.effectiveDate);
            json.endCheckDate(this.endCheckDate);
            json.job(this.job);
            json.rate(this.rate);
            json.rateCode(this.rateCode);
            json.rateNotes(this.rateNotes);
            json.ratePer(this.ratePer);
            json.shift(this.shift);
            return json;
        }

        /**
         * Execute updateEmployeeAdditionalRates request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AdditionalRate json = buildBodyParams();
            updateEmployeeAdditionalRatesWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute updateEmployeeAdditionalRates request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AdditionalRate json = buildBodyParams();
            return updateEmployeeAdditionalRatesWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute updateEmployeeAdditionalRates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AdditionalRate json = buildBodyParams();
            return updateEmployeeAdditionalRatesAsync(companyId, employeeId, json, _callback);
        }
    }

    /**
     * Add/update additional rates
     * Sends new or updated employee additional rates information directly to Paylocity Payroll/HR solution.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param json Additional Rate Model (required)
     * @return UpdateEmployeeAdditionalRatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeAdditionalRatesRequestBuilder updateEmployeeAdditionalRates(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateEmployeeAdditionalRatesRequestBuilder(companyId, employeeId);
    }
}
