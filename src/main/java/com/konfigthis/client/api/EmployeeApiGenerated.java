/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeeIdResponse;
import com.konfigthis.client.model.EmployeeInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToPaylocityCall(String companyId, Employee json, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = json;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToPaylocityValidateBeforeCall(String companyId, Employee json, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling addToPaylocity(Async)");
        }

        // verify the required parameter 'json' is set
        if (json == null) {
            throw new ApiException("Missing the required parameter 'json' when calling addToPaylocity(Async)");
        }

        return addToPaylocityCall(companyId, json, _callback);

    }


    private ApiResponse<List<EmployeeIdResponse>> addToPaylocityWithHttpInfo(String companyId, Employee json) throws ApiException {
        okhttp3.Call localVarCall = addToPaylocityValidateBeforeCall(companyId, json, null);
        Type localVarReturnType = new TypeToken<List<EmployeeIdResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToPaylocityAsync(String companyId, Employee json, final ApiCallback<List<EmployeeIdResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToPaylocityValidateBeforeCall(companyId, json, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeIdResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToPaylocityRequestBuilder {
        private final String companyId;
        private List<Object> additionalDirectDeposit;
        private List<Object> additionalRate;
        private Object benefitSetup;
        private Object birthDate;
        private Object companyFEIN;
        private Object companyName;
        private Object currency;
        private List<Object> customBooleanFields;
        private List<Object> customDateFields;
        private List<Object> customDropDownFields;
        private List<Object> customNumberFields;
        private List<Object> customTextFields;
        private Object departmentPosition;
        private Object disabilityDescription;
        private List<Object> emergencyContacts;
        private Object employeeId;
        private Object ethnicity;
        private Object federalTax;
        private Object firstName;
        private Object gender;
        private Object homeAddress;
        private Boolean isHighlyCompensated;
        private Boolean isSmoker;
        private Object lastName;
        private List<Object> localTax;
        private Object mainDirectDeposit;
        private Object maritalStatus;
        private Object middleName;
        private Object nonPrimaryStateTax;
        private Object ownerPercent;
        private Object preferredName;
        private Object primaryPayRate;
        private Object primaryStateTax;
        private Object priorLastName;
        private Object salutation;
        private Object ssn;
        private Object status;
        private Object suffix;
        private Object taxSetup;
        private Object veteranDescription;
        private Object webTime;
        private Object workAddress;
        private Object workEligibility;

        private AddToPaylocityRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set additionalDirectDeposit
         * @param additionalDirectDeposit Add up to 19 direct deposit accounts in addition to the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with information provided on the request. GET API will not return direct deposit data. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder additionalDirectDeposit(List<Object> additionalDirectDeposit) {
            this.additionalDirectDeposit = additionalDirectDeposit;
            return this;
        }
        
        /**
         * Set additionalRate
         * @param additionalRate Add Additional Rates. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder additionalRate(List<Object> additionalRate) {
            this.additionalRate = additionalRate;
            return this;
        }
        
        /**
         * Set benefitSetup
         * @param benefitSetup  Add or update setup values used for employee benefits integration, insurance plan settings, and ACA reporting. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder benefitSetup(Object benefitSetup) {
            this.benefitSetup = benefitSetup;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder birthDate(Object birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set companyFEIN
         * @param companyFEIN Company FEIN as defined in Paylocity Payroll/HR solution, applicable with GET requests only.&lt;br  /&gt; Max length: 20 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder companyFEIN(Object companyFEIN) {
            this.companyFEIN = companyFEIN;
            return this;
        }
        
        /**
         * Set companyName
         * @param companyName Company name as defined in Paylocity Payroll/HR solution, applicable with GET requests only.&lt;br  /&gt; Max length: 50 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder companyName(Object companyName) {
            this.companyName = companyName;
            return this;
        }
        
        /**
         * Set currency
         * @param currency Employee is paid in this currency. &lt;br  /&gt;Max length: 30 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder currency(Object currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set customBooleanFields
         * @param customBooleanFields Up to 8 custom fields of boolean (checkbox) type value. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder customBooleanFields(List<Object> customBooleanFields) {
            this.customBooleanFields = customBooleanFields;
            return this;
        }
        
        /**
         * Set customDateFields
         * @param customDateFields Up to 8 custom fields of the date type value. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder customDateFields(List<Object> customDateFields) {
            this.customDateFields = customDateFields;
            return this;
        }
        
        /**
         * Set customDropDownFields
         * @param customDropDownFields Up to 8 custom fields of the dropdown type value. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder customDropDownFields(List<Object> customDropDownFields) {
            this.customDropDownFields = customDropDownFields;
            return this;
        }
        
        /**
         * Set customNumberFields
         * @param customNumberFields Up to 8 custom fields of numeric type value. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder customNumberFields(List<Object> customNumberFields) {
            this.customNumberFields = customNumberFields;
            return this;
        }
        
        /**
         * Set customTextFields
         * @param customTextFields Up to 8 custom fields of text type value. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder customTextFields(List<Object> customTextFields) {
            this.customTextFields = customTextFields;
            return this;
        }
        
        /**
         * Set departmentPosition
         * @param departmentPosition Add or update home department cost center, position, supervisor, reviewer, employment type, EEO class, pay settings, and union information. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder departmentPosition(Object departmentPosition) {
            this.departmentPosition = departmentPosition;
            return this;
        }
        
        /**
         * Set disabilityDescription
         * @param disabilityDescription Indicates if employee has disability status. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder disabilityDescription(Object disabilityDescription) {
            this.disabilityDescription = disabilityDescription;
            return this;
        }
        
        /**
         * Set emergencyContacts
         * @param emergencyContacts Add or update Emergency Contacts. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder emergencyContacts(List<Object> emergencyContacts) {
            this.emergencyContacts = emergencyContacts;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId Leave blank to have Paylocity Payroll/HR solution automatically assign the next available employee ID.&lt;br  /&gt;Max length: 10 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder employeeId(Object employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set ethnicity
         * @param ethnicity Employee ethnicity.&lt;br  /&gt; Max length: 10 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder ethnicity(Object ethnicity) {
            this.ethnicity = ethnicity;
            return this;
        }
        
        /**
         * Set federalTax
         * @param federalTax Add or update federal tax amount type (taxCalculationCode), amount or percentage, filing status, and exemptions. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder federalTax(Object federalTax) {
            this.federalTax = federalTax;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName Employee first name. &lt;br  /&gt;Max length: 40 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder firstName(Object firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set gender
         * @param gender Employee gender. Common values *M* (Male), *F* (Female). &lt;br  /&gt;Max length: 1 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder gender(Object gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set homeAddress
         * @param homeAddress Add or update employee&#39;s home address, personal phone numbers, and personal email. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder homeAddress(Object homeAddress) {
            this.homeAddress = homeAddress;
            return this;
        }
        
        /**
         * Set isHighlyCompensated
         * @param isHighlyCompensated Indicates if employee meets the highly compensated employee criteria. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder isHighlyCompensated(Boolean isHighlyCompensated) {
            this.isHighlyCompensated = isHighlyCompensated;
            return this;
        }
        
        /**
         * Set isSmoker
         * @param isSmoker Indicates if employee is a smoker. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder isSmoker(Boolean isSmoker) {
            this.isSmoker = isSmoker;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Employee last name. &lt;br  /&gt;Max length: 40 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder lastName(Object lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set localTax
         * @param localTax Add, update, or delete local tax code, filing status, and exemptions including  PA-PSD taxes. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder localTax(List<Object> localTax) {
            this.localTax = localTax;
            return this;
        }
        
        /**
         * Set mainDirectDeposit
         * @param mainDirectDeposit Add the main direct deposit account. After deposits are made to any additional direct deposit accounts, the remaining net check is deposited in the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with what is provided on the request. GET API will not return direct deposit data. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder mainDirectDeposit(Object mainDirectDeposit) {
            this.mainDirectDeposit = mainDirectDeposit;
            return this;
        }
        
        /**
         * Set maritalStatus
         * @param maritalStatus Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. &lt;br  /&gt;Max length: 10 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder maritalStatus(Object maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName Employee middle name.&lt;br  /&gt; Max length: 20 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder middleName(Object middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set nonPrimaryStateTax
         * @param nonPrimaryStateTax Add or update non-primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, supplemental check (specialCheckCalc), and reciprocity code information. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder nonPrimaryStateTax(Object nonPrimaryStateTax) {
            this.nonPrimaryStateTax = nonPrimaryStateTax;
            return this;
        }
        
        /**
         * Set ownerPercent
         * @param ownerPercent Percentage of employee&#39;s ownership in the company, entered as a whole number. &lt;br  /&gt; Decimal (12,2) (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder ownerPercent(Object ownerPercent) {
            this.ownerPercent = ownerPercent;
            return this;
        }
        
        /**
         * Set preferredName
         * @param preferredName Employee preferred display name.&lt;br  /&gt; Max length: 20 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder preferredName(Object preferredName) {
            this.preferredName = preferredName;
            return this;
        }
        
        /**
         * Set primaryPayRate
         * @param primaryPayRate Add or update hourly or salary pay rate, effective date, and pay frequency. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder primaryPayRate(Object primaryPayRate) {
            this.primaryPayRate = primaryPayRate;
            return this;
        }
        
        /**
         * Set primaryStateTax
         * @param primaryStateTax Add or update primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, and supplemental check (specialCheckCalc) information. Only one primary state is allowed. Sending an updated primary state will replace the current primary state. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder primaryStateTax(Object primaryStateTax) {
            this.primaryStateTax = primaryStateTax;
            return this;
        }
        
        /**
         * Set priorLastName
         * @param priorLastName Prior last name if applicable.&lt;br  /&gt;Max length: 40 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder priorLastName(Object priorLastName) {
            this.priorLastName = priorLastName;
            return this;
        }
        
        /**
         * Set salutation
         * @param salutation Employee preferred salutation. &lt;br  /&gt;Max length: 10 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder salutation(Object salutation) {
            this.salutation = salutation;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn Employee social security number. Leave it blank if valid social security number not available. &lt;br  /&gt;Max length: 11 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder ssn(Object ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set status
         * @param status Add or update employee status, change reason, effective date, and adjusted seniority date. Note that companies that are still in Implementation cannot hire future employees. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder status(Object status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set suffix
         * @param suffix Employee name suffix. Common values are *Jr, Sr, II*.&lt;br  /&gt;Max length: 30 (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder suffix(Object suffix) {
            this.suffix = suffix;
            return this;
        }
        
        /**
         * Set taxSetup
         * @param taxSetup Add tax form, 1099 exempt reasons and notes, and 943 agricultural employee information. Once the employee receives wages, this information cannot be updated. Add or update SUI tax state, retirement plan, and statutory information. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder taxSetup(Object taxSetup) {
            this.taxSetup = taxSetup;
            return this;
        }
        
        /**
         * Set veteranDescription
         * @param veteranDescription Indicates if employee is a veteran. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder veteranDescription(Object veteranDescription) {
            this.veteranDescription = veteranDescription;
            return this;
        }
        
        /**
         * Set webTime
         * @param webTime Add or update Web Time badge number and charge rate and synchronize Paylocity Payroll/HR solution and Web Time employee data. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder webTime(Object webTime) {
            this.webTime = webTime;
            return this;
        }
        
        /**
         * Set workAddress
         * @param workAddress Add or update employee&#39;s work address, phone numbers, and email. Work Location drop down field is not included. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder workAddress(Object workAddress) {
            this.workAddress = workAddress;
            return this;
        }
        
        /**
         * Set workEligibility
         * @param workEligibility Add or update I-9 work authorization information. (optional)
         * @return AddToPaylocityRequestBuilder
         */
        public AddToPaylocityRequestBuilder workEligibility(Object workEligibility) {
            this.workEligibility = workEligibility;
            return this;
        }
        
        /**
         * Build call for addToPaylocity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Employee json = buildBodyParams();
            return addToPaylocityCall(companyId, json, _callback);
        }

        private Employee buildBodyParams() {
            Employee json = new Employee();
            json.additionalDirectDeposit(this.additionalDirectDeposit);
            json.additionalRate(this.additionalRate);
            json.benefitSetup(this.benefitSetup);
            json.birthDate(this.birthDate);
            json.companyFEIN(this.companyFEIN);
            json.companyName(this.companyName);
            json.currency(this.currency);
            json.customBooleanFields(this.customBooleanFields);
            json.customDateFields(this.customDateFields);
            json.customDropDownFields(this.customDropDownFields);
            json.customNumberFields(this.customNumberFields);
            json.customTextFields(this.customTextFields);
            json.departmentPosition(this.departmentPosition);
            json.disabilityDescription(this.disabilityDescription);
            json.emergencyContacts(this.emergencyContacts);
            json.employeeId(this.employeeId);
            json.ethnicity(this.ethnicity);
            json.federalTax(this.federalTax);
            json.firstName(this.firstName);
            json.gender(this.gender);
            json.homeAddress(this.homeAddress);
            json.isHighlyCompensated(this.isHighlyCompensated);
            json.isSmoker(this.isSmoker);
            json.lastName(this.lastName);
            json.localTax(this.localTax);
            json.mainDirectDeposit(this.mainDirectDeposit);
            json.maritalStatus(this.maritalStatus);
            json.middleName(this.middleName);
            json.nonPrimaryStateTax(this.nonPrimaryStateTax);
            json.ownerPercent(this.ownerPercent);
            json.preferredName(this.preferredName);
            json.primaryPayRate(this.primaryPayRate);
            json.primaryStateTax(this.primaryStateTax);
            json.priorLastName(this.priorLastName);
            json.salutation(this.salutation);
            json.ssn(this.ssn);
            json.status(this.status);
            json.suffix(this.suffix);
            json.taxSetup(this.taxSetup);
            json.veteranDescription(this.veteranDescription);
            json.webTime(this.webTime);
            json.workAddress(this.workAddress);
            json.workEligibility(this.workEligibility);
            return json;
        }

        /**
         * Execute addToPaylocity request
         * @return List&lt;EmployeeIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeIdResponse> execute() throws ApiException {
            Employee json = buildBodyParams();
            ApiResponse<List<EmployeeIdResponse>> localVarResp = addToPaylocityWithHttpInfo(companyId, json);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToPaylocity request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeIdResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeIdResponse>> executeWithHttpInfo() throws ApiException {
            Employee json = buildBodyParams();
            return addToPaylocityWithHttpInfo(companyId, json);
        }

        /**
         * Execute addToPaylocity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeIdResponse>> _callback) throws ApiException {
            Employee json = buildBodyParams();
            return addToPaylocityAsync(companyId, json, _callback);
        }
    }

    /**
     * Add new employee
     * New Employee API sends new employee data directly to Paylocity Payroll/HR solution. Companies who use the New Hire Template in Paylocity Payroll/HR solution may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param json Employee Model (required)
     * @return AddToPaylocityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public AddToPaylocityRequestBuilder addToPaylocity(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new AddToPaylocityRequestBuilder(companyId);
    }
    private okhttp3.Call getAllEmployeesCall(String companyId, Integer pagesize, Integer pagenumber, Boolean includetotalcount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (pagenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagenumber", pagenumber));
        }

        if (includetotalcount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includetotalcount", includetotalcount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllEmployeesValidateBeforeCall(String companyId, Integer pagesize, Integer pagenumber, Boolean includetotalcount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAllEmployees(Async)");
        }

        return getAllEmployeesCall(companyId, pagesize, pagenumber, includetotalcount, _callback);

    }


    private ApiResponse<List<EmployeeInfo>> getAllEmployeesWithHttpInfo(String companyId, Integer pagesize, Integer pagenumber, Boolean includetotalcount) throws ApiException {
        okhttp3.Call localVarCall = getAllEmployeesValidateBeforeCall(companyId, pagesize, pagenumber, includetotalcount, null);
        Type localVarReturnType = new TypeToken<List<EmployeeInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllEmployeesAsync(String companyId, Integer pagesize, Integer pagenumber, Boolean includetotalcount, final ApiCallback<List<EmployeeInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllEmployeesValidateBeforeCall(companyId, pagesize, pagenumber, includetotalcount, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllEmployeesRequestBuilder {
        private final String companyId;
        private Integer pagesize;
        private Integer pagenumber;
        private Boolean includetotalcount;

        private GetAllEmployeesRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set pagesize
         * @param pagesize Number of records per page. Default value is 25. (optional)
         * @return GetAllEmployeesRequestBuilder
         */
        public GetAllEmployeesRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set pagenumber
         * @param pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0. (optional)
         * @return GetAllEmployeesRequestBuilder
         */
        public GetAllEmployeesRequestBuilder pagenumber(Integer pagenumber) {
            this.pagenumber = pagenumber;
            return this;
        }
        
        /**
         * Set includetotalcount
         * @param includetotalcount Whether to include the total record count in the header&#39;s X-Pcty-Total-Count property. Default value is true. (optional)
         * @return GetAllEmployeesRequestBuilder
         */
        public GetAllEmployeesRequestBuilder includetotalcount(Boolean includetotalcount) {
            this.includetotalcount = includetotalcount;
            return this;
        }
        
        /**
         * Build call for getAllEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllEmployeesCall(companyId, pagesize, pagenumber, includetotalcount, _callback);
        }


        /**
         * Execute getAllEmployees request
         * @return List&lt;EmployeeInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeInfo> execute() throws ApiException {
            ApiResponse<List<EmployeeInfo>> localVarResp = getAllEmployeesWithHttpInfo(companyId, pagesize, pagenumber, includetotalcount);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllEmployees request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeInfo&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeInfo>> executeWithHttpInfo() throws ApiException {
            return getAllEmployeesWithHttpInfo(companyId, pagesize, pagenumber, includetotalcount);
        }

        /**
         * Execute getAllEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeInfo>> _callback) throws ApiException {
            return getAllEmployeesAsync(companyId, pagesize, pagenumber, includetotalcount, _callback);
        }
    }

    /**
     * Get all employees
     * Get All Employees API will return employee data currently available in Paylocity Payroll/HR solution. \\ &gt; 🚧 Maintenance Mode &gt;  &gt; _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ &gt;   &gt; The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees) should be used when possible in place of the Employee resources of this API
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @return GetAllEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetAllEmployeesRequestBuilder getAllEmployees(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetAllEmployeesRequestBuilder(companyId);
    }
    private okhttp3.Call getEmployeeDataCall(String companyId, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeDataValidateBeforeCall(String companyId, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getEmployeeData(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getEmployeeData(Async)");
        }

        return getEmployeeDataCall(companyId, employeeId, _callback);

    }


    private ApiResponse<List<Employee>> getEmployeeDataWithHttpInfo(String companyId, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeDataValidateBeforeCall(companyId, employeeId, null);
        Type localVarReturnType = new TypeToken<List<Employee>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeDataAsync(String companyId, String employeeId, final ApiCallback<List<Employee>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeDataValidateBeforeCall(companyId, employeeId, _callback);
        Type localVarReturnType = new TypeToken<List<Employee>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeDataRequestBuilder {
        private final String companyId;
        private final String employeeId;

        private GetEmployeeDataRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getEmployeeData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeDataCall(companyId, employeeId, _callback);
        }


        /**
         * Execute getEmployeeData request
         * @return List&lt;Employee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public List<Employee> execute() throws ApiException {
            ApiResponse<List<Employee>> localVarResp = getEmployeeDataWithHttpInfo(companyId, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeData request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Employee&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Employee>> executeWithHttpInfo() throws ApiException {
            return getEmployeeDataWithHttpInfo(companyId, employeeId);
        }

        /**
         * Execute getEmployeeData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Employee>> _callback) throws ApiException {
            return getEmployeeDataAsync(companyId, employeeId, _callback);
        }
    }

    /**
     * Get employee
     * Get Employee API will return employee data currently available in Paylocity Payroll/HR solution. \\ &gt; 🚧 Maintenance Mode &gt;  &gt; _This API is in a limited support mode and certain resources will be moved to a sunset status in the next 18-24 months._ &gt;   &gt; The [Employee Demographic API](ref:get_corehr-v1-companies-companyid-employees-employeeid) should be used when possible in place of the Employee resources of this API
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @return GetEmployeeDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeDataRequestBuilder getEmployeeData(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetEmployeeDataRequestBuilder(companyId, employeeId);
    }
    private okhttp3.Call updateEmployeeDataCall(String companyId, String employeeId, Employee json, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = json;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeDataValidateBeforeCall(String companyId, String employeeId, Employee json, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateEmployeeData(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateEmployeeData(Async)");
        }

        // verify the required parameter 'json' is set
        if (json == null) {
            throw new ApiException("Missing the required parameter 'json' when calling updateEmployeeData(Async)");
        }

        return updateEmployeeDataCall(companyId, employeeId, json, _callback);

    }


    private ApiResponse<Void> updateEmployeeDataWithHttpInfo(String companyId, String employeeId, Employee json) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeDataValidateBeforeCall(companyId, employeeId, json, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmployeeDataAsync(String companyId, String employeeId, Employee json, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeDataValidateBeforeCall(companyId, employeeId, json, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeDataRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private List<Object> additionalDirectDeposit;
        private List<Object> additionalRate;
        private Object benefitSetup;
        private Object birthDate;
        private Object companyFEIN;
        private Object companyName;
        private Object currency;
        private List<Object> customBooleanFields;
        private List<Object> customDateFields;
        private List<Object> customDropDownFields;
        private List<Object> customNumberFields;
        private List<Object> customTextFields;
        private Object departmentPosition;
        private Object disabilityDescription;
        private List<Object> emergencyContacts;
        private Object employeeId;
        private Object ethnicity;
        private Object federalTax;
        private Object firstName;
        private Object gender;
        private Object homeAddress;
        private Boolean isHighlyCompensated;
        private Boolean isSmoker;
        private Object lastName;
        private List<Object> localTax;
        private Object mainDirectDeposit;
        private Object maritalStatus;
        private Object middleName;
        private Object nonPrimaryStateTax;
        private Object ownerPercent;
        private Object preferredName;
        private Object primaryPayRate;
        private Object primaryStateTax;
        private Object priorLastName;
        private Object salutation;
        private Object ssn;
        private Object status;
        private Object suffix;
        private Object taxSetup;
        private Object veteranDescription;
        private Object webTime;
        private Object workAddress;
        private Object workEligibility;

        private UpdateEmployeeDataRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set additionalDirectDeposit
         * @param additionalDirectDeposit Add up to 19 direct deposit accounts in addition to the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with information provided on the request. GET API will not return direct deposit data. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder additionalDirectDeposit(List<Object> additionalDirectDeposit) {
            this.additionalDirectDeposit = additionalDirectDeposit;
            return this;
        }
        
        /**
         * Set additionalRate
         * @param additionalRate Add Additional Rates. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder additionalRate(List<Object> additionalRate) {
            this.additionalRate = additionalRate;
            return this;
        }
        
        /**
         * Set benefitSetup
         * @param benefitSetup  Add or update setup values used for employee benefits integration, insurance plan settings, and ACA reporting. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder benefitSetup(Object benefitSetup) {
            this.benefitSetup = benefitSetup;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder birthDate(Object birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set companyFEIN
         * @param companyFEIN Company FEIN as defined in Paylocity Payroll/HR solution, applicable with GET requests only.&lt;br  /&gt; Max length: 20 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder companyFEIN(Object companyFEIN) {
            this.companyFEIN = companyFEIN;
            return this;
        }
        
        /**
         * Set companyName
         * @param companyName Company name as defined in Paylocity Payroll/HR solution, applicable with GET requests only.&lt;br  /&gt; Max length: 50 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder companyName(Object companyName) {
            this.companyName = companyName;
            return this;
        }
        
        /**
         * Set currency
         * @param currency Employee is paid in this currency. &lt;br  /&gt;Max length: 30 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder currency(Object currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set customBooleanFields
         * @param customBooleanFields Up to 8 custom fields of boolean (checkbox) type value. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder customBooleanFields(List<Object> customBooleanFields) {
            this.customBooleanFields = customBooleanFields;
            return this;
        }
        
        /**
         * Set customDateFields
         * @param customDateFields Up to 8 custom fields of the date type value. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder customDateFields(List<Object> customDateFields) {
            this.customDateFields = customDateFields;
            return this;
        }
        
        /**
         * Set customDropDownFields
         * @param customDropDownFields Up to 8 custom fields of the dropdown type value. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder customDropDownFields(List<Object> customDropDownFields) {
            this.customDropDownFields = customDropDownFields;
            return this;
        }
        
        /**
         * Set customNumberFields
         * @param customNumberFields Up to 8 custom fields of numeric type value. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder customNumberFields(List<Object> customNumberFields) {
            this.customNumberFields = customNumberFields;
            return this;
        }
        
        /**
         * Set customTextFields
         * @param customTextFields Up to 8 custom fields of text type value. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder customTextFields(List<Object> customTextFields) {
            this.customTextFields = customTextFields;
            return this;
        }
        
        /**
         * Set departmentPosition
         * @param departmentPosition Add or update home department cost center, position, supervisor, reviewer, employment type, EEO class, pay settings, and union information. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder departmentPosition(Object departmentPosition) {
            this.departmentPosition = departmentPosition;
            return this;
        }
        
        /**
         * Set disabilityDescription
         * @param disabilityDescription Indicates if employee has disability status. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder disabilityDescription(Object disabilityDescription) {
            this.disabilityDescription = disabilityDescription;
            return this;
        }
        
        /**
         * Set emergencyContacts
         * @param emergencyContacts Add or update Emergency Contacts. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder emergencyContacts(List<Object> emergencyContacts) {
            this.emergencyContacts = emergencyContacts;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId Leave blank to have Paylocity Payroll/HR solution automatically assign the next available employee ID.&lt;br  /&gt;Max length: 10 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder employeeId(Object employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set ethnicity
         * @param ethnicity Employee ethnicity.&lt;br  /&gt; Max length: 10 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder ethnicity(Object ethnicity) {
            this.ethnicity = ethnicity;
            return this;
        }
        
        /**
         * Set federalTax
         * @param federalTax Add or update federal tax amount type (taxCalculationCode), amount or percentage, filing status, and exemptions. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder federalTax(Object federalTax) {
            this.federalTax = federalTax;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName Employee first name. &lt;br  /&gt;Max length: 40 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder firstName(Object firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set gender
         * @param gender Employee gender. Common values *M* (Male), *F* (Female). &lt;br  /&gt;Max length: 1 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder gender(Object gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set homeAddress
         * @param homeAddress Add or update employee&#39;s home address, personal phone numbers, and personal email. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder homeAddress(Object homeAddress) {
            this.homeAddress = homeAddress;
            return this;
        }
        
        /**
         * Set isHighlyCompensated
         * @param isHighlyCompensated Indicates if employee meets the highly compensated employee criteria. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder isHighlyCompensated(Boolean isHighlyCompensated) {
            this.isHighlyCompensated = isHighlyCompensated;
            return this;
        }
        
        /**
         * Set isSmoker
         * @param isSmoker Indicates if employee is a smoker. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder isSmoker(Boolean isSmoker) {
            this.isSmoker = isSmoker;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Employee last name. &lt;br  /&gt;Max length: 40 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder lastName(Object lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set localTax
         * @param localTax Add, update, or delete local tax code, filing status, and exemptions including  PA-PSD taxes. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder localTax(List<Object> localTax) {
            this.localTax = localTax;
            return this;
        }
        
        /**
         * Set mainDirectDeposit
         * @param mainDirectDeposit Add the main direct deposit account. After deposits are made to any additional direct deposit accounts, the remaining net check is deposited in the main direct deposit account. IMPORTANT: A direct deposit update will remove ALL existing main and additional direct deposit information in WebPay and replace with what is provided on the request. GET API will not return direct deposit data. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder mainDirectDeposit(Object mainDirectDeposit) {
            this.mainDirectDeposit = mainDirectDeposit;
            return this;
        }
        
        /**
         * Set maritalStatus
         * @param maritalStatus Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. &lt;br  /&gt;Max length: 10 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder maritalStatus(Object maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName Employee middle name.&lt;br  /&gt; Max length: 20 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder middleName(Object middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set nonPrimaryStateTax
         * @param nonPrimaryStateTax Add or update non-primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, supplemental check (specialCheckCalc), and reciprocity code information. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder nonPrimaryStateTax(Object nonPrimaryStateTax) {
            this.nonPrimaryStateTax = nonPrimaryStateTax;
            return this;
        }
        
        /**
         * Set ownerPercent
         * @param ownerPercent Percentage of employee&#39;s ownership in the company, entered as a whole number. &lt;br  /&gt; Decimal (12,2) (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder ownerPercent(Object ownerPercent) {
            this.ownerPercent = ownerPercent;
            return this;
        }
        
        /**
         * Set preferredName
         * @param preferredName Employee preferred display name.&lt;br  /&gt; Max length: 20 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder preferredName(Object preferredName) {
            this.preferredName = preferredName;
            return this;
        }
        
        /**
         * Set primaryPayRate
         * @param primaryPayRate Add or update hourly or salary pay rate, effective date, and pay frequency. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder primaryPayRate(Object primaryPayRate) {
            this.primaryPayRate = primaryPayRate;
            return this;
        }
        
        /**
         * Set primaryStateTax
         * @param primaryStateTax Add or update primary state tax code, amount type (taxCalculationCode), amount or percentage, filing status, exemptions, and supplemental check (specialCheckCalc) information. Only one primary state is allowed. Sending an updated primary state will replace the current primary state. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder primaryStateTax(Object primaryStateTax) {
            this.primaryStateTax = primaryStateTax;
            return this;
        }
        
        /**
         * Set priorLastName
         * @param priorLastName Prior last name if applicable.&lt;br  /&gt;Max length: 40 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder priorLastName(Object priorLastName) {
            this.priorLastName = priorLastName;
            return this;
        }
        
        /**
         * Set salutation
         * @param salutation Employee preferred salutation. &lt;br  /&gt;Max length: 10 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder salutation(Object salutation) {
            this.salutation = salutation;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn Employee social security number. Leave it blank if valid social security number not available. &lt;br  /&gt;Max length: 11 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder ssn(Object ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set status
         * @param status Add or update employee status, change reason, effective date, and adjusted seniority date. Note that companies that are still in Implementation cannot hire future employees. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder status(Object status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set suffix
         * @param suffix Employee name suffix. Common values are *Jr, Sr, II*.&lt;br  /&gt;Max length: 30 (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder suffix(Object suffix) {
            this.suffix = suffix;
            return this;
        }
        
        /**
         * Set taxSetup
         * @param taxSetup Add tax form, 1099 exempt reasons and notes, and 943 agricultural employee information. Once the employee receives wages, this information cannot be updated. Add or update SUI tax state, retirement plan, and statutory information. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder taxSetup(Object taxSetup) {
            this.taxSetup = taxSetup;
            return this;
        }
        
        /**
         * Set veteranDescription
         * @param veteranDescription Indicates if employee is a veteran. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder veteranDescription(Object veteranDescription) {
            this.veteranDescription = veteranDescription;
            return this;
        }
        
        /**
         * Set webTime
         * @param webTime Add or update Web Time badge number and charge rate and synchronize Paylocity Payroll/HR solution and Web Time employee data. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder webTime(Object webTime) {
            this.webTime = webTime;
            return this;
        }
        
        /**
         * Set workAddress
         * @param workAddress Add or update employee&#39;s work address, phone numbers, and email. Work Location drop down field is not included. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder workAddress(Object workAddress) {
            this.workAddress = workAddress;
            return this;
        }
        
        /**
         * Set workEligibility
         * @param workEligibility Add or update I-9 work authorization information. (optional)
         * @return UpdateEmployeeDataRequestBuilder
         */
        public UpdateEmployeeDataRequestBuilder workEligibility(Object workEligibility) {
            this.workEligibility = workEligibility;
            return this;
        }
        
        /**
         * Build call for updateEmployeeData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Employee json = buildBodyParams();
            return updateEmployeeDataCall(companyId, employeeId, json, _callback);
        }

        private Employee buildBodyParams() {
            Employee json = new Employee();
            json.additionalDirectDeposit(this.additionalDirectDeposit);
            json.additionalRate(this.additionalRate);
            json.benefitSetup(this.benefitSetup);
            json.birthDate(this.birthDate);
            json.companyFEIN(this.companyFEIN);
            json.companyName(this.companyName);
            json.currency(this.currency);
            json.customBooleanFields(this.customBooleanFields);
            json.customDateFields(this.customDateFields);
            json.customDropDownFields(this.customDropDownFields);
            json.customNumberFields(this.customNumberFields);
            json.customTextFields(this.customTextFields);
            json.departmentPosition(this.departmentPosition);
            json.disabilityDescription(this.disabilityDescription);
            json.emergencyContacts(this.emergencyContacts);
            json.employeeId(this.employeeId);
            json.ethnicity(this.ethnicity);
            json.federalTax(this.federalTax);
            json.firstName(this.firstName);
            json.gender(this.gender);
            json.homeAddress(this.homeAddress);
            json.isHighlyCompensated(this.isHighlyCompensated);
            json.isSmoker(this.isSmoker);
            json.lastName(this.lastName);
            json.localTax(this.localTax);
            json.mainDirectDeposit(this.mainDirectDeposit);
            json.maritalStatus(this.maritalStatus);
            json.middleName(this.middleName);
            json.nonPrimaryStateTax(this.nonPrimaryStateTax);
            json.ownerPercent(this.ownerPercent);
            json.preferredName(this.preferredName);
            json.primaryPayRate(this.primaryPayRate);
            json.primaryStateTax(this.primaryStateTax);
            json.priorLastName(this.priorLastName);
            json.salutation(this.salutation);
            json.ssn(this.ssn);
            json.status(this.status);
            json.suffix(this.suffix);
            json.taxSetup(this.taxSetup);
            json.veteranDescription(this.veteranDescription);
            json.webTime(this.webTime);
            json.workAddress(this.workAddress);
            json.workEligibility(this.workEligibility);
            return json;
        }

        /**
         * Execute updateEmployeeData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Employee json = buildBodyParams();
            updateEmployeeDataWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute updateEmployeeData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Employee json = buildBodyParams();
            return updateEmployeeDataWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute updateEmployeeData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Employee json = buildBodyParams();
            return updateEmployeeDataAsync(companyId, employeeId, json, _callback);
        }
    }

    /**
     * Update employee
     * Update Employee API will update existing employee data in WebPay.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param json Employee Model (required)
     * @return UpdateEmployeeDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeDataRequestBuilder updateEmployeeData(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateEmployeeDataRequestBuilder(companyId, employeeId);
    }
}
