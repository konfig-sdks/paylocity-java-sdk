/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Earning;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EarningsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EarningsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EarningsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addOrUpdateEarningCall(String companyId, String employeeId, Earning json, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = json;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/earnings"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrUpdateEarningValidateBeforeCall(String companyId, String employeeId, Earning json, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling addOrUpdateEarning(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addOrUpdateEarning(Async)");
        }

        // verify the required parameter 'json' is set
        if (json == null) {
            throw new ApiException("Missing the required parameter 'json' when calling addOrUpdateEarning(Async)");
        }

        return addOrUpdateEarningCall(companyId, employeeId, json, _callback);

    }


    private ApiResponse<Void> addOrUpdateEarningWithHttpInfo(String companyId, String employeeId, Earning json) throws ApiException {
        okhttp3.Call localVarCall = addOrUpdateEarningValidateBeforeCall(companyId, employeeId, json, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addOrUpdateEarningAsync(String companyId, String employeeId, Earning json, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrUpdateEarningValidateBeforeCall(companyId, employeeId, json, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddOrUpdateEarningRequestBuilder {
        private final Object earningCode;
        private final Object startDate;
        private final String companyId;
        private final String employeeId;
        private Object agency;
        private Object amount;
        private Object annualMaximum;
        private Object calculationCode;
        private Object costCenter1;
        private Object costCenter2;
        private Object costCenter3;
        private Object effectiveDate;
        private Object endDate;
        private Object frequency;
        private Object goal;
        private Object hoursOrUnits;
        private Object isSelfInsured;
        private Object jobCode;
        private Object miscellaneousInfo;
        private Object paidTowardsGoal;
        private Object payPeriodMaximum;
        private Object payPeriodMinimum;
        private Object rate;
        private Object rateCode;

        private AddOrUpdateEarningRequestBuilder(Object earningCode, Object startDate, String companyId, String employeeId) {
            this.earningCode = earningCode;
            this.startDate = startDate;
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set agency
         * @param agency Third-party agency associated with earning. Must match Company setup.&lt;br  /&gt;Max length: 10 (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder agency(Object agency) {
            this.agency = agency;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 &#x3D; 10%).  &lt;br  /&gt;Decimal(12,2) (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder amount(Object amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set annualMaximum
         * @param annualMaximum Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. &lt;br  /&gt;Decimal(12,2) (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder annualMaximum(Object annualMaximum) {
            this.annualMaximum = annualMaximum;
            return this;
        }
        
        /**
         * Set calculationCode
         * @param calculationCode Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. &lt;br  /&gt;Max length: 20 (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder calculationCode(Object calculationCode) {
            this.calculationCode = calculationCode;
            return this;
        }
        
        /**
         * Set costCenter1
         * @param costCenter1 Cost Center associated with earning. Must match Company setup.&lt;br  /&gt; Max length: 10 (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder costCenter1(Object costCenter1) {
            this.costCenter1 = costCenter1;
            return this;
        }
        
        /**
         * Set costCenter2
         * @param costCenter2 Cost Center associated with earning. Must match Company setup.&lt;br  /&gt; Max length: 10 (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder costCenter2(Object costCenter2) {
            this.costCenter2 = costCenter2;
            return this;
        }
        
        /**
         * Set costCenter3
         * @param costCenter3 Cost Center associated with earning. Must match Company setup.&lt;br  /&gt; Max length: 10 (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder costCenter3(Object costCenter3) {
            this.costCenter3 = costCenter3;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD. (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder effectiveDate(Object effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD. (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder endDate(Object endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency Needed if earning is applied differently from the payroll frequency (one time earning for example).&lt;br  /&gt; Max length: 5 (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder frequency(Object frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set goal
         * @param goal Dollar amount. The employee earning will stop when the goal amount is reached.&lt;br  /&gt; Decimal(12,2) (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder goal(Object goal) {
            this.goal = goal;
            return this;
        }
        
        /**
         * Set hoursOrUnits
         * @param hoursOrUnits The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. &lt;br  /&gt; Decimal(12,2) (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder hoursOrUnits(Object hoursOrUnits) {
            this.hoursOrUnits = hoursOrUnits;
            return this;
        }
        
        /**
         * Set isSelfInsured
         * @param isSelfInsured Used for ACA. If not entered, defaulted to Company earning setup. (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder isSelfInsured(Object isSelfInsured) {
            this.isSelfInsured = isSelfInsured;
            return this;
        }
        
        /**
         * Set jobCode
         * @param jobCode Job code associated with earnings. Must match Company setup.&lt;br  /&gt; Max length: 20 (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder jobCode(Object jobCode) {
            this.jobCode = jobCode;
            return this;
        }
        
        /**
         * Set miscellaneousInfo
         * @param miscellaneousInfo Information to print on the check stub if agency is set up for this earning. &lt;br  /&gt;Max length: 50 (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder miscellaneousInfo(Object miscellaneousInfo) {
            this.miscellaneousInfo = miscellaneousInfo;
            return this;
        }
        
        /**
         * Set paidTowardsGoal
         * @param paidTowardsGoal Amount already paid to employee toward goal. &lt;br  /&gt; Decimal(12,2) (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder paidTowardsGoal(Object paidTowardsGoal) {
            this.paidTowardsGoal = paidTowardsGoal;
            return this;
        }
        
        /**
         * Set payPeriodMaximum
         * @param payPeriodMaximum Maximum amount of the earning on a single paycheck. &lt;br  /&gt; Decimal(12,2) (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder payPeriodMaximum(Object payPeriodMaximum) {
            this.payPeriodMaximum = payPeriodMaximum;
            return this;
        }
        
        /**
         * Set payPeriodMinimum
         * @param payPeriodMinimum Minimum amount of the earning on a single paycheck. &lt;br  /&gt; Decimal(12,2) (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder payPeriodMinimum(Object payPeriodMinimum) {
            this.payPeriodMinimum = payPeriodMinimum;
            return this;
        }
        
        /**
         * Set rate
         * @param rate Rate is used in conjunction with the hoursOrUnits field. &lt;br  /&gt; Decimal(12,2) (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder rate(Object rate) {
            this.rate = rate;
            return this;
        }
        
        /**
         * Set rateCode
         * @param rateCode Rate Code applies to additional pay rates entered for an employee. Must match Company setup. &lt;br  /&gt; Max length: 10 (optional)
         * @return AddOrUpdateEarningRequestBuilder
         */
        public AddOrUpdateEarningRequestBuilder rateCode(Object rateCode) {
            this.rateCode = rateCode;
            return this;
        }
        
        /**
         * Build call for addOrUpdateEarning
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Earning json = buildBodyParams();
            return addOrUpdateEarningCall(companyId, employeeId, json, _callback);
        }

        private Earning buildBodyParams() {
            Earning json = new Earning();
            json.agency(this.agency);
            json.amount(this.amount);
            json.annualMaximum(this.annualMaximum);
            json.calculationCode(this.calculationCode);
            json.costCenter1(this.costCenter1);
            json.costCenter2(this.costCenter2);
            json.costCenter3(this.costCenter3);
            json.earningCode(this.earningCode);
            json.effectiveDate(this.effectiveDate);
            json.endDate(this.endDate);
            json.frequency(this.frequency);
            json.goal(this.goal);
            json.hoursOrUnits(this.hoursOrUnits);
            json.isSelfInsured(this.isSelfInsured);
            json.jobCode(this.jobCode);
            json.miscellaneousInfo(this.miscellaneousInfo);
            json.paidTowardsGoal(this.paidTowardsGoal);
            json.payPeriodMaximum(this.payPeriodMaximum);
            json.payPeriodMinimum(this.payPeriodMinimum);
            json.rate(this.rate);
            json.rateCode(this.rateCode);
            json.startDate(this.startDate);
            return json;
        }

        /**
         * Execute addOrUpdateEarning request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Earning json = buildBodyParams();
            addOrUpdateEarningWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute addOrUpdateEarning request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Earning json = buildBodyParams();
            return addOrUpdateEarningWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute addOrUpdateEarning request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Earning json = buildBodyParams();
            return addOrUpdateEarningAsync(companyId, employeeId, json, _callback);
        }
    }

    /**
     * Add/Update Earning
     * Add/Update Earning API sends new or updated employee earnings information directly to Paylocity Payroll/HR solution.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param json Earning Model (required)
     * @return AddOrUpdateEarningRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public AddOrUpdateEarningRequestBuilder addOrUpdateEarning(Object earningCode, Object startDate, String companyId, String employeeId) throws IllegalArgumentException {
        if (earningCode == null) throw new IllegalArgumentException("\"earningCode\" is required but got null");
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddOrUpdateEarningRequestBuilder(earningCode, startDate, companyId, employeeId);
    }
    private okhttp3.Call deleteByCodeAndStartCall(String companyId, String employeeId, String earningCode, String startDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "earningCode" + "}", localVarApiClient.escapeString(earningCode.toString()))
            .replace("{" + "startDate" + "}", localVarApiClient.escapeString(startDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByCodeAndStartValidateBeforeCall(String companyId, String employeeId, String earningCode, String startDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteByCodeAndStart(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling deleteByCodeAndStart(Async)");
        }

        // verify the required parameter 'earningCode' is set
        if (earningCode == null) {
            throw new ApiException("Missing the required parameter 'earningCode' when calling deleteByCodeAndStart(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling deleteByCodeAndStart(Async)");
        }

        return deleteByCodeAndStartCall(companyId, employeeId, earningCode, startDate, _callback);

    }


    private ApiResponse<Void> deleteByCodeAndStartWithHttpInfo(String companyId, String employeeId, String earningCode, String startDate) throws ApiException {
        okhttp3.Call localVarCall = deleteByCodeAndStartValidateBeforeCall(companyId, employeeId, earningCode, startDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByCodeAndStartAsync(String companyId, String employeeId, String earningCode, String startDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByCodeAndStartValidateBeforeCall(companyId, employeeId, earningCode, startDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByCodeAndStartRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String earningCode;
        private final String startDate;

        private DeleteByCodeAndStartRequestBuilder(String companyId, String employeeId, String earningCode, String startDate) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.earningCode = earningCode;
            this.startDate = startDate;
        }

        /**
         * Build call for deleteByCodeAndStart
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByCodeAndStartCall(companyId, employeeId, earningCode, startDate, _callback);
        }


        /**
         * Execute deleteByCodeAndStart request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByCodeAndStartWithHttpInfo(companyId, employeeId, earningCode, startDate);
        }

        /**
         * Execute deleteByCodeAndStart request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByCodeAndStartWithHttpInfo(companyId, employeeId, earningCode, startDate);
        }

        /**
         * Execute deleteByCodeAndStart request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByCodeAndStartAsync(companyId, employeeId, earningCode, startDate, _callback);
        }
    }

    /**
     * Delete Earning by Earning Code and Start Date
     * Delete Earning by Earning Code and Start Date
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param earningCode Earning Code (required)
     * @param startDate Start Date (required)
     * @return DeleteByCodeAndStartRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByCodeAndStartRequestBuilder deleteByCodeAndStart(String companyId, String employeeId, String earningCode, String startDate) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (earningCode == null) throw new IllegalArgumentException("\"earningCode\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        return new DeleteByCodeAndStartRequestBuilder(companyId, employeeId, earningCode, startDate);
    }
    private okhttp3.Call getAllCall(String companyId, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/earnings"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String companyId, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAll(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAll(Async)");
        }

        return getAllCall(companyId, employeeId, _callback);

    }


    private ApiResponse<List<Earning>> getAllWithHttpInfo(String companyId, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(companyId, employeeId, null);
        Type localVarReturnType = new TypeToken<List<Earning>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String companyId, String employeeId, final ApiCallback<List<Earning>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(companyId, employeeId, _callback);
        Type localVarReturnType = new TypeToken<List<Earning>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String companyId;
        private final String employeeId;

        private GetAllRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(companyId, employeeId, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;Earning&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public List<Earning> execute() throws ApiException {
            ApiResponse<List<Earning>> localVarResp = getAllWithHttpInfo(companyId, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Earning&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Earning>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(companyId, employeeId);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Earning>> _callback) throws ApiException {
            return getAllAsync(companyId, employeeId, _callback);
        }
    }

    /**
     * Get All Earnings
     * Get All Earnings returns all earnings for the selected employee.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetAllRequestBuilder(companyId, employeeId);
    }
    private okhttp3.Call getByCodeAndStartCall(String companyId, String employeeId, String earningCode, String startDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "earningCode" + "}", localVarApiClient.escapeString(earningCode.toString()))
            .replace("{" + "startDate" + "}", localVarApiClient.escapeString(startDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByCodeAndStartValidateBeforeCall(String companyId, String employeeId, String earningCode, String startDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getByCodeAndStart(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByCodeAndStart(Async)");
        }

        // verify the required parameter 'earningCode' is set
        if (earningCode == null) {
            throw new ApiException("Missing the required parameter 'earningCode' when calling getByCodeAndStart(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getByCodeAndStart(Async)");
        }

        return getByCodeAndStartCall(companyId, employeeId, earningCode, startDate, _callback);

    }


    private ApiResponse<Earning> getByCodeAndStartWithHttpInfo(String companyId, String employeeId, String earningCode, String startDate) throws ApiException {
        okhttp3.Call localVarCall = getByCodeAndStartValidateBeforeCall(companyId, employeeId, earningCode, startDate, null);
        Type localVarReturnType = new TypeToken<Earning>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByCodeAndStartAsync(String companyId, String employeeId, String earningCode, String startDate, final ApiCallback<Earning> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByCodeAndStartValidateBeforeCall(companyId, employeeId, earningCode, startDate, _callback);
        Type localVarReturnType = new TypeToken<Earning>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByCodeAndStartRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String earningCode;
        private final String startDate;

        private GetByCodeAndStartRequestBuilder(String companyId, String employeeId, String earningCode, String startDate) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.earningCode = earningCode;
            this.startDate = startDate;
        }

        /**
         * Build call for getByCodeAndStart
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByCodeAndStartCall(companyId, employeeId, earningCode, startDate, _callback);
        }


        /**
         * Execute getByCodeAndStart request
         * @return Earning
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public Earning execute() throws ApiException {
            ApiResponse<Earning> localVarResp = getByCodeAndStartWithHttpInfo(companyId, employeeId, earningCode, startDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByCodeAndStart request with HTTP info returned
         * @return ApiResponse&lt;Earning&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Earning> executeWithHttpInfo() throws ApiException {
            return getByCodeAndStartWithHttpInfo(companyId, employeeId, earningCode, startDate);
        }

        /**
         * Execute getByCodeAndStart request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Earning> _callback) throws ApiException {
            return getByCodeAndStartAsync(companyId, employeeId, earningCode, startDate, _callback);
        }
    }

    /**
     * Get Earning by Earning Code and Start Date
     * Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param earningCode Earning Code (required)
     * @param startDate Start Date (required)
     * @return GetByCodeAndStartRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The employee does not exist, or the specified earningCode-startDate combination does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetByCodeAndStartRequestBuilder getByCodeAndStart(String companyId, String employeeId, String earningCode, String startDate) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (earningCode == null) throw new IllegalArgumentException("\"earningCode\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        return new GetByCodeAndStartRequestBuilder(companyId, employeeId, earningCode, startDate);
    }
    private okhttp3.Call getByEarningCodeCall(String companyId, String employeeId, String earningCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "earningCode" + "}", localVarApiClient.escapeString(earningCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEarningCodeValidateBeforeCall(String companyId, String employeeId, String earningCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getByEarningCode(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEarningCode(Async)");
        }

        // verify the required parameter 'earningCode' is set
        if (earningCode == null) {
            throw new ApiException("Missing the required parameter 'earningCode' when calling getByEarningCode(Async)");
        }

        return getByEarningCodeCall(companyId, employeeId, earningCode, _callback);

    }


    private ApiResponse<List<Earning>> getByEarningCodeWithHttpInfo(String companyId, String employeeId, String earningCode) throws ApiException {
        okhttp3.Call localVarCall = getByEarningCodeValidateBeforeCall(companyId, employeeId, earningCode, null);
        Type localVarReturnType = new TypeToken<List<Earning>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEarningCodeAsync(String companyId, String employeeId, String earningCode, final ApiCallback<List<Earning>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEarningCodeValidateBeforeCall(companyId, employeeId, earningCode, _callback);
        Type localVarReturnType = new TypeToken<List<Earning>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEarningCodeRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String earningCode;

        private GetByEarningCodeRequestBuilder(String companyId, String employeeId, String earningCode) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.earningCode = earningCode;
        }

        /**
         * Build call for getByEarningCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEarningCodeCall(companyId, employeeId, earningCode, _callback);
        }


        /**
         * Execute getByEarningCode request
         * @return List&lt;Earning&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public List<Earning> execute() throws ApiException {
            ApiResponse<List<Earning>> localVarResp = getByEarningCodeWithHttpInfo(companyId, employeeId, earningCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEarningCode request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Earning&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Earning>> executeWithHttpInfo() throws ApiException {
            return getByEarningCodeWithHttpInfo(companyId, employeeId, earningCode);
        }

        /**
         * Execute getByEarningCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Earning>> _callback) throws ApiException {
            return getByEarningCodeAsync(companyId, employeeId, earningCode, _callback);
        }
    }

    /**
     * Get Earnings by Earning Code
     * Get Earnings returns all earnings with the provided earning code for the selected employee.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param earningCode Earning Code (required)
     * @return GetByEarningCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The employee does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetByEarningCodeRequestBuilder getByEarningCode(String companyId, String employeeId, String earningCode) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (earningCode == null) throw new IllegalArgumentException("\"earningCode\" is required but got null");
            

        return new GetByEarningCodeRequestBuilder(companyId, employeeId, earningCode);
    }
}
