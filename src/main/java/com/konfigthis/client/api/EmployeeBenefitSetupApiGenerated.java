/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BenefitSetup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeBenefitSetupApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeBenefitSetupApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeBenefitSetupApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addOrUpdateBenefitSetupCall(String companyId, String employeeId, BenefitSetup json, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = json;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/benefitSetup"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrUpdateBenefitSetupValidateBeforeCall(String companyId, String employeeId, BenefitSetup json, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling addOrUpdateBenefitSetup(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addOrUpdateBenefitSetup(Async)");
        }

        // verify the required parameter 'json' is set
        if (json == null) {
            throw new ApiException("Missing the required parameter 'json' when calling addOrUpdateBenefitSetup(Async)");
        }

        return addOrUpdateBenefitSetupCall(companyId, employeeId, json, _callback);

    }


    private ApiResponse<Void> addOrUpdateBenefitSetupWithHttpInfo(String companyId, String employeeId, BenefitSetup json) throws ApiException {
        okhttp3.Call localVarCall = addOrUpdateBenefitSetupValidateBeforeCall(companyId, employeeId, json, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addOrUpdateBenefitSetupAsync(String companyId, String employeeId, BenefitSetup json, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrUpdateBenefitSetupValidateBeforeCall(companyId, employeeId, json, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddOrUpdateBenefitSetupRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private Object benefitClass;
        private Object benefitClassEffectiveDate;
        private Object benefitSalary;
        private Object benefitSalaryEffectiveDate;
        private Object doNotApplyAdministrativePeriod;
        private Object isMeasureAcaEligibility;

        private AddOrUpdateBenefitSetupRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set benefitClass
         * @param benefitClass Benefit Class code. Values are configured in Paylocity Payroll/HR solution Company &gt; Setup &gt; Benefits &gt; Classes.&lt;br  /&gt;Max length: 30 (optional)
         * @return AddOrUpdateBenefitSetupRequestBuilder
         */
        public AddOrUpdateBenefitSetupRequestBuilder benefitClass(Object benefitClass) {
            this.benefitClass = benefitClass;
            return this;
        }
        
        /**
         * Set benefitClassEffectiveDate
         * @param benefitClassEffectiveDate Date when Benefit Class takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*. (optional)
         * @return AddOrUpdateBenefitSetupRequestBuilder
         */
        public AddOrUpdateBenefitSetupRequestBuilder benefitClassEffectiveDate(Object benefitClassEffectiveDate) {
            this.benefitClassEffectiveDate = benefitClassEffectiveDate;
            return this;
        }
        
        /**
         * Set benefitSalary
         * @param benefitSalary Salary used to configure benefits.&lt;br  /&gt;Decimal(12,2) (optional)
         * @return AddOrUpdateBenefitSetupRequestBuilder
         */
        public AddOrUpdateBenefitSetupRequestBuilder benefitSalary(Object benefitSalary) {
            this.benefitSalary = benefitSalary;
            return this;
        }
        
        /**
         * Set benefitSalaryEffectiveDate
         * @param benefitSalaryEffectiveDate Date when Benefit Salary takes effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*. (optional)
         * @return AddOrUpdateBenefitSetupRequestBuilder
         */
        public AddOrUpdateBenefitSetupRequestBuilder benefitSalaryEffectiveDate(Object benefitSalaryEffectiveDate) {
            this.benefitSalaryEffectiveDate = benefitSalaryEffectiveDate;
            return this;
        }
        
        /**
         * Set doNotApplyAdministrativePeriod
         * @param doNotApplyAdministrativePeriod Applicable only for HR Enhanced clients and Benefit Classes with ACA Employment Type of Full Time. (optional)
         * @return AddOrUpdateBenefitSetupRequestBuilder
         */
        public AddOrUpdateBenefitSetupRequestBuilder doNotApplyAdministrativePeriod(Object doNotApplyAdministrativePeriod) {
            this.doNotApplyAdministrativePeriod = doNotApplyAdministrativePeriod;
            return this;
        }
        
        /**
         * Set isMeasureAcaEligibility
         * @param isMeasureAcaEligibility Only valid for HR Enhanced clients and Benefit Classes that are ACA Employment Type of Full Time. (optional)
         * @return AddOrUpdateBenefitSetupRequestBuilder
         */
        public AddOrUpdateBenefitSetupRequestBuilder isMeasureAcaEligibility(Object isMeasureAcaEligibility) {
            this.isMeasureAcaEligibility = isMeasureAcaEligibility;
            return this;
        }
        
        /**
         * Build call for addOrUpdateBenefitSetup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BenefitSetup json = buildBodyParams();
            return addOrUpdateBenefitSetupCall(companyId, employeeId, json, _callback);
        }

        private BenefitSetup buildBodyParams() {
            BenefitSetup json = new BenefitSetup();
            json.benefitClass(this.benefitClass);
            json.benefitClassEffectiveDate(this.benefitClassEffectiveDate);
            json.benefitSalary(this.benefitSalary);
            json.benefitSalaryEffectiveDate(this.benefitSalaryEffectiveDate);
            json.doNotApplyAdministrativePeriod(this.doNotApplyAdministrativePeriod);
            json.isMeasureAcaEligibility(this.isMeasureAcaEligibility);
            return json;
        }

        /**
         * Execute addOrUpdateBenefitSetup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            BenefitSetup json = buildBodyParams();
            addOrUpdateBenefitSetupWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute addOrUpdateBenefitSetup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            BenefitSetup json = buildBodyParams();
            return addOrUpdateBenefitSetupWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute addOrUpdateBenefitSetup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            BenefitSetup json = buildBodyParams();
            return addOrUpdateBenefitSetupAsync(companyId, employeeId, json, _callback);
        }
    }

    /**
     * Add/update employee&#39;s benefit setup
     * Sends new or updated employee benefit setup information directly to Paylocity Payroll/HR solution.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param json BenefitSetup Model (required)
     * @return AddOrUpdateBenefitSetupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public AddOrUpdateBenefitSetupRequestBuilder addOrUpdateBenefitSetup(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddOrUpdateBenefitSetupRequestBuilder(companyId, employeeId);
    }
}
