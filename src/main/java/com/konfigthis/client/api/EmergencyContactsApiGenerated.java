/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmergencyContact;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmergencyContactsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmergencyContactsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmergencyContactsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addOrUpdateCall(String companyId, String employeeId, EmergencyContact json, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = json;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/emergencyContacts"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrUpdateValidateBeforeCall(String companyId, String employeeId, EmergencyContact json, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling addOrUpdate(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addOrUpdate(Async)");
        }

        // verify the required parameter 'json' is set
        if (json == null) {
            throw new ApiException("Missing the required parameter 'json' when calling addOrUpdate(Async)");
        }

        return addOrUpdateCall(companyId, employeeId, json, _callback);

    }


    private ApiResponse<Void> addOrUpdateWithHttpInfo(String companyId, String employeeId, EmergencyContact json) throws ApiException {
        okhttp3.Call localVarCall = addOrUpdateValidateBeforeCall(companyId, employeeId, json, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addOrUpdateAsync(String companyId, String employeeId, EmergencyContact json, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrUpdateValidateBeforeCall(companyId, employeeId, json, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddOrUpdateRequestBuilder {
        private final Object firstName;
        private final Object lastName;
        private final String companyId;
        private final String employeeId;
        private Object address1;
        private Object address2;
        private Object city;
        private Object country;
        private Object county;
        private Object email;
        private Object homePhone;
        private Object mobilePhone;
        private Object notes;
        private Object pager;
        private Object primaryPhone;
        private Object priority;
        private Object relationship;
        private Object state;
        private Boolean syncEmployeeInfo;
        private Object workExtension;
        private Object workPhone;
        private Object zip;

        private AddOrUpdateRequestBuilder(Object firstName, Object lastName, String companyId, String employeeId) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set address1
         * @param address1 1st address line. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder address1(Object address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2 2nd address line. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder address2(Object address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set city
         * @param city City. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder city(Object city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set country
         * @param country County. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder country(Object country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set county
         * @param county Country.  Must be a valid 3 character country code.  Common values are *USA* (United States), *CAN* (Canada). (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder county(Object county) {
            this.county = county;
            return this;
        }
        
        /**
         * Set email
         * @param email Contact email.  Must be valid email address format. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder email(Object email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set homePhone
         * @param homePhone Contact Home Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder homePhone(Object homePhone) {
            this.homePhone = homePhone;
            return this;
        }
        
        /**
         * Set mobilePhone
         * @param mobilePhone Contact Mobile Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder mobilePhone(Object mobilePhone) {
            this.mobilePhone = mobilePhone;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes. &lt;br  /&gt;Max length: 1000 (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder notes(Object notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set pager
         * @param pager Contact Pager.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder pager(Object pager) {
            this.pager = pager;
            return this;
        }
        
        /**
         * Set primaryPhone
         * @param primaryPhone Required. Contact primary phone type.  Must match Company setup.  Valid  values are H (Home), M (Mobile), P (Pager), W (Work) (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder primaryPhone(Object primaryPhone) {
            this.primaryPhone = primaryPhone;
            return this;
        }
        
        /**
         * Set priority
         * @param priority Required. Contact priority. Valid values are *P* (Primary) or *S* (Secondary). (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder priority(Object priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set relationship
         * @param relationship Required. Contact relationship.  Must match Company setup.  Common values are Spouse, Mother, Father. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder relationship(Object relationship) {
            this.relationship = relationship;
            return this;
        }
        
        /**
         * Set state
         * @param state State or Province.  If U.S. address, must be valid 2 character state code.  Common values are *IL* (Illinois), *CA* (California). (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder state(Object state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set syncEmployeeInfo
         * @param syncEmployeeInfo Valid values are *true* or *false*. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder syncEmployeeInfo(Boolean syncEmployeeInfo) {
            this.syncEmployeeInfo = syncEmployeeInfo;
            return this;
        }
        
        /**
         * Set workExtension
         * @param workExtension Work Extension. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder workExtension(Object workExtension) {
            this.workExtension = workExtension;
            return this;
        }
        
        /**
         * Set workPhone
         * @param workPhone Contact Work Phone.  Valid phone format  *(###) #######* or *######-####* or *### ### ####* or *##########* or, if international, starts with *+#*, only spaces and digits allowed. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder workPhone(Object workPhone) {
            this.workPhone = workPhone;
            return this;
        }
        
        /**
         * Set zip
         * @param zip Postal code.  If U.S. address, must be a valid zip code. (optional)
         * @return AddOrUpdateRequestBuilder
         */
        public AddOrUpdateRequestBuilder zip(Object zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Build call for addOrUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmergencyContact json = buildBodyParams();
            return addOrUpdateCall(companyId, employeeId, json, _callback);
        }

        private EmergencyContact buildBodyParams() {
            EmergencyContact json = new EmergencyContact();
            json.address1(this.address1);
            json.address2(this.address2);
            json.city(this.city);
            json.country(this.country);
            json.county(this.county);
            json.email(this.email);
            json.firstName(this.firstName);
            json.homePhone(this.homePhone);
            json.lastName(this.lastName);
            json.mobilePhone(this.mobilePhone);
            json.notes(this.notes);
            json.pager(this.pager);
            json.primaryPhone(this.primaryPhone);
            json.priority(this.priority);
            json.relationship(this.relationship);
            json.state(this.state);
            json.syncEmployeeInfo(this.syncEmployeeInfo);
            json.workExtension(this.workExtension);
            json.workPhone(this.workPhone);
            json.zip(this.zip);
            return json;
        }

        /**
         * Execute addOrUpdate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmergencyContact json = buildBodyParams();
            addOrUpdateWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute addOrUpdate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmergencyContact json = buildBodyParams();
            return addOrUpdateWithHttpInfo(companyId, employeeId, json);
        }

        /**
         * Execute addOrUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmergencyContact json = buildBodyParams();
            return addOrUpdateAsync(companyId, employeeId, json, _callback);
        }
    }

    /**
     * Add/update emergency contacts
     * Sends new or updated employee emergency contacts directly to Paylocity Payroll/HR solution.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param json Emergency Contact Model (required)
     * @return AddOrUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added or updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public AddOrUpdateRequestBuilder addOrUpdate(Object firstName, Object lastName, String companyId, String employeeId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddOrUpdateRequestBuilder(firstName, lastName, companyId, employeeId);
    }
}
