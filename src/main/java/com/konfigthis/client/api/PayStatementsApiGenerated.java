/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayStatementDetails;
import com.konfigthis.client.model.PayStatementSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayStatementsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayStatementsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayStatementsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDetailsByYearCall(String companyId, String employeeId, String year, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (pagenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagenumber", pagenumber));
        }

        if (includetotalcount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includetotalcount", includetotalcount));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsByYearValidateBeforeCall(String companyId, String employeeId, String year, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getDetailsByYear(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getDetailsByYear(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getDetailsByYear(Async)");
        }

        return getDetailsByYearCall(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, _callback);

    }


    private ApiResponse<List<PayStatementDetails>> getDetailsByYearWithHttpInfo(String companyId, String employeeId, String year, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup) throws ApiException {
        okhttp3.Call localVarCall = getDetailsByYearValidateBeforeCall(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, null);
        Type localVarReturnType = new TypeToken<List<PayStatementDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsByYearAsync(String companyId, String employeeId, String year, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback<List<PayStatementDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsByYearValidateBeforeCall(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        Type localVarReturnType = new TypeToken<List<PayStatementDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsByYearRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String year;
        private Integer pagesize;
        private Integer pagenumber;
        private Boolean includetotalcount;
        private String codegroup;

        private GetDetailsByYearRequestBuilder(String companyId, String employeeId, String year) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.year = year;
        }

        /**
         * Set pagesize
         * @param pagesize Number of records per page. Default value is 25. (optional)
         * @return GetDetailsByYearRequestBuilder
         */
        public GetDetailsByYearRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set pagenumber
         * @param pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0. (optional)
         * @return GetDetailsByYearRequestBuilder
         */
        public GetDetailsByYearRequestBuilder pagenumber(Integer pagenumber) {
            this.pagenumber = pagenumber;
            return this;
        }
        
        /**
         * Set includetotalcount
         * @param includetotalcount Whether to include the total record count in the header&#39;s X-Pcty-Total-Count property. Default value is true. (optional)
         * @return GetDetailsByYearRequestBuilder
         */
        public GetDetailsByYearRequestBuilder includetotalcount(Boolean includetotalcount) {
            this.includetotalcount = includetotalcount;
            return this;
        }
        
        /**
         * Set codegroup
         * @param codegroup Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW. (optional)
         * @return GetDetailsByYearRequestBuilder
         */
        public GetDetailsByYearRequestBuilder codegroup(String codegroup) {
            this.codegroup = codegroup;
            return this;
        }
        
        /**
         * Build call for getDetailsByYear
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsByYearCall(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        }


        /**
         * Execute getDetailsByYear request
         * @return List&lt;PayStatementDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public List<PayStatementDetails> execute() throws ApiException {
            ApiResponse<List<PayStatementDetails>> localVarResp = getDetailsByYearWithHttpInfo(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailsByYear request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayStatementDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayStatementDetails>> executeWithHttpInfo() throws ApiException {
            return getDetailsByYearWithHttpInfo(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup);
        }

        /**
         * Execute getDetailsByYear request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayStatementDetails>> _callback) throws ApiException {
            return getDetailsByYearAsync(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        }
    }

    /**
     * Get employee pay statement details data for the specified year.
     * Get pay statement details API will return employee pay statement details data currently available in Paylocity Payroll/HR solution for the specified year.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param year The year for which to retrieve pay statement data (required)
     * @return GetDetailsByYearRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsByYearRequestBuilder getDetailsByYear(String companyId, String employeeId, String year) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        return new GetDetailsByYearRequestBuilder(companyId, employeeId, year);
    }
    private okhttp3.Call getDetailsByYearAndCheckDateCall(String companyId, String employeeId, String year, String checkDate, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/paystatement/details/{year}/{checkDate}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "checkDate" + "}", localVarApiClient.escapeString(checkDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (pagenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagenumber", pagenumber));
        }

        if (includetotalcount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includetotalcount", includetotalcount));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsByYearAndCheckDateValidateBeforeCall(String companyId, String employeeId, String year, String checkDate, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getDetailsByYearAndCheckDate(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getDetailsByYearAndCheckDate(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getDetailsByYearAndCheckDate(Async)");
        }

        // verify the required parameter 'checkDate' is set
        if (checkDate == null) {
            throw new ApiException("Missing the required parameter 'checkDate' when calling getDetailsByYearAndCheckDate(Async)");
        }

        return getDetailsByYearAndCheckDateCall(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, _callback);

    }


    private ApiResponse<List<PayStatementDetails>> getDetailsByYearAndCheckDateWithHttpInfo(String companyId, String employeeId, String year, String checkDate, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup) throws ApiException {
        okhttp3.Call localVarCall = getDetailsByYearAndCheckDateValidateBeforeCall(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, null);
        Type localVarReturnType = new TypeToken<List<PayStatementDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsByYearAndCheckDateAsync(String companyId, String employeeId, String year, String checkDate, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback<List<PayStatementDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsByYearAndCheckDateValidateBeforeCall(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        Type localVarReturnType = new TypeToken<List<PayStatementDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsByYearAndCheckDateRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String year;
        private final String checkDate;
        private Integer pagesize;
        private Integer pagenumber;
        private Boolean includetotalcount;
        private String codegroup;

        private GetDetailsByYearAndCheckDateRequestBuilder(String companyId, String employeeId, String year, String checkDate) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.year = year;
            this.checkDate = checkDate;
        }

        /**
         * Set pagesize
         * @param pagesize Number of records per page. Default value is 25. (optional)
         * @return GetDetailsByYearAndCheckDateRequestBuilder
         */
        public GetDetailsByYearAndCheckDateRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set pagenumber
         * @param pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0. (optional)
         * @return GetDetailsByYearAndCheckDateRequestBuilder
         */
        public GetDetailsByYearAndCheckDateRequestBuilder pagenumber(Integer pagenumber) {
            this.pagenumber = pagenumber;
            return this;
        }
        
        /**
         * Set includetotalcount
         * @param includetotalcount Whether to include the total record count in the header&#39;s X-Pcty-Total-Count property. Default value is true. (optional)
         * @return GetDetailsByYearAndCheckDateRequestBuilder
         */
        public GetDetailsByYearAndCheckDateRequestBuilder includetotalcount(Boolean includetotalcount) {
            this.includetotalcount = includetotalcount;
            return this;
        }
        
        /**
         * Set codegroup
         * @param codegroup Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW. (optional)
         * @return GetDetailsByYearAndCheckDateRequestBuilder
         */
        public GetDetailsByYearAndCheckDateRequestBuilder codegroup(String codegroup) {
            this.codegroup = codegroup;
            return this;
        }
        
        /**
         * Build call for getDetailsByYearAndCheckDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsByYearAndCheckDateCall(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        }


        /**
         * Execute getDetailsByYearAndCheckDate request
         * @return List&lt;PayStatementDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public List<PayStatementDetails> execute() throws ApiException {
            ApiResponse<List<PayStatementDetails>> localVarResp = getDetailsByYearAndCheckDateWithHttpInfo(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailsByYearAndCheckDate request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayStatementDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayStatementDetails>> executeWithHttpInfo() throws ApiException {
            return getDetailsByYearAndCheckDateWithHttpInfo(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup);
        }

        /**
         * Execute getDetailsByYearAndCheckDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayStatementDetails>> _callback) throws ApiException {
            return getDetailsByYearAndCheckDateAsync(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        }
    }

    /**
     * Get employee pay statement details data for the specified year and check date.
     * Get pay statement details API will return employee pay statement detail data currently available in Paylocity Payroll/HR solution for the specified year and check date.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param year The year for which to retrieve pay statement data (required)
     * @param checkDate The check date for which to retrieve pay statement data (required)
     * @return GetDetailsByYearAndCheckDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsByYearAndCheckDateRequestBuilder getDetailsByYearAndCheckDate(String companyId, String employeeId, String year, String checkDate) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        if (checkDate == null) throw new IllegalArgumentException("\"checkDate\" is required but got null");
            

        return new GetDetailsByYearAndCheckDateRequestBuilder(companyId, employeeId, year, checkDate);
    }
    private okhttp3.Call getSummaryByYearCall(String companyId, String employeeId, String year, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (pagenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagenumber", pagenumber));
        }

        if (includetotalcount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includetotalcount", includetotalcount));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryByYearValidateBeforeCall(String companyId, String employeeId, String year, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSummaryByYear(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getSummaryByYear(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getSummaryByYear(Async)");
        }

        return getSummaryByYearCall(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, _callback);

    }


    private ApiResponse<List<PayStatementSummary>> getSummaryByYearWithHttpInfo(String companyId, String employeeId, String year, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup) throws ApiException {
        okhttp3.Call localVarCall = getSummaryByYearValidateBeforeCall(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, null);
        Type localVarReturnType = new TypeToken<List<PayStatementSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSummaryByYearAsync(String companyId, String employeeId, String year, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback<List<PayStatementSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSummaryByYearValidateBeforeCall(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        Type localVarReturnType = new TypeToken<List<PayStatementSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSummaryByYearRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String year;
        private Integer pagesize;
        private Integer pagenumber;
        private Boolean includetotalcount;
        private String codegroup;

        private GetSummaryByYearRequestBuilder(String companyId, String employeeId, String year) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.year = year;
        }

        /**
         * Set pagesize
         * @param pagesize Number of records per page. Default value is 25. (optional)
         * @return GetSummaryByYearRequestBuilder
         */
        public GetSummaryByYearRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set pagenumber
         * @param pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0. (optional)
         * @return GetSummaryByYearRequestBuilder
         */
        public GetSummaryByYearRequestBuilder pagenumber(Integer pagenumber) {
            this.pagenumber = pagenumber;
            return this;
        }
        
        /**
         * Set includetotalcount
         * @param includetotalcount Whether to include the total record count in the header&#39;s X-Pcty-Total-Count property. Default value is true. (optional)
         * @return GetSummaryByYearRequestBuilder
         */
        public GetSummaryByYearRequestBuilder includetotalcount(Boolean includetotalcount) {
            this.includetotalcount = includetotalcount;
            return this;
        }
        
        /**
         * Set codegroup
         * @param codegroup Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW. (optional)
         * @return GetSummaryByYearRequestBuilder
         */
        public GetSummaryByYearRequestBuilder codegroup(String codegroup) {
            this.codegroup = codegroup;
            return this;
        }
        
        /**
         * Build call for getSummaryByYear
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSummaryByYearCall(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        }


        /**
         * Execute getSummaryByYear request
         * @return List&lt;PayStatementSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public List<PayStatementSummary> execute() throws ApiException {
            ApiResponse<List<PayStatementSummary>> localVarResp = getSummaryByYearWithHttpInfo(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSummaryByYear request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayStatementSummary&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayStatementSummary>> executeWithHttpInfo() throws ApiException {
            return getSummaryByYearWithHttpInfo(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup);
        }

        /**
         * Execute getSummaryByYear request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayStatementSummary>> _callback) throws ApiException {
            return getSummaryByYearAsync(companyId, employeeId, year, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        }
    }

    /**
     * Get employee pay statement summary data for the specified year.
     * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param year The year for which to retrieve pay statement data (required)
     * @return GetSummaryByYearRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetSummaryByYearRequestBuilder getSummaryByYear(String companyId, String employeeId, String year) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        return new GetSummaryByYearRequestBuilder(companyId, employeeId, year);
    }
    private okhttp3.Call getSummaryDataCall(String companyId, String employeeId, String year, String checkDate, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/companies/{companyId}/employees/{employeeId}/paystatement/summary/{year}/{checkDate}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "checkDate" + "}", localVarApiClient.escapeString(checkDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (pagenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagenumber", pagenumber));
        }

        if (includetotalcount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includetotalcount", includetotalcount));
        }

        if (codegroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codegroup", codegroup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryDataValidateBeforeCall(String companyId, String employeeId, String year, String checkDate, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSummaryData(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getSummaryData(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getSummaryData(Async)");
        }

        // verify the required parameter 'checkDate' is set
        if (checkDate == null) {
            throw new ApiException("Missing the required parameter 'checkDate' when calling getSummaryData(Async)");
        }

        return getSummaryDataCall(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, _callback);

    }


    private ApiResponse<List<PayStatementSummary>> getSummaryDataWithHttpInfo(String companyId, String employeeId, String year, String checkDate, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup) throws ApiException {
        okhttp3.Call localVarCall = getSummaryDataValidateBeforeCall(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, null);
        Type localVarReturnType = new TypeToken<List<PayStatementSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSummaryDataAsync(String companyId, String employeeId, String year, String checkDate, Integer pagesize, Integer pagenumber, Boolean includetotalcount, String codegroup, final ApiCallback<List<PayStatementSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSummaryDataValidateBeforeCall(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        Type localVarReturnType = new TypeToken<List<PayStatementSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSummaryDataRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String year;
        private final String checkDate;
        private Integer pagesize;
        private Integer pagenumber;
        private Boolean includetotalcount;
        private String codegroup;

        private GetSummaryDataRequestBuilder(String companyId, String employeeId, String year, String checkDate) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.year = year;
            this.checkDate = checkDate;
        }

        /**
         * Set pagesize
         * @param pagesize Number of records per page. Default value is 25. (optional)
         * @return GetSummaryDataRequestBuilder
         */
        public GetSummaryDataRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set pagenumber
         * @param pagenumber Page number to retrieve; page numbers are 0-based (so to get the first page of results, pass pagenumber&#x3D;0). Default value is 0. (optional)
         * @return GetSummaryDataRequestBuilder
         */
        public GetSummaryDataRequestBuilder pagenumber(Integer pagenumber) {
            this.pagenumber = pagenumber;
            return this;
        }
        
        /**
         * Set includetotalcount
         * @param includetotalcount Whether to include the total record count in the header&#39;s X-Pcty-Total-Count property. Default value is true. (optional)
         * @return GetSummaryDataRequestBuilder
         */
        public GetSummaryDataRequestBuilder includetotalcount(Boolean includetotalcount) {
            this.includetotalcount = includetotalcount;
            return this;
        }
        
        /**
         * Set codegroup
         * @param codegroup Retrieve pay statement details related to specific deduction, earning or tax types. Common values include 401k, Memo, Reg, OT, Cash Tips, FED and SITW. (optional)
         * @return GetSummaryDataRequestBuilder
         */
        public GetSummaryDataRequestBuilder codegroup(String codegroup) {
            this.codegroup = codegroup;
            return this;
        }
        
        /**
         * Build call for getSummaryData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSummaryDataCall(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        }


        /**
         * Execute getSummaryData request
         * @return List&lt;PayStatementSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public List<PayStatementSummary> execute() throws ApiException {
            ApiResponse<List<PayStatementSummary>> localVarResp = getSummaryDataWithHttpInfo(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSummaryData request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayStatementSummary&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayStatementSummary>> executeWithHttpInfo() throws ApiException {
            return getSummaryDataWithHttpInfo(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup);
        }

        /**
         * Execute getSummaryData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayStatementSummary>> _callback) throws ApiException {
            return getSummaryDataAsync(companyId, employeeId, year, checkDate, pagesize, pagenumber, includetotalcount, codegroup, _callback);
        }
    }

    /**
     * Get employee pay statement summary data for the specified year and check date.
     * Get pay statement summary API will return employee pay statement summary data currently available in Paylocity Payroll/HR solution for the specified year and check date.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param year The year for which to retrieve pay statement data (required)
     * @param checkDate The check date for which to retrieve pay statement data (required)
     * @return GetSummaryDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetSummaryDataRequestBuilder getSummaryData(String companyId, String employeeId, String year, String checkDate) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        if (checkDate == null) throw new IllegalArgumentException("\"checkDate\" is required but got null");
            

        return new GetSummaryDataRequestBuilder(companyId, employeeId, year, checkDate);
    }
}
