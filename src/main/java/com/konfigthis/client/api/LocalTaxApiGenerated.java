/*
 * WebLink API
 * For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview
 *
 * The version of the OpenAPI document: v2
 * Contact: webservices@paylocity.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LocalTax;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LocalTaxApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocalTaxApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LocalTaxApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOrUpdateLocalTaxesCall(String companyId, String employeeId, LocalTax body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/companies/{companyId}/employees/{employeeId}/localTaxes"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateLocalTaxesValidateBeforeCall(String companyId, String employeeId, LocalTax body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createOrUpdateLocalTaxes(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createOrUpdateLocalTaxes(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOrUpdateLocalTaxes(Async)");
        }

        return createOrUpdateLocalTaxesCall(companyId, employeeId, body, _callback);

    }


    private ApiResponse<Void> createOrUpdateLocalTaxesWithHttpInfo(String companyId, String employeeId, LocalTax body) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateLocalTaxesValidateBeforeCall(companyId, employeeId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createOrUpdateLocalTaxesAsync(String companyId, String employeeId, LocalTax body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateLocalTaxesValidateBeforeCall(companyId, employeeId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateLocalTaxesRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private Object exemptions;
        private Object exemptions2;
        private Object filingStatus;
        private Object residentPSD;
        private Object taxCode;
        private Object workPSD;

        private CreateOrUpdateLocalTaxesRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set exemptions
         * @param exemptions Local tax exemptions value.&lt;br  /&gt;Decimal (12,2) (optional)
         * @return CreateOrUpdateLocalTaxesRequestBuilder
         */
        public CreateOrUpdateLocalTaxesRequestBuilder exemptions(Object exemptions) {
            this.exemptions = exemptions;
            return this;
        }
        
        /**
         * Set exemptions2
         * @param exemptions2 Local tax exemptions 2 value.&lt;br  /&gt;Decimal (12,2) (optional)
         * @return CreateOrUpdateLocalTaxesRequestBuilder
         */
        public CreateOrUpdateLocalTaxesRequestBuilder exemptions2(Object exemptions2) {
            this.exemptions2 = exemptions2;
            return this;
        }
        
        /**
         * Set filingStatus
         * @param filingStatus Employee local tax filing status. Must match specific local tax setup. &lt;br  /&gt; Max length: 50 (optional)
         * @return CreateOrUpdateLocalTaxesRequestBuilder
         */
        public CreateOrUpdateLocalTaxesRequestBuilder filingStatus(Object filingStatus) {
            this.filingStatus = filingStatus;
            return this;
        }
        
        /**
         * Set residentPSD
         * @param residentPSD Resident PSD (political subdivision code) applicable in PA. Must match Company setup.&lt;br  /&gt; Max length: 9 (optional)
         * @return CreateOrUpdateLocalTaxesRequestBuilder
         */
        public CreateOrUpdateLocalTaxesRequestBuilder residentPSD(Object residentPSD) {
            this.residentPSD = residentPSD;
            return this;
        }
        
        /**
         * Set taxCode
         * @param taxCode Local tax code.&lt;br  /&gt;Max length: 50 (optional)
         * @return CreateOrUpdateLocalTaxesRequestBuilder
         */
        public CreateOrUpdateLocalTaxesRequestBuilder taxCode(Object taxCode) {
            this.taxCode = taxCode;
            return this;
        }
        
        /**
         * Set workPSD
         * @param workPSD Work location PSD. Must match Company setup. &lt;br  /&gt; Max length: 9 (optional)
         * @return CreateOrUpdateLocalTaxesRequestBuilder
         */
        public CreateOrUpdateLocalTaxesRequestBuilder workPSD(Object workPSD) {
            this.workPSD = workPSD;
            return this;
        }
        
        /**
         * Build call for createOrUpdateLocalTaxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully Added </td><td>  * location - The URI to the newly created local tax <br>  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LocalTax body = buildBodyParams();
            return createOrUpdateLocalTaxesCall(companyId, employeeId, body, _callback);
        }

        private LocalTax buildBodyParams() {
            LocalTax body = new LocalTax();
            body.exemptions(this.exemptions);
            body.exemptions2(this.exemptions2);
            body.filingStatus(this.filingStatus);
            body.residentPSD(this.residentPSD);
            body.taxCode(this.taxCode);
            body.workPSD(this.workPSD);
            return body;
        }

        /**
         * Execute createOrUpdateLocalTaxes request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully Added </td><td>  * location - The URI to the newly created local tax <br>  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LocalTax body = buildBodyParams();
            createOrUpdateLocalTaxesWithHttpInfo(companyId, employeeId, body);
        }

        /**
         * Execute createOrUpdateLocalTaxes request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully Added </td><td>  * location - The URI to the newly created local tax <br>  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LocalTax body = buildBodyParams();
            return createOrUpdateLocalTaxesWithHttpInfo(companyId, employeeId, body);
        }

        /**
         * Execute createOrUpdateLocalTaxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully Added </td><td>  * location - The URI to the newly created local tax <br>  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LocalTax body = buildBodyParams();
            return createOrUpdateLocalTaxesAsync(companyId, employeeId, body, _callback);
        }
    }

    /**
     * Add Local Tax
     * Add Local Tax sends new local tax information directly to Paylocity Payroll/HR solution.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param body localTax Model (required)
     * @return CreateOrUpdateLocalTaxesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully Added </td><td>  * location - The URI to the newly created local tax <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateLocalTaxesRequestBuilder createOrUpdateLocalTaxes(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new CreateOrUpdateLocalTaxesRequestBuilder(companyId, employeeId);
    }
    private okhttp3.Call getAllTaxesForEmployeeCall(String companyId, String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{companyId}/employees/{employeeId}/localTaxes"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTaxesForEmployeeValidateBeforeCall(String companyId, String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAllTaxesForEmployee(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAllTaxesForEmployee(Async)");
        }

        return getAllTaxesForEmployeeCall(companyId, employeeId, _callback);

    }


    private ApiResponse<List<LocalTax>> getAllTaxesForEmployeeWithHttpInfo(String companyId, String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getAllTaxesForEmployeeValidateBeforeCall(companyId, employeeId, null);
        Type localVarReturnType = new TypeToken<List<LocalTax>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllTaxesForEmployeeAsync(String companyId, String employeeId, final ApiCallback<List<LocalTax>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTaxesForEmployeeValidateBeforeCall(companyId, employeeId, _callback);
        Type localVarReturnType = new TypeToken<List<LocalTax>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllTaxesForEmployeeRequestBuilder {
        private final String companyId;
        private final String employeeId;

        private GetAllTaxesForEmployeeRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Build call for getAllTaxesForEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllTaxesForEmployeeCall(companyId, employeeId, _callback);
        }


        /**
         * Execute getAllTaxesForEmployee request
         * @return List&lt;LocalTax&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public List<LocalTax> execute() throws ApiException {
            ApiResponse<List<LocalTax>> localVarResp = getAllTaxesForEmployeeWithHttpInfo(companyId, employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllTaxesForEmployee request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LocalTax&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LocalTax>> executeWithHttpInfo() throws ApiException {
            return getAllTaxesForEmployeeWithHttpInfo(companyId, employeeId);
        }

        /**
         * Execute getAllTaxesForEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LocalTax>> _callback) throws ApiException {
            return getAllTaxesForEmployeeAsync(companyId, employeeId, _callback);
        }
    }

    /**
     * Get All Local Taxes
     * Get All Local Taxes returns all local tax information for the selected employee.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @return GetAllTaxesForEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetAllTaxesForEmployeeRequestBuilder getAllTaxesForEmployee(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetAllTaxesForEmployeeRequestBuilder(companyId, employeeId);
    }
    private okhttp3.Call getForTaxCodeCall(String companyId, String employeeId, String taxCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "taxCode" + "}", localVarApiClient.escapeString(taxCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForTaxCodeValidateBeforeCall(String companyId, String employeeId, String taxCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getForTaxCode(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getForTaxCode(Async)");
        }

        // verify the required parameter 'taxCode' is set
        if (taxCode == null) {
            throw new ApiException("Missing the required parameter 'taxCode' when calling getForTaxCode(Async)");
        }

        return getForTaxCodeCall(companyId, employeeId, taxCode, _callback);

    }


    private ApiResponse<LocalTax> getForTaxCodeWithHttpInfo(String companyId, String employeeId, String taxCode) throws ApiException {
        okhttp3.Call localVarCall = getForTaxCodeValidateBeforeCall(companyId, employeeId, taxCode, null);
        Type localVarReturnType = new TypeToken<LocalTax>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getForTaxCodeAsync(String companyId, String employeeId, String taxCode, final ApiCallback<LocalTax> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForTaxCodeValidateBeforeCall(companyId, employeeId, taxCode, _callback);
        Type localVarReturnType = new TypeToken<LocalTax>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetForTaxCodeRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String taxCode;

        private GetForTaxCodeRequestBuilder(String companyId, String employeeId, String taxCode) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.taxCode = taxCode;
        }

        /**
         * Build call for getForTaxCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getForTaxCodeCall(companyId, employeeId, taxCode, _callback);
        }


        /**
         * Execute getForTaxCode request
         * @return LocalTax
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public LocalTax execute() throws ApiException {
            ApiResponse<LocalTax> localVarResp = getForTaxCodeWithHttpInfo(companyId, employeeId, taxCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getForTaxCode request with HTTP info returned
         * @return ApiResponse&lt;LocalTax&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalTax> executeWithHttpInfo() throws ApiException {
            return getForTaxCodeWithHttpInfo(companyId, employeeId, taxCode);
        }

        /**
         * Execute getForTaxCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalTax> _callback) throws ApiException {
            return getForTaxCodeAsync(companyId, employeeId, taxCode, _callback);
        }
    }

    /**
     * Get Local Tax for Tax Code
     * Get Local Tax for Tax Code returns local tax information for the specific tax code for the selected employee.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param taxCode Tax Code (required)
     * @return GetForTaxCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Retrieved </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetForTaxCodeRequestBuilder getForTaxCode(String companyId, String employeeId, String taxCode) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (taxCode == null) throw new IllegalArgumentException("\"taxCode\" is required but got null");
            

        return new GetForTaxCodeRequestBuilder(companyId, employeeId, taxCode);
    }
    private okhttp3.Call removeForTaxCodeCall(String companyId, String employeeId, String taxCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "taxCode" + "}", localVarApiClient.escapeString(taxCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeForTaxCodeValidateBeforeCall(String companyId, String employeeId, String taxCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling removeForTaxCode(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling removeForTaxCode(Async)");
        }

        // verify the required parameter 'taxCode' is set
        if (taxCode == null) {
            throw new ApiException("Missing the required parameter 'taxCode' when calling removeForTaxCode(Async)");
        }

        return removeForTaxCodeCall(companyId, employeeId, taxCode, _callback);

    }


    private ApiResponse<Void> removeForTaxCodeWithHttpInfo(String companyId, String employeeId, String taxCode) throws ApiException {
        okhttp3.Call localVarCall = removeForTaxCodeValidateBeforeCall(companyId, employeeId, taxCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeForTaxCodeAsync(String companyId, String employeeId, String taxCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeForTaxCodeValidateBeforeCall(companyId, employeeId, taxCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveForTaxCodeRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String taxCode;

        private RemoveForTaxCodeRequestBuilder(String companyId, String employeeId, String taxCode) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.taxCode = taxCode;
        }

        /**
         * Build call for removeForTaxCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully Deleted </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeForTaxCodeCall(companyId, employeeId, taxCode, _callback);
        }


        /**
         * Execute removeForTaxCode request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully Deleted </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeForTaxCodeWithHttpInfo(companyId, employeeId, taxCode);
        }

        /**
         * Execute removeForTaxCode request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully Deleted </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeForTaxCodeWithHttpInfo(companyId, employeeId, taxCode);
        }

        /**
         * Execute removeForTaxCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully Deleted </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeForTaxCodeAsync(companyId, employeeId, taxCode, _callback);
        }
    }

    /**
     * Delete Local Tax for Tax Code
     * Delete Local Tax for Tax Code deletes the local tax code from Paylocity Payroll/HR solution.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param taxCode Tax Code (required)
     * @return RemoveForTaxCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveForTaxCodeRequestBuilder removeForTaxCode(String companyId, String employeeId, String taxCode) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (taxCode == null) throw new IllegalArgumentException("\"taxCode\" is required but got null");
            

        return new RemoveForTaxCodeRequestBuilder(companyId, employeeId, taxCode);
    }
    private okhttp3.Call updateForTaxCodeCall(String companyId, String employeeId, String taxCode, LocalTax body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "taxCode" + "}", localVarApiClient.escapeString(taxCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "paylocity_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateForTaxCodeValidateBeforeCall(String companyId, String employeeId, String taxCode, LocalTax body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateForTaxCode(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateForTaxCode(Async)");
        }

        // verify the required parameter 'taxCode' is set
        if (taxCode == null) {
            throw new ApiException("Missing the required parameter 'taxCode' when calling updateForTaxCode(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateForTaxCode(Async)");
        }

        return updateForTaxCodeCall(companyId, employeeId, taxCode, body, _callback);

    }


    private ApiResponse<Void> updateForTaxCodeWithHttpInfo(String companyId, String employeeId, String taxCode, LocalTax body) throws ApiException {
        okhttp3.Call localVarCall = updateForTaxCodeValidateBeforeCall(companyId, employeeId, taxCode, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateForTaxCodeAsync(String companyId, String employeeId, String taxCode, LocalTax body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateForTaxCodeValidateBeforeCall(companyId, employeeId, taxCode, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateForTaxCodeRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private final String taxCode;
        private Object exemptions;
        private Object exemptions2;
        private Object filingStatus;
        private Object residentPSD;
        private Object taxCode;
        private Object workPSD;

        private UpdateForTaxCodeRequestBuilder(String companyId, String employeeId, String taxCode) {
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.taxCode = taxCode;
        }

        /**
         * Set exemptions
         * @param exemptions Local tax exemptions value.&lt;br  /&gt;Decimal (12,2) (optional)
         * @return UpdateForTaxCodeRequestBuilder
         */
        public UpdateForTaxCodeRequestBuilder exemptions(Object exemptions) {
            this.exemptions = exemptions;
            return this;
        }
        
        /**
         * Set exemptions2
         * @param exemptions2 Local tax exemptions 2 value.&lt;br  /&gt;Decimal (12,2) (optional)
         * @return UpdateForTaxCodeRequestBuilder
         */
        public UpdateForTaxCodeRequestBuilder exemptions2(Object exemptions2) {
            this.exemptions2 = exemptions2;
            return this;
        }
        
        /**
         * Set filingStatus
         * @param filingStatus Employee local tax filing status. Must match specific local tax setup. &lt;br  /&gt; Max length: 50 (optional)
         * @return UpdateForTaxCodeRequestBuilder
         */
        public UpdateForTaxCodeRequestBuilder filingStatus(Object filingStatus) {
            this.filingStatus = filingStatus;
            return this;
        }
        
        /**
         * Set residentPSD
         * @param residentPSD Resident PSD (political subdivision code) applicable in PA. Must match Company setup.&lt;br  /&gt; Max length: 9 (optional)
         * @return UpdateForTaxCodeRequestBuilder
         */
        public UpdateForTaxCodeRequestBuilder residentPSD(Object residentPSD) {
            this.residentPSD = residentPSD;
            return this;
        }
        
        /**
         * Set taxCode
         * @param taxCode Local tax code.&lt;br  /&gt;Max length: 50 (optional)
         * @return UpdateForTaxCodeRequestBuilder
         */
        public UpdateForTaxCodeRequestBuilder taxCode(Object taxCode) {
            this.taxCode = taxCode;
            return this;
        }
        
        /**
         * Set workPSD
         * @param workPSD Work location PSD. Must match Company setup. &lt;br  /&gt; Max length: 9 (optional)
         * @return UpdateForTaxCodeRequestBuilder
         */
        public UpdateForTaxCodeRequestBuilder workPSD(Object workPSD) {
            this.workPSD = workPSD;
            return this;
        }
        
        /**
         * Build call for updateForTaxCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully Updated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LocalTax body = buildBodyParams();
            return updateForTaxCodeCall(companyId, employeeId, taxCode, body, _callback);
        }

        private LocalTax buildBodyParams() {
            LocalTax body = new LocalTax();
            body.exemptions(this.exemptions);
            body.exemptions2(this.exemptions2);
            body.filingStatus(this.filingStatus);
            body.residentPSD(this.residentPSD);
            body.taxCode(this.taxCode);
            body.workPSD(this.workPSD);
            return body;
        }

        /**
         * Execute updateForTaxCode request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully Updated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            LocalTax body = buildBodyParams();
            updateForTaxCodeWithHttpInfo(companyId, employeeId, taxCode, body);
        }

        /**
         * Execute updateForTaxCode request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully Updated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            LocalTax body = buildBodyParams();
            return updateForTaxCodeWithHttpInfo(companyId, employeeId, taxCode, body);
        }

        /**
         * Execute updateForTaxCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully Updated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            LocalTax body = buildBodyParams();
            return updateForTaxCodeAsync(companyId, employeeId, taxCode, body, _callback);
        }
    }

    /**
     * Update Local Tax
     * Update Local Tax sends updated local tax code information for the selected employee.
     * @param companyId The Paylocity Company Identifier. This is the unique value provided by Paylocity to each specific Payroll Entity.                  **Allowable Values:**                  9 char max (required)
     * @param employeeId The Paylocity Employee ID. This is a unique value per Paylocity Company ID.  **Allowable Values:**  10 char max (required)
     * @param taxCode Tax Code (required)
     * @param body localTax Model (Note: taxCode can be included in the localTax model but will be ignored) (required)
     * @return UpdateForTaxCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully Updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateForTaxCodeRequestBuilder updateForTaxCode(String companyId, String employeeId, String taxCode) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (taxCode == null) throw new IllegalArgumentException("\"taxCode\" is required but got null");
            

        return new UpdateForTaxCodeRequestBuilder(companyId, employeeId, taxCode);
    }
}
